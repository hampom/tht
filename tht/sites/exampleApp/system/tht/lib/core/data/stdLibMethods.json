{
    "Boolean": {
        "toNumber": "toNumber()",
        "toString": "toString()"
    },
    "Cache": {
        "delete": "Cache.delete($key)",
        "get": "Cache.get($key, $default='', $expireSecs=3600)",
        "getDriver": "Cache.getDriver()",
        "has": "Cache.has($key)",
        "set": "Cache.set($key, $value, $expireSecs)"
    },
    "Config": {
        "get": "Config.get('myValue')"
    },
    "Date": {
        "daysAgo": "Date.daysAgo($numDays)",
        "daysFromNow": "Date.daysFromNow($numDays)",
        "daysToSecs": "Date.daysToSecs($numDays)",
        "difference": "Date.difference($timestamp1, $timestamp2 = now)",
        "format": "Date.format($format, $timestamp = now)",
        "hoursAgo": "Date.hoursAgo($numHours)",
        "hoursFromNow": "Date.hoursFromNow($numHours)",
        "hoursToSecs": "Date.hoursToSecs($numHours)",
        "mapFromTimestamp": "Date.mapFromTimestamp($timestamp = now)",
        "minsAgo": "Date.minsAgo($numMins)",
        "minsFromNow": "Date.minsFromNow($numMins)",
        "minsToSecs": "Date.minsToSecs($numMinutes)",
        "now": "Date.now($inMilliseconds = false)",
        "sandwich": "Date.sandwich()",
        "secsToDays": "Date.secsToDays($numSeconds)",
        "secsToHours": "Date.secsToHours($numSeconds)",
        "secsToMins": "Date.secsToMins($numSeconds)",
        "timestampFromMap": "Date.timestampFromMap($dateMap)",
        "timestampFromString": "Date.timestampFromString($dateString, $baseTimestamp = now)"
    },
    "Db": {
        "delete": "Db.delete($table, $whereSql)",
        "insertRow": "Db.insertRow($table, $rowMap)",
        "runQuery": "Db.runQuery($sql)",
        "selectRow": "Db.selectRow($sql)",
        "selectRows": "Db.selectRows($sql)",
        "update": "Db.update($table, $colMap, $whereSql)",
        "use": "Db.use($databaseId)"
    },
    "Email": {
        "getLastLogs": "Email.getLastLogs()",
        "send": "Email.send($message)"
    },
    "File": {
        "appPath": "File.appPath($relativePath = '')",
        "copy": "File.copy($fromPath, $toPath)",
        "copyDir": "File.copyDir($fromPath, $toPath)",
        "delete": "File.delete($filePath)",
        "deleteDir": "File.deleteDir($dirPath)",
        "exists": "File.exists($path)",
        "extensionToMimeType": "File.extensionToMimeType($fileExtension)",
        "getCreateTime": "File.getCreateTime($path)",
        "getMimeType": "File.getMimeType($path)",
        "getModifyTime": "File.getModifyTime($path)",
        "getParts": "File.getParts($path)",
        "getPerms": "File.getPerms($path)",
        "getSize": "File.getSize($path)",
        "isDir": "File.isDir($path)",
        "isFile": "File.isFile($path)",
        "joinPath": "File.joinPath($part1, $part2, ...)",
        "log": "File.log($stringOrData, $logFileName = 'app.log')",
        "loopDir": "File.loopDir($dirPath, $callbackFunction, $deep = false)",
        "makeDir": "File.makeDir($dirPath, $permissions = '775')",
        "mimeTypeToExtension": "File.mimeTypeToExtension($mimeType)",
        "move": "File.move($fromPath, $toPath)",
        "publicPath": "File.publicPath($relativePath = '')",
        "read": "File.read($filePath, $combineLines = false)",
        "readDir": "File.readDir($dirPath, $filter = 'none')",
        "readLines": "File.readLines($filePath, $lineFunction)",
        "touch": "File.touch($path, $createTime = now, $accessTime = now)",
        "write": "File.write($filePath, $dataListOrString, $mode = 'replace')",
        "xDangerNoSandbox": "File.xDangerNoSandbox()"
    },
    "Form": {
        "allTags": "$form.allTags()",
        "bareTag": "$form.tag($fieldName, $htmlAttributes = {})",
        "closeTag": "$form.closeTag()",
        "create": "Form.create($formId, $formFields)",
        "csrfTag": "Form.csrfTag()",
        "getConfig": "$form.getConfig()",
        "getFormId": "$form.getFormId()",
        "getJs": "$form.getJs()",
        "getSubmittedFormId": "Form.getSubmittedFormId()",
        "openTag": "$form.openTag($htmlAttributes = {})",
        "process": "$form.process($processFunction)",
        "render": "$form.render($submitButtonLabel, $htmlAttributes = {})",
        "setHelpStrings": "Form.setHelpStrings($stringMap)",
        "setValues": "$form.setValues()",
        "submitTag": "$form.submitTag($submitLabel, $htmlAttributes = {})",
        "tag": "$form.tag($fieldName, $htmlAttributes = {})"
    },
    "Input": {
        "get": "Input.get($fieldName, $ruleset)",
        "getAll": "$data.getAll($fieldsRulesMap)",
        "getNames": "$data.getNames()",
        "getQuery": "Input.getQuery()",
        "getRoute": "Input.getRoute($paramName)",
        "getUploadError": "Input.getUploadError()",
        "getUploadedFile": "Input.getUploadedFile($fieldName, $uploadDir, $allowedExtensions, $maxFileSizeKb = 0)",
        "getUploadedImage": "Input.getUploadedImage($fieldName, $uploadDir, $sizeX=500, $sizeY=500, $keepAspectRatio=false)",
        "has": "Input.has($fieldName)",
        "validateValue": "Input.validateValue($value, $rule)",
        "xDangerGetAll": "Input.xDangerGetAll()",
        "xDangerRemote": "Input.xDangerRemote()"
    },
    "Jcon": {
        "fileExists": "Jcon.fileExists($filePath)",
        "parse": "Jcon.parse($text)",
        "parseFile": "Jcon.parseFile($filePath)"
    },
    "Json": {
        "decode": "Json.decode($jsonString)",
        "encode": "Json.encode($data)",
        "format": "Json.format($mapOrJson, $strict = false)"
    },
    "List": {
        "all": "all($callbackFunction)",
        "any": "any($callbackFunction)",
        "contains": "contains($item)",
        "containsAll": "contains($otherList)",
        "copy": "copy($useReferences = false)",
        "countBy": "countBy($callbackFunction)",
        "default": "default($value)",
        "filter": "filter($callbackFunction)",
        "first": "first($numItems = 1)",
        "flat": "flat($depth = 1)",
        "getColumn": "getColumn($columnKey, $indexKey = '')",
        "groupBy": "groupBy($callbackFunction)",
        "indexBy": "indexBy($callbackFunction)",
        "indexOf": "indexOf($value)",
        "insert": "insert($item, $index)",
        "insertAll": "insertAll($list, $index)",
        "isEmpty": "isEmpty()",
        "join": "join($delimiter = '')",
        "last": "last($numItems = 1)",
        "lastIndex": "lastIndex()",
        "lastIndexOf": "lastIndexOf($value)",
        "length": "length()",
        "map": "map($callbackFunction)",
        "max": "max()",
        "min": "min()",
        "pop": "pop()",
        "product": "product()",
        "push": "push($item)",
        "pushAll": "pushAll($anotherList)",
        "random": "random($numItems = 1)",
        "reduce": "reduce($callbackFunction, $initial = '')",
        "remove": "remove($index, $numItems = 1)",
        "repeat": "repeat($element, $numElements, $startIndex = 0)",
        "reverse": "reverse()",
        "shuffle": "shuffle()",
        "slice": "slice($index, $numItems = -1)",
        "sort": "sort($functionOrMap = false)",
        "sortByColumn": "sortByColumn($columnKey, $descendingOrder = false)",
        "sum": "sum()",
        "swap": "swap($index1, $index2)",
        "toMap": "toMap($keys)",
        "toSet": "toSet()",
        "unique": "unique()"
    },
    "Litemark": {
        "parse": "Litemark.parse($text, $paramMap = {})",
        "parseFile": "Litemark.parse($filePath, $flagMap = {})"
    },
    "Map": {
        "clear": "clear()",
        "copy": "copy($useReferences = false)",
        "default": "default($value)",
        "hasKey": "hasKey($key)",
        "hasValue": "hasValue($value)",
        "isEmpty": "isEmpty()",
        "keys": "keys()",
        "length": "length()",
        "merge": "merge($otherMap, $softMerge=false, $deepMerge=false)",
        "remove": "remove($key)",
        "reverse": "reverse()",
        "slice": "slice($listOfKeys)",
        "values": "values()"
    },
    "Math": {
        "abs": "Math.abs($n)",
        "acos": "Math.acos($n)",
        "asin": "Math.asin($n)",
        "atan": "Math.atan($n)",
        "atan2": "Math.atan2($x, $y)",
        "ceil": "Math.ceil($n)",
        "clamp": "Math.clamp($n, $min, $max)",
        "convertBase": "Math.convertBase($n, $fromBase, $toBase)",
        "cos": "Math.cos($n)",
        "degToRad": "Math.degToRad($n)",
        "exp": "Math.exp($n)",
        "floor": "Math.floor($n)",
        "log": "Math.log($n, $base = E)",
        "max": "Math.max($n1, $n2)",
        "min": "Math.min($n1, $n2, ...)",
        "pi": "Math.pi()",
        "pow": "Math.pow($base, $exp)",
        "radToDeg": "Math.radToDeg($n)",
        "random": "Math.random($min, $max)",
        "range": "Math.range($start, $end, $step = 1)",
        "round": "Math.round($n, $precision = 0)",
        "roundStep": "Math.roundStep($n, $interval)",
        "sign": "Math.sign($n)",
        "sin": "Math.sin($n)",
        "sqrt": "Math.sqrt($n)",
        "tan": "Math.tan($n)",
        "whoa": "Math.whoa($n)"
    },
    "Meta": {
        "callFunction": "Meta.callFunction($functionName, $arguments = [])",
        "functionExists": "Meta.functionExists($functionName)",
        "getArgs": "Meta.getArgs()",
        "getThtVersion": "Meta.getThtVersion($numeric = false)",
        "newObject": "Meta.newObject()",
        "noTemplateMode": "Meta.noTemplateMode()"
    },
    "Net": {
        "httpGet": "Net.httpGet($url, $headers={})",
        "httpPost": "Net.httpPost($url, $postData, $headers={})",
        "httpRequest": "Net.httpRequest($method, $url, $data='', $headers={})",
        "urlStatus": "Net.urlStatus($url)"
    },
    "Number": {
        "format": "format($numDecimals = 0, $thousandsSep = ',', $decPoint = '.')",
        "humanizeCount": "humanizeCount()",
        "isFloat": "isFloat()",
        "isInt": "isInt()",
        "toBoolean": "toBoolean()",
        "toFloat": "toFloat()",
        "toInt": "toInt()",
        "toString": "toString()"
    },
    "Object": {
        "equals": "equals($otherObject)",
        "toString": "toString()",
        "type": "type()",
        "zCallMethod": "zCallMethod($methodName, $argList)",
        "zClassName": "zClassName()",
        "zClone": "zClone()",
        "zGetField": "zGetField($fieldName)",
        "zGetFields": "zGetFields()",
        "zGetMethods": "zGetMethods()",
        "zHasField": "zHasField($fieldName)",
        "zHasMethod": "zHasMethod($methodName)",
        "zHashCode": "zHashCode()",
        "zSetField": "zSetField($fieldName, $value)",
        "zSetFields": "zSetFields($fieldMap)"
    },
    "ObjectHooks": {
        "onCallMissingMethod": "onCallMissingMethod($method, $arguments = [])",
        "onClone": "onClone()",
        "onCreate": "onCreate()",
        "onDestroy": "onDestroy()",
        "onEquals": "onEquals($otherObject)",
        "onGetMissingField": "onGetMissingField(fieldName)",
        "onHashCode": "onHashCode()",
        "onSetMissingField": "onSetMissingField($fieldName)",
        "onToString": "onToString()"
    },
    "Output": {
        "redirect": "Output.redirect($url, $statusCode = 303)",
        "runRoute": "Web.runRoute($url)",
        "sendCss": "Output.sendCss($cssOrList, $expirationSecs=<365 days>)",
        "sendError": "Output.sendError($errorCode, $title = '')",
        "sendHtml": "Output.sendHtml($htmlOrList)",
        "sendJs": "Output.sendJs($jsOrList, $expirationSecs=<365 days>)",
        "sendJson": "Output.sendJson($map, $expirationSecs=0)",
        "sendPage": "Output.sendPage($pageMap)",
        "sendText": "Output.sendText($bodyString, $expirationSecs=0)",
        "setCacheHeader": "Output.setCacheHeader($expirationSecs)",
        "setHeader": "Output.setHeader($name, $value, $multiple = false)",
        "setResponseCode": "Output.setResponseCode($code)",
        "xDangerSend": "Output.xDangerSend($string)"
    },
    "Password": {
        "check": "check($correctPasswordHash)",
        "hash": "hash()",
        "matchPattern": "matchPattern($regex)",
        "xDangerPlainText": "xDangerPlainText()"
    },
    "Perf": {
        "start": "Perf.start($taskId, $detail = '')",
        "stop": "Perf.stop()"
    },
    "Php": {
        "call": "Php.call($functionName, $arg1, $arg2, ...)",
        "classExists": "Php.classExists($phpClassName)",
        "functionExists": "Php.functionExists($phpFunctionName)",
        "getConstant": "Php.getConstant($constantName)",
        "getVersion": "Php.getVersion($numeric = false)",
        "new": "Php.new($phpClassName, $arg1, $arg2, ...)",
        "options": "Php.options($string)",
        "require": "Php.require($phpFile)"
    },
    "Request": {
        "getHeaders": "Request.getHeaders()",
        "getIp": "Request.getIp($allIps = false)",
        "getLanguages": "Request.getLanguages()",
        "getMethod": "Request.getMethod()",
        "getReferrer": "Request.getReferrer()",
        "getUrl": "Request.getUrl()",
        "getUserAgent": "Request.getUserAgent()",
        "isAjax": "Request.isAjax()",
        "isHttps": "Request.isHttps()",
        "printInfo": "Request.printInfo()"
    },
    "Result": {
        "fail": "Result.fail($failCode = 'general')",
        "get": "$r.get() or $r.get($defaultValue)",
        "getFailCode": "$r.getFailCode()",
        "ok": "Result.ok($value)"
    },
    "Session": {
        "addCounter": "Session.addCounter($key)",
        "addToList": "Session.addToList($key, $value)",
        "delete": "Session.delete($key)",
        "deleteAll": "Session.deleteAll()",
        "get": "Session.get($key, $default = '')",
        "getAll": "Session.getAll()",
        "getFlash": "Session.getFlash($key, $default = '')",
        "hasFlash": "Session.hasFlash($key)",
        "repeatFlash": "Session.repeatFlash()",
        "set": "Session.set($key, $value)",
        "setFlash": "Session.set($key, $value)"
    },
    "String": {
        "camelCase": "camelCase($upperCaseFirst = false)",
        "charAt": "charAt($index)",
        "charCodeAt": "charCodeAt($index)",
        "charFromCode": "String.charFromCode($code)",
        "charList": "String.charList($listId)",
        "civilize": "civilize()",
        "contains": "contains($matchString, $ignoreCase = false)",
        "count": "count($match, $ignoreCase = false)",
        "dashCase": "dashCase()",
        "decodeHtml": "decodeHtml()",
        "decodeUrl": "decodeUrl()",
        "encodeHtml": "encodeHtml($encodeAll = false)",
        "encodeUrl": "encodeUrl()",
        "endsWith": "endsWith($substring, $ignoreCase = false)",
        "fill": "fill($value0, $value1, ...)",
        "hasLowerCase": "hasLowerCase()",
        "hasSpace": "hasSpace()",
        "hasUpperCase": "hasUpperCase()",
        "hash": "hash()",
        "humanize": "humanize()",
        "indexOf": "indexOf($substring, $offset = 0)",
        "isAlpha": "isAlpha()",
        "isAlphaNumeric": "isAlphaNumeric()",
        "isAscii": "isAscii()",
        "isLowerCase": "isLowerCase()",
        "isNumber": "isNumber()",
        "isSpace": "isSpace()",
        "isUpperCase": "isUpperCase()",
        "lastIndexOf": "lastIndexOf($substring, $offset = 0)",
        "left": "left($length)",
        "limit": "limit($numCharacters, $ending = '...')",
        "lowerCase": "lowerCase()",
        "lowerCaseFirst": "lowerCaseFirst()",
        "match": "match($regexPattern)",
        "matchAll": "matchAll($regexPattern)",
        "padBoth": "padBoth($length, $padString = ' ')",
        "padLeft": "padLeft($length, $padString = ' ')",
        "padRight": "padRight($length, $padString = ' ')",
        "plural": "plural($quantity, $pluralWord = '')",
        "random": "String.random($length)",
        "removeAccents": "removeAccents()",
        "replace": "replace($find, $replace, $limit = -1)",
        "replaceChars": "replaceChars($fromChars, $toChars)",
        "reverse": "reverse()",
        "right": "right($length)",
        "slug": "slug($delimiter = '-')",
        "snakeCase": "snakeCase()",
        "split": "split($stringOrRegex, $limit = 0)",
        "splitChars": "splitChars()",
        "splitLines": "splitLines($keepWhitespace = false)",
        "splitWords": "splitWords($keepPunctuation = false)",
        "startsWith": "startsWith($substring, $ignoreCase = false)",
        "substring": "substring($start, $length = -1)",
        "titleCase": "titleCase($wordsToSkip = default)",
        "toBoolean": "toBoolean()",
        "toNumber": "toNumber($thousandSeparator = ',', $decimalMark = '.')",
        "toPassword": "toPassword()",
        "trim": "trim($trimChars = '')",
        "trimIndent": "trimIndent($keepRelativeIndent = false)",
        "trimLeft": "trimLeft($trimChars = '')",
        "trimLines": "trimLines()",
        "trimRight": "trimRight($trimChars = '')",
        "upperCase": "upperCase()",
        "upperCaseFirst": "upperCaseFirst()",
        "xDangerToType": "xDangerToType($stringType)"
    },
    "System": {
        "exit": "System.exit($returnCode = 0)",
        "getEnvVar": "System.getEnvVar($variableName, $default = '')",
        "getOs": "System.getOs()",
        "sleep": "System.sleep($timeMilliseconds)"
    },
    "Test": {
        "dies": "$t.dies($anonFunction, $description)",
        "ok": "$t.ok($assertion, $description)",
        "resultsHtml": "$t.resultsHtml()",
        "section": "$t.section($title)",
        "shake": "$t.shake()",
        "stats": "$t.stats()"
    },
    "TypeString": {
        "fill": "fill($value0, $value1, ...)",
        "renderString": "renderString()",
        "stringType": "stringType()"
    },
    "Url": {
        "clearQuery": "clearQuery()",
        "getHash": "getHash()",
        "getHost": "getHost()",
        "getOrigin": "getOrigin()",
        "getPath": "getPath()",
        "getPathParts": "getPathParts()",
        "getPort": "getPort()",
        "getQuery": "getQuery()",
        "isAbsolute": "isAbsolute()",
        "isRelative": "isRelative()",
        "link": "link($label, $params = {})",
        "renderString": "renderString()",
        "setHash": "setHash($newHash)",
        "setHost": "setHost($newHost)",
        "setPath": "setPath($newPath)",
        "setPort": "setPort($newPort)",
        "setQuery": "setQuery($paramsMap)",
        "toAbsolute": "toAbsolute($newOrigin='')",
        "toRelative": "toRelative()"
    },
    "UrlQuery": {
        "delete": "delete($fieldName)",
        "get": "get($paramName, $rule = 'id')",
        "getAll": "getAll($mapOfParams)",
        "getNames": "getNames()",
        "has": "has($fieldName)",
        "keep": "keep($listOfParams)",
        "set": "set($mapOfParams, $isDefaultSet = false)",
        "xDangerGetAll": "xDangerGetAll()"
    },
    "Web": {
        "anchorLink": "Web.anchorLink($label)",
        "csrfToken": "Web.csrfToken()",
        "cssLink": "Web.cssLink($cssUrl)",
        "formLink": "Web.formLink($label, $actionUrl, $dataMap, $class = '')",
        "icon": "Web.icon($iconName)",
        "jsLink": "Web.jsLink($jsUrl)",
        "nonce": "Web.nonce()"
    }
}


