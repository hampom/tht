{"Boolean":{"toNumber":"toNumber()","toString":"toString()"},"Cache":{"delete":"Cache.delete($key) -> false","get":"Cache.get($key, $default = '', $duration = '1 hour') -> any","getDriver":"Cache.getDriver() -> string","has":"Cache.has($key) -> boolean","set":"Cache.set($key, $value, $duration) -> false"},"Config":{"get":"Config.get($key, $default = '') -> any","getBoolean":"Config.getBoolean($key, $default = false) -> boolean","getNumber":"Config.getNumber($key, $default = 0) -> number"},"Cookie":{"delete":"Cookie.delete($key) -> false","get":"Cookie.get($key) -> any","set":"Cookie.set($key, $value) -> false"},"Date":{"add":"$date.add($durationString) -> Date","create":"Date.create($string|$map|$unixTime) -> Date","dateOnly":"$date.dateOnly() -> Date","diff":"$date.diff($referenceDate = 'now', $unit = 'secs') -> number","diffHuman":"$date.diffHuman($referenceDate = 'now') -> string","durationToSecs":"Date.durationToSecs($duration) -> number","equals":"$date.equals($otherDate) -> boolean","format":"Date.format($format = 'iso8601') -> string","fromMap":"Date.fromMap($dateMap) -> Date","getTimezone":"$date.getTimezone() -> string","isAfter":"$date.isAfter($otherDate) -> boolean","isAfterOrEqual":"$date.isAfterOrEqual($otherDate) -> boolean","isBefore":"$date.isBefore($otherDate) -> boolean","isBeforeOrEqual":"$date.isBeforeOrEqual($otherDate) -> boolean","isDst":"$date.isDst() -> boolean","isFuture":"$date.isFuture() -> boolean","isPast":"$date.isPast() -> boolean","now":"Date.now() -> Date","sandwich":"Date.sandwich() -> Date","setDate":"$date.setDate($year, $month, $day) -> Date","setLocale":"Date.setLocale($localeName) -> false","setTime":"$date.setTime($hour, $min, $sec = 0) -> Date","setTimezone":"$date.setTimezone($timezoneName) -> false","toMap":"$date.toMap() -> map","today":"Date.today() -> Date","unixTime":"$date.unixTime() -> number"},"Db":{"countRows":"Db.countRows($table, $whereMapOrSql) -> number","createIndex":"Db.createIndex($tableName, $colName) -> boolean","createTable":"Db.createTable($tableName, $colMap) -> boolean","deleteRow":"Db.deleteRow($table, $whereMapOrSql) -> false","deleteRows":"Db.deleteRows($table, $whereMapOrSql) -> false","getColumns":"Db.getColumns($tableName) -> list","getDatabases":"Db.getDatabases() -> list","getTables":"Db.getTables() -> list","insertRow":"Db.insertRow($table, $rowMap) -> false","lastInsertId":"Db.lastInsertId($sequenceName = '') -> number","runQuery":"Db.runQuery($sql) -> object","selectRow":"Db.selectRow($sql, $whereMap = {}) -> map","selectRows":"Db.selectRows($sql, $whereMap = {}) -> list","tableExists":"Db.tableExists($tableName) -> boolean","updateRow":"Db.updateRow($table, $colMap, $whereMapOrSql) -> false","updateRows":"Db.updateRows($table, $colMap, $where) -> false","useDatabase":"Db.useDatabase($databaseId) -> object"},"Email":{"getLastLogs":"Email.getLastLogs() -> map","send":"Email.send($message) -> boolean"},"File":{"appPath":"File.appPath($relativePath = '') -> string","append":"File.append($filePath, $dataListOrString) -> false","copy":"File.copy($fromPath, $toPath) -> false","copyDir":"File.copyDir($fromPath, $toPath) -> false","delete":"File.delete($filePath) -> false","deleteDir":"File.deleteDir($dirPath) -> false","exists":"File.exists($path) -> boolean","extensionToMimeType":"File.extensionToMimeType($fileExtension) -> string","getCreateTime":"File.getCreateTime($path) -> Date","getMimeType":"File.getMimeType($path) -> string","getModifyTime":"File.getModifyTime($path) -> Date","getPerms":"File.getPerms($path) -> map","getSize":"File.getSize($path) -> number","hasEndPath":"File.hasEndPath($fullPath, $endPath) -> boolean","hasRootPath":"File.hasRootPath($fullPath, $rootPath) -> boolean","isAbsolute":"File.isAbsolute($path) -> boolean","isDir":"File.isDir($path) -> boolean","isFile":"File.isFile($path) -> boolean","isRelative":"File.isRelative($path) -> boolean","joinPath":"File.joinPath($part1, $part2, ...) -> string","log":"File.log($stringOrData, $logFileName = 'app.log') -> false","loopDir":"File.loopDir($dirPath, $callbackFunction, $options = {}) -> false","makeDir":"File.makeDir($dirPath, $permissions = '775') -> false","mimeTypeToExtension":"File.mimeTypeToExtension($mimeType) -> string","move":"File.move($fromPath, $toPath) -> false","pathParts":"File.pathParts($path) -> map","publicPath":"File.publicPath($relativePath = '') -> string","publicUrl":"File.publicUrl($fullPath) -> Url","read":"File.read($filePath, $options = {}) -> list|string","readDir":"File.readDir($dirPath, $options = {}) -> list","readLines":"File.readLines($filePath, $lineFunction) -> any","stripEndPath":"File.stripEndPath($fullPath, $endPath) -> string","stripRootPath":"File.stripRootPath($fullPath, $rootPath) -> string","touch":"File.touch($path, $date = now, $flags = {}) -> false","write":"File.write($filePath, $dataListOrString) -> false","xDangerNoSandbox":"File.xDangerNoSandbox() -> object"},"Form":{"allTags":"$form.allTags() -> HtmlString","bareTag":"$form.tag($fieldName, $htmlAttributes = {}) -> HtmlString","close":"$form.close() -> HtmlString","create":"Form.create($formId, $formFields) -> object","csrfTag":"Form.csrfTag() -> HtmlString","getConfig":"$form.getConfig() -> map","getFormId":"$form.getFormId() -> string","getSubmittedFormId":"Form.getSubmittedFormId() -> string","open":"$form.open($htmlAttributes = {}) -> HtmlString","process":"$form.process($processFunction) -> false","render":"$form.render($submitButtonLabel, $htmlAttributes = {}) -> HtmlString","setHelpStrings":"Form.setHelpStrings($stringMap) -> false","setValues":"$form.setValues($mapOfValues) -> false","submitTag":"$form.submitTag($submitLabel, $htmlAttributes = {}) -> HtmlString","tag":"$form.tag($fieldName, $htmlAttributes = {}) -> HtmlString"},"Input":{"fieldNames":"Input.fieldNames($method) -> list","get":"Input.get($fieldName, $ruleset = 'id') -> any","getAll":"$data.getAll($fieldsRulesMap) -> map","getUploadError":"Input.getUploadError() -> string","getUploadedFile":"Input.getUploadedFile($fieldName, $uploadDir, $allowedExtensions, $maxFileSizeKb = 0) -> string","getUploadedImage":"Input.getUploadedImage($fieldName, $uploadDir, $size='500x500', $options={}) -> string","hasField":"Input.hasField($method, $fieldName) -> boolean","post":"Input.post($fieldName, $ruleset = 'id') -> any","postAll":"$data.postAll($fieldsRulesMap) -> map","printAll":"Input.printAll() -> false","route":"Input.route($paramName, $ruleset = 'id') -> any","validateValue":"Input.validateValue($value, $rule) -> map","xDangerRawData":"Input.xDangerRawData($method) -> map"},"Jcon":{"fileExists":"Jcon.fileExists($filePath) -> boolean","parse":"Jcon.parse($text) -> map|list","parseFile":"Jcon.parseFile($filePath) -> map|list"},"Json":{"decode":"Json.decode($jsonString) -> map|list","encode":"Json.encode($data) -> string","format":"Json.format($mapOrJson, $options = {}) -> string"},"List":{"all":"all($callbackFunction) -> boolean","any":"any($callbackFunction) -> boolean","contains":"contains($item) -> boolean","containsAll":"containsAll($otherList) -> boolean","copy":"copy($options = {}) -> list","countBy":"countBy($callbackFunction) -> map","default":"default($value) -> self","filter":"filter($callbackFunction) -> list","first":"first($numItems = 1) -> any","flat":"flat($depth = 1) -> list","getColumn":"getColumn($columnKey, $indexKey = '') -> list|map","groupBy":"groupBy($callbackFunction) -> map","hasIndex":"hasIndex($index) -> boolean","indexBy":"indexBy($callbackFunction) -> map","indexOf":"indexOf($value) -> number","insert":"insert($index, $item) -> self","insertAll":"insertAll($index, $otherList) -> self","join":"join($delimiter = '') -> string","last":"last($numItems = 1) -> any","lastIndexOf":"lastIndexOf($value) -> number","length":"length() -> number","map":"map($callbackFunction) -> list","max":"max() -> number","min":"min() -> number","pop":"pop() -> any","popFirst":"popFirst() -> any","product":"product() -> number","push":"push($item) -> self","pushAll":"pushAll($anotherList) -> self","pushFirst":"pushFirst($item) -> self","random":"random($numItems = 1) -> any|list","reduce":"reduce($callbackFunction, $initial = '') -> any","remove":"remove($index, $numItems = 1) -> any","repeat":"repeat($itemValue, $numItems) -> self","reverse":"reverse() -> self","shuffle":"shuffle() -> list","slice":"slice($index, $numItems = 0) -> list","sort":"sort($functionOrOptions = {}) -> self","sortByColumn":"sortByColumn($columnKey, $options = {}) -> self","sum":"sum() -> number","swap":"swap($index1, $index2) -> self","toMap":"toMap($keys = auto) -> map","toSet":"toSet() -> map","unique":"unique() -> list"},"Litemark":{"parse":"Litemark.parse($text, $options = {}) -> HtmlString","parseFile":"Litemark.parse($filePath, $options = {}) -> HtmlString"},"Map":{"clear":"clear() -> self","copy":"copy($options = {}) -> map","default":"default($value) -> self","hasKey":"hasKey($key) -> boolean","hasValue":"hasValue($value) -> boolean","keyOf":"keyOf($value) -> string","keys":"keys() -> list","length":"length() -> number","merge":"merge($otherMap, $options = {}) -> map","remove":"remove($key) -> any","renameKey":"renameKey($oldKey, $newKey) -> self","reverse":"reverse() -> map","slice":"slice($listOfKeys) -> map","values":"values() -> list"},"Math":{"acos":"Math.acos($n) -> number","asin":"Math.asin($n) -> number","atan":"Math.atan($n) -> number","atan2":"Math.atan2($x, $y) -> number","convertBase":"Math.convertBase($n, $fromBase, $toBase) -> number|string","cos":"Math.cos($n) -> number","degToRad":"Math.degToRad($n) -> number","exp":"Math.exp($n) -> number","log":"Math.log($n, $base = E) -> number","pi":"Math.pi() -> number","pow":"Math.pow($base, $exp) -> number","radToDeg":"Math.radToDeg($n) -> number","random":"Math.random($min, $max) -> number","range":"Math.range($start, $end, $step = 1) -> list","sin":"Math.sin($n) -> number","sqrt":"Math.sqrt($n) -> number","tan":"Math.tan($n) -> number","whoa":"Math.whoa($n) -> number"},"Meta":{"callFunction":"Meta.callFunction($functionName, $arguments = []) -> any","functionExists":"Meta.functionExists($functionName) -> boolean","getArgs":"Meta.getArgs() -> list","getThtVersion":"Meta.getThtVersion($options = {}) -> string|number","newObject":"Meta.newObject($className) -> object","noTemplateMode":"Meta.noTemplateMode() -> false"},"Net":{"httpGet":"Net.httpGet($url, $headers={}) -> string|map","httpHead":"Net.httpHead($url, $requestHeaders={}) -> list","httpPost":"Net.httpPost($url, $postData, $headers={}) -> string|map","httpRequest":"Net.httpRequest($method, $url, $data='', $headers={}) -> string|map","httpStatus":"Net.httpStatus($url, $headers={}) -> number"},"Number":{"abs":"abs() -> number","ceil":"ceil() -> number","clamp":"clamp($min, $max) -> number","floor":"floor() -> number","format":"format($numDecimals = 0, $thousandsSep = ',', $decPoint = '.') -> string","humanizeCount":"humanizeCount() -> string","inRange":"inRange($min, $max) -> boolean","isEven":"isEven() -> boolean","isFloat":"isFloat() -> boolean","isInt":"isInt() -> boolean","isMultipleOf":"isMultipleOf($otherNum) -> boolean","isOdd":"isOdd() -> boolean","max":"max($otherNumber) -> number","min":"min($otherNumber) -> number","round":"round($numDecimalDigits = 0) -> number","roundToStep":"roundToStep($stepInterval) -> number","sign":"sign() -> number","toBoolean":"toBoolean() -> boolean","toFloat":"toFloat() -> number","toInt":"toInt() -> number","toString":"toString() -> string","zeroPad":"zeroPad($numLeftDigits, $numDecimalDigits = 0) -> string"},"Object":{"equals":"equals($otherObject) -> boolean","isFunction":"isFunction() -> boolean","isList":"isList() -> boolean","isMap":"isMap() -> boolean","isNumber":"isNumber() -> boolean","isRegex":"isRegex() -> boolean","isString":"isString() -> boolean","isTypeString":"isTypeString() -> boolean","type":"type() -> string","zCallMethod":"zCallMethod($methodName, $argList) -> any","zClassName":"zClassName() -> string","zClone":"zClone() -> object","zGetField":"zGetField($fieldName) -> any","zGetFields":"zGetFields() -> map","zGetMethods":"zGetMethods() -> list","zHasField":"zHasField($fieldName) -> boolean","zHasMethod":"zHasMethod($methodName) -> boolean","zHashCode":"zHashCode() -> string","zSetField":"zSetField($fieldName, $value) -> self","zSetFields":"zSetFields($fieldMap) -> self","zStringToken":"zStringToken() -> string"},"ObjectHooks":{"onCallMissingMethod":"onCallMissingMethod($method, $arguments = []) -> any","onClone":"onClone() -> none","onCreate":"onCreate() -> none","onDestroy":"onDestroy() -> none","onEquals":"onEquals($otherObject) -> boolean","onGetMissingField":"onGetMissingField(fieldName) -> any","onHashCode":"onHashCode() -> string","onSetMissingField":"onSetMissingField($fieldName) -> none","onToSqlString":"onToSqlString() -> string","onToString":"onToString() -> string"},"Output":{"redirect":"Output.redirect($url, $statusCode = 303) -> false","runRoute":"Web.runRoute($url) -> false","sendError":"Output.sendError($errorCode, $title='', $descriptionHtml='') -> false","sendHtml":"Output.sendHtml($htmlOrList) -> false","sendJson":"Output.sendJson($map, $expirationSecs=0) -> false","sendText":"Output.sendText($bodyString, $expirationSecs=0) -> false","setCacheHeader":"Output.setCacheHeader($expirationSecs) -> false","setHeader":"Output.setHeader($name, $value, $options = {}) -> false","setResponseCode":"Output.setResponseCode($code) -> false","xDangerSend":"Output.xDangerSend($string) -> false"},"Page":{"addBodyClass":"$page.addBodyClass($className) -> self","addCss":"$page.addCss($urlOrCss) -> self","addJs":"$page.addJs($urlOrJs) -> self","addToHead":"$page.addToHead($html) -> self","create":"Page.create($fieldMap) -> Page","send":"$page.send() -> false","setBody":"$page.setBody($html) -> self","setDescription":"$page.setDescription($value) -> self","setFooter":"$page.setFooter($html) -> self","setHeader":"$page.setHeader($html) -> self","setIcon":"$page.setIcon($url) -> self","setImage":"$page.setImage($url) -> self","setMain":"$page.setMain($html) -> self","setTitle":"$page.setTitle($value) -> self"},"Password":{"check":"$password.check($correctHash) -> boolean","checkPattern":"$password.checkPattern($regex) -> boolean","length":"$password.length() -> number","xDangerHash":"$password.xDangerHash() -> string","xDangerPlainText":"$password.xDangerPlainText() -> string"},"Perf":{"now":"Perf.now() -> number","start":"Perf.start($taskId, $detail = '') -> false","stop":"Perf.stop() -> number"},"Php":{"call":"Php.call($functionName, $arg1, $arg2, ...) -> any","classExists":"Php.classExists($phpClassName) -> boolean","functionExists":"Php.functionExists($phpFunctionName) -> boolean","getConstant":"Php.getConstant($constantName) -> any","getVersion":"Php.getVersion($options = {}) -> string|number","new":"Php.new($phpClassName, $arg1, $arg2, ...) -> object","options":"Php.options($string) -> number","require":"Php.require($phpFile) -> false"},"Request":{"getHeaders":"Request.getHeaders() -> map","getIp":"Request.getIp($options = {}) -> string|list","getLanguages":"Request.getLanguages() -> list","getMethod":"Request.getMethod() -> string","getReferrer":"Request.getReferrer() -> string","getUrl":"Request.getUrl() -> Url","getUserAgent":"Request.getUserAgent() -> string","isAjax":"Request.isAjax() -> boolean","isHttps":"Request.isHttps() -> boolean","printInfo":"Request.printInfo() -> false"},"Result":{"fail":"Result.fail($failCode = 'general') -> Result","get":"$r.get() or $r.get($defaultValue) -> any","getFailCode":"$r.getFailCode() -> string","ok":"Result.ok($value) -> Result"},"Session":{"addCounter":"Session.addCounter($key) -> number","addToList":"Session.addToList($key, $value) -> list","delete":"Session.delete($key) -> false","deleteAll":"Session.deleteAll() -> false","get":"Session.get($key, $default = '') -> any","getAll":"Session.getAll() -> map","getFlash":"Session.getFlash($key, $default = '') -> any","hasFlash":"Session.hasFlash($key) -> boolean","repeatFlash":"Session.repeatFlash() -> false","set":"Session.set($key, $value) -> false","setFlash":"Session.set($key, $value) -> false"},"String":{"camelCase":"camelCase($options = {}) -> string","charFromCode":"String.charFromCode($code) -> string","charList":"String.charList($listId) -> list","civilize":"civilize() -> string","contains":"contains($matchString, $options = {}) -> boolean","count":"count($matchString, $options = {}) -> number","dashCase":"dashCase() -> string","decodeHtml":"decodeHtml() -> string","decodeUrl":"decodeUrl() -> string","encodeHtml":"encodeHtml($options = {}) -> string","encodeUrl":"encodeUrl() -> string","endsWith":"endsWith($matchString, $options = {}) -> boolean","fill":"fill($value0, $value1, ...) -> string","fingerprint":"fingerprint() -> string","getChar":"getChar($index) -> string","getCharCode":"getCharCode($index = 1) -> string","hasIndex":"hasIndex($index) -> boolean","hasLowerCase":"hasLowerCase() -> boolean","hasSpace":"hasSpace() -> boolean","hasUpperCase":"hasUpperCase() -> boolean","humanize":"humanize() -> string","indexOf":"indexOf($substring, $options = {}) -> number","isAlpha":"isAlpha() -> boolean","isAlphaNumeric":"isAlphaNumeric() -> boolean","isAscii":"isAscii() -> boolean","isLowerCase":"isLowerCase() -> boolean","isNumber":"isNumber() -> boolean","isSpace":"isSpace() -> boolean","isUpperCase":"isUpperCase() -> boolean","lastIndexOf":"lastIndexOf($substring, $options = {}) -> number","lastReplaceCount":"String.lastReplaceCount() -> number","left":"left($length) -> string","length":"length() -> number","limit":"limit($numCharacters, $ending = '\u2026') -> string","lowerCase":"lowerCase() -> string","lowerCaseFirst":"lowerCaseFirst() -> string","match":"match($regexPattern, $groupNames = '') -> string","matchAll":"matchAll($regexPattern, $groupNames = '') -> list","padBoth":"padBoth($length, $padString = ' ') -> string","padLeft":"padLeft($length, $padString = ' ') -> string","padRight":"padRight($length, $padString = ' ') -> string","plural":"plural($quantity, $pluralWord = '') -> string","random":"String.random($numChars) -> string","removeAccents":"removeAccents() -> string","replace":"replace($find, $replace, $flags = {}) -> string","replaceChars":"replaceChars($fromChars, $toChars) -> string","reverse":"reverse() -> string","right":"right($length) -> string","setChar":"setChar($index, $newChar) -> self","slug":"slug($delimiter = '-') -> string","snakeCase":"snakeCase() -> string","split":"split($stringOrRegex, $options = {}) -> list","splitChars":"splitChars() -> list","splitLines":"splitLines($options = {}) -> list","splitWords":"splitWords($options = {}) -> list","startsWith":"startsWith($matchString, $options = {}) -> boolean","substring":"substring($start, $length = 0) -> string","titleCase":"titleCase($listOfSkipWords = default) -> string","toBoolean":"toBoolean() -> boolean","toNumber":"toNumber($thousandSeparator = ',', $decimalMark = '.') -> number","trim":"trim($trimChars = '') -> string","trimIndent":"trimIndent($options = {}) -> string","trimLeft":"trimLeft($trimChars = '') -> string","trimLines":"trimLines() -> string","trimRight":"trimRight($trimChars = '') -> string","upperCase":"upperCase() -> string","upperCaseFirst":"upperCaseFirst() -> string","xDangerToType":"xDangerToType($stringType) -> TypeString"},"System":{"exit":"System.exit($returnCode = 0) -> false","getEnvVar":"System.getEnvVar($variableName, $default = '') -> any","getOs":"System.getOs() -> string","sleep":"System.sleep($timeMilliseconds) -> false"},"Test":{"dies":"$t.dies($anonFunction, $description) -> self","ok":"$t.ok($assertion, $description) -> self","resultsHtml":"$t.resultsHtml() -> HtmlString","section":"$t.section($title) -> self","shake":"$t.shake() -> boolean","stats":"$t.stats() -> map"},"TypeString":{"fill":"fill($value0, $value1, ...) -> self","renderString":"renderString() -> string","stringType":"stringType() -> string"},"Url":{"clearQuery":"clearQuery() -> self","getFilePath":"getFilePath() -> string","getHash":"getHash() -> string","getHost":"getHost() -> string","getOrigin":"getOrigin() -> string","getPath":"getPath() -> string","getPathParts":"getPathParts() -> list","getPort":"getPort() -> number","getQuery":"getQuery() -> UrlQuery","isAbsolute":"isAbsolute() -> boolean","isRelative":"isRelative() -> boolean","link":"link($label, $params = {}) -> HtmlString","renderString":"renderString() -> string","setHash":"setHash($newHash) -> self","setHost":"setHost($newHost) -> self","setPath":"setPath($newPath) -> self","setPort":"setPort($newPort) -> self","setQuery":"setQuery($paramsMap) -> self","toAbsolute":"toAbsolute($newOrigin='') -> Url","toRelative":"toRelative() -> Url"},"UrlQuery":{"delete":"delete($fieldName) -> self","get":"get($paramName, $rule = 'id') -> any","getAll":"getAll($mapOfParams) -> map","getNames":"getNames() -> list","has":"has($fieldName) -> boolean","keep":"keep($listOfParams) -> self","renderString":"renderString() -> string","set":"set($mapOfParams) -> self","setDefault":"setDefault($mapOfParams) -> self","xDangerGetAll":"xDangerGetAll() -> map"},"Web":{"anchorLink":"Web.anchorLink($label) -> HtmlString","assetUrl":"Web.assetUrl($publicUrl) -> Url","csrfToken":"Web.csrfToken() -> string","cssLink":"Web.cssLink($cssUrl) -> HtmlString","htmx":"Web.htmx($mode, $dataMap) -> HtmlString","icon":"Web.icon($iconName) -> HtmlString","jsLink":"Web.jsLink($jsUrl) -> HtmlString","nonce":"Web.nonce() -> string","postLink":"Web.postLink($label, $actionUrl, $dataMap, $class = '') -> HtmlString"}}