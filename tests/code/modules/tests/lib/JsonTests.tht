
public fun run($t) {

    $t.section('Module: Json')

        .ok(Json.decode(json'{"k1":[123,"hello"]}')['k1'][2] == 'hello', 'decode sub-list')
        .ok(Json.decode(json'{"k1":{"k2":"hello"}}')['k1']['k2'] == 'hello', 'decode sub-map')
        .ok(Json.decode(json'[1,2,3]')[2] == 2, 'decode list')
        .ok(Json.decode(json'true') == true, 'decode boolean')
        .ok(Json.decode(json'123.45') == 123.45, 'decode number')

    $st = Json.encode({ a: 'hi', b: [1, 2, 3] })

    $t
        .ok($st.renderString().contains('"hi"'), 'encode string')
        .ok($st.renderString().contains('[1,2,3]'), 'encode list')
        .ok($st.renderString().contains('"b":'), 'encode key')
        .dies(fun { Json.decode(json'{"a":123,/*"b":"comment"*/}') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"test\ud800":123}') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"te\st":123}') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"a":123}=') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"a":NaN}') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"a":Inf}') }, 'unable to decode')
        .dies(fun { Json.decode(json'{"a":1.0e4096}') }, 'invalid large number')

    $obj = Json.decode($st)
    $t.ok($obj.b[2] == 2, 'decode after encode')

    $t.ok(Json.validate(json'{"a":[1,2,3]}'), 'validate - true')
    $t.ok(!Json.validate(json'{"a}'), 'validate - false')

    $jsonFile = file'files:/test.json'
    $jsonFile.delete(-ifExists)
    $writeData = { a: [1, 2, 3] }
    Json.writeFile($jsonFile, $writeData)
    $readData = Json.readFile($jsonFile)
    $t.ok($readData.a.join('|') == '1|2|3', 'Json - readFile & writeFile')

    $t.dies(fun { Json.writeFile($jsonFile, Result.ok(1)) }, 'unable to encode JSON')
    $jsonFile.write('{"a"')
    $t.dies(fun { Json.readFile($jsonFile) }, 'unable to decode JSON')

    // Waiting for PHP security patch
    // $dupe = json'{"a":123,"a":999}'
    // >> $dupe
    // >> Json.decode($dupe)

    return $t
}
