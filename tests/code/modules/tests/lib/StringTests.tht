
public fun run($t) {

    $t.section('Strings')

    $stra = '456789'
    $t.ok($stra.getChar(-1) == '9', 'substring index')
    $t.dies(fun { $a = 'abc'[1] }, 'getChar')
    $t.dies(fun { 'abc'[0] = 123 }, 'setChar')


    $t.section('Multiline Strings')

    $ml = '''
        this is a
        multiline
        string.
    '''
    $t.ok($ml.contains('multiline\nstring'), 'multiline')
    $t.parserError('$ml = ```\n noindent\n```', 'Please indent line')


    $t.section('String Concatenation')

    $t.ok('a' ~ 'b' == 'ab', 'a ~ b')
    $t.ok('a' ~  1  == 'a1', 'a ~ 1')
    $t.ok(1.2  ~ 'b' == '1.2b', '1.2 ~ b')

    $t.dies(x{ 'foo' + 'bar' }, 'accidental +', 'Invalid type')

    $s = 'a'
    $s ~= 'bc'
    $t.ok($s == 'abc', '~=')

    // Would rather these take their serialized value, but the perf hit is too great.
    $t.ok(true ~ '!' == 'true!', 'stringified true')
    $t.ok(false ~ '!' == 'false!', 'stringified false')
    $t.dies(fun { $a = null ~ '!' }, 'object of type: `null`')


    $t.section('String Methods')

    $hi = 'Hello World!'
    $t.ok('abcdef'.reverse() == 'fedcba', 'direct string method')
    $t.ok($hi.length() == 12, 'length()')
    $t.ok($hi.getChar(1) == 'H', 'getChar()')
    $t.ok($hi.getChar(-1) == '!', 'getChar() negative')
    $t.ok($hi.getChar(100) == '', 'getChar() out of bounds')

    $t.ok($hi.contains('Hello'), 'contains()')
    $t.ok(!$hi.contains('missing'), '! contains()')
    $t.ok($hi.split('o').length() == 3, 'split()')
    $t.ok($hi.split('o')[1] == 'Hell', 'split()')
    $t.ok(
        String.unicodeToChar(65) ~ String.unicodeToChar(122) == 'Az'
        'String.unicodeToChar'
    )

    $t.ok('abc'.setChar(2, 'Z') == 'aZc', 'setChar')
    $t.ok('abc'.setChar(-1, 'Z') == 'abZ', 'setChar negative')
    $t.dies(
        x{ 'abc'.setChar(5, 'xx') }, 'setChar - out of bounds'
        'outside of string length'
    )
    $t.dies(
        x{ 'abc'.setChar(1, 'xx') }, 'setChar - 1 character'
        'must be exactly 1 character'
    )

    $t.ok(''.toBoolean() == false, 'toBoolean - empty string')
    $t.ok('0'.toBoolean() == true, 'toBoolean - 0')
    $t.ok('false'.toBoolean() == true, 'toBoolean - false')
    $t.ok('true'.toBoolean() == true, 'toBoolean - true')

   // >> '123.5'.toNumber()

    $t.ok('123'.toNumber() == 123, 'toNumber')
    $t.ok('123.5'.toNumber() == 123.5, 'toNumber')
    $t.ok(''.toNumber() == 0, 'toNumber - empty string')
    $t.ok('abc'.toNumber() == 0, 'toNumber - no numbers')
    $t.ok('99ft'.toNumber() == 0, 'toNumber - trailing letters')

 //   $t.ok('1.300.000,01'.toNumber() == 1300000.01,
//        'toNumber - thousand/decimal')


    $t.section('String Methods - Unicode')

    $uni = 'ⒶⒷⒸ①②③ abc123'
    $t.ok($uni.length() == 13, 'length')

    $t.ok($uni.getChar(3) == 'Ⓒ', 'getChar')
    $t.ok($uni.getChar(-1) == '3', 'getChar negative')

    $t.dies(x{ 'x'[1] }, 'Can`t use `[]` to get a character')
    $t.dies(fun { 'x'[1] = 'Z' }, 'Can`t use `[]` to set a character')
    $t.ok($uni.getChar(1), 'getChar/boolean one')
    $t.ok($uni.getChar(-1), 'getChar/boolean negative')
    $t.ok(!$uni.getChar(100), 'getChar/boolean out of bounds')
    $t.ok(!''.getChar(1), 'getChar/boolean empty')

    $t.ok('a'.charToUnicode() == 97, 'charToUnicode - a')
    $t.ok('Ⓐ'.charToUnicode() == 9398, 'charToUnicode - Ⓐ')
    $t.ok(String.unicodeToChar(9400) == 'Ⓒ', 'charFromUnicode')
    $t.ok(String.unicodeToChar(65) == 'A', 'charFromUnicode, ascii')

    $t.ok($uni.left(3) == 'ⒶⒷⒸ', 'left')
    $t.ok($uni.right(3) == '123', 'right')

    $t.ok($uni.substring(5, { numChars: 5 }) == '②③ ab', 'substring - numChars')
    $t.ok($uni.substring(4) == '①②③ abc123', 'substring - remainder')

    $t.ok($uni.substring(4, { toIndex: 10 }) == '①②③ abc', 'substring - toIndex')
    $t.ok($uni.substring(4, { toIndex: 4 }) == '①', 'substring - toIndex - one char')
    $t.ok(
        $uni.substring(4, { toIndex: -8 }) == '①②③'
        'substring - toIndex - negative index'
    )
    $t.dies(fun { $uni.substring(10, { toIndex: 5 }) }, 'greater than')

    $t.ok($uni.startsWith('ⒶⒷⒸ'), 'startsWith')
    $t.ok('ab ⒶⒷ'.endsWith('ⒶⒷ'), 'endsWith')
    $t.ok(!''.endsWith('ⒶⒷ'), 'endsWith - empty subject')
    $t.ok('ab ⒶⒷ'.endsWith('b ⒶⒷ'), 'endsWith - mixed ascii/mb')
    $t.ok('ⒶⒷ'.endsWith('ⒶⒷ'), 'endsWith - same')
    $t.ok(!'ⒷⒶ'.endsWith('ⒶⒷ'), 'endsWith - same length false')
    $t.ok('abc ⒶⒷ'.startsWith('AbC', -ignoreCase), 'startsWith ignoreCase')
    $t.ok($uni.endsWith('ABc123', -ignoreCase), 'endsWith ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ') == 2, 'indexOf')
    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ', { startIndex: 3 }) == 5, 'indexOf - offset')
    $t.ok('abc'.indexOf('BC', { ignoreCase }) == 2, 'indexOf - ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷ'.lastIndexOf('ⒶⒷ') == 5, 'lastIndexOf')
    $t.ok(''.lastIndexOf('ⒶⒷ') == 0, 'lastIndexOf - empty subject')
    $t.ok(' ⒶⒷ xy'.lastIndexOf('ⒶⒷ', { startIndex: 3 }) == 0, 'lastIndexOf - offset')
    $t.ok('abab'.lastIndexOf('AB', { ignoreCase }) == 3, 'lastIndexOf - ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷⒶ'.count('Ⓐ') == 3, 'count char')
    $t.ok(' ⒶⒷC D ⒶⒷC'.count('ⒶⒷC') == 2, 'count word')
  //  $t.ok('123 abc 789'.count(rx'\d+') == 2, 'count regex')
    $t.ok('ABC abc'.count('ab', -ignoreCase) == 2, 'count case-insensitive')
  //  $t.ok('ABC abc'.count(rx'[a-b]+', true) == 2, 'count case-insensitive regex')

    $t.ok('ⒶⒸ'.insert('Ⓑ', 2) == 'ⒶⒷⒸ', 'insert')
    $t.ok('ⒶⒷⒸ'.insert('①', -2) == 'Ⓐ①ⒷⒸ', 'insert negative index')

    $t.ok($uni.contains('③ a'), 'contains')
    $t.ok($uni.contains('③ ABc', -ignoreCase), 'contains ignoreCase')

    $t.ok('aⒷⒸ'.padLeft(5, ' ') == '  aⒷⒸ', 'pad left')
    $t.ok('aⒷⒸ'.padLeft(5) == '  aⒷⒸ', 'pad left - no char')
    $t.ok('aⒷⒸ'.padRight(5, '①') == 'aⒷⒸ①①', 'pad right char')
    $t.ok('aⒷⒸ'.padBoth(5, ' ') == ' aⒷⒸ ', 'pad both')
    $t.ok('aⒷⒸ'.padBoth(6, ' ') == ' aⒷⒸ  ', 'pad both uneven')

    $t.ok('  ⒶⒷ ①②  '.trim() == 'ⒶⒷ ①②', 'trim')
    $t.ok('③③  ⒶⒷ ①②  ③'.trim('③') == 'ⒶⒷ ①②', 'trim mask')
    $t.ok('  ⒶⒷ ①②'.trimLeft() == 'ⒶⒷ ①②', 'leftTrim')
    $t.ok('ⒶⒷ ①②  '.trimRight() == 'ⒶⒷ ①②', 'rightTrim')
    $t.ok('ⒶⒷ ①②  ③'.trimRight('③') == 'ⒶⒷ ①②', 'rightTrim mask')
    $t.ok('③ ⒶⒷ ①②'.trimLeft('③') == 'ⒶⒷ ①②', 'leftTrim mask')

    $t.ok('Abc DEF ⒶⒷⒸ'.toUpperCase() == 'ABC DEF ⒶⒷⒸ', 'upperCase')


        $t.ok('a b c'.toTokenCase('-') == 'a-b-c', 'toToken - dash')
    $t.ok('aaBbCc'.toTokenCase('-') == 'aa-bb-cc', 'toToken - dash - from camel')
    $t.ok('AaBbCc'.toTokenCase('-') == 'aa-bb-cc', 'toToken - dash - from uppercamel')
    $t.ok('AA BB CC'.toTokenCase('-') == 'aa-bb-cc', 'toToken - dash - from upperCase')
 //   $t.ok('a b c'.toTokenCase('__') == 'a__b__c', 'toSlug - delimiter')
    $t.ok('hear me řôàř'.toTokenCase('-') == 'hear-me-roar', 'toSlug - dash - extended')

    $t.ok('aa bb cc'.toTokenCase('camel') == 'aaBbCc', 'camelCase')
    $t.ok('-aa-bb--cc!'.toTokenCase('camel') == 'aaBbCc', 'camelCase - delim')
    $t.ok('a b c'.toTokenCase('camel') == 'aBC', 'camelCase - single chars')
    $t.ok('hear me řôàř'.toTokenCase('camel') == 'hearMeRoar', 'camelCase - extended')


    $t.ok('Turtles & Tide Pools'.toUrlSlug() == 'turtles-tide-pools', 'toUrlSlug')

    $str = 'My Top 10 Favorite 2D Games'
    $t.ok($str.toUrlSlug() == 'my-top-10-favorite-2d-games', 'toUrlSlug')
    $t.ok($str.toUrlSlug(':common') == 'top-10-favorite-2d-games', 'toUrlSlug')

    $str = 'What`s Tom`s Favorite State in the U.S.?'
    $t.ok($str.toUrlSlug() == 'whats-toms-favorite-state-in-the-us', 'toUrlSlug')
    $t.ok($str.toUrlSlug(':common') == 'tom-favorite-state-us', 'toUrlSlug')

    $t.ok('Abc DEF ⒶⒷⒸ'.toLowerCase() == 'abc def ⓐⓑⓒ', 'lowerCase')
    $t.ok('fòôbàř'.toUpperCase() == 'FÒÔBÀŘ', 'upperCase - extended')
    $t.ok('FÒÔBÀŘ'.toLowerCase() == 'fòôbàř', 'lowerCase - extended')

    $t.ok(
        'Τάχιστη αλώπηξ'.toUpperCase() == 'ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ'
        'upperCase - unicode'
    )
    $t.ok(
        'ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ'.toLowerCase() == 'τάχιστη αλώπηξ'
        'lowerCase - unicode'
    )



    $t.ok('ABC'.toLowerCase(-first) == 'aBC', 'lowerCaseFirst')
    $t.ok('abc'.toUpperCase(-first) == 'Abc', 'upperCaseFirst')
    $t.ok('ŘÔÀŘ'.toLowerCase(-first) == 'řÔÀŘ', 'lowerCaseFirst - extended')
    $t.ok('řôàř'.toUpperCase(-first) == 'Řôàř', 'upperCaseFirst - extended')

    $t.ok('this is a title'.toTitleCase() == 'This Is A Title', 'titleCase')
    $t.ok('a title'.toTitleCase() == 'A Title', 'titleCase - starting minor word')
    $t.ok('is it true? a title'.toTitleCase() == 'Is It True? A Title', 'titleCase - punctuation')
    $t.ok('Learning HTML'.toTitleCase() == 'Learning Html', 'titleCase - acronym')
    $t.ok('happiness: a guide'.toTitleCase() == 'Happiness: A Guide', 'titleCase - colon: a')
    $t.ok('meyers-briggs test'.toTitleCase() == 'Meyers-Briggs Test', 'titleCase - hyphens')
    $t.ok('they`re up there'.toTitleCase() == 'They`re Up There', 'titleCase - apostrophes')
    $t.ok('hear me řôàř'.toTitleCase() == 'Hear Me Řôàř', 'titleCase - extended')
    $t.ok('ßabc'.toTitleCase() == 'Ssabc', 'titleCase - full case folding')

    $t.ok('horse'.toPlural() == 'horses', 'plural blank')
    $t.ok('horse'.toPlural(1) == 'horse', 'plural no')
    $t.ok('horse'.toPlural(2) == 'horses', 'plural yes')
    $t.ok('boss'.toPlural(2) == 'bosses', 'plural s yes')
    $t.ok('stimulus'.toPlural(3, 'stimuli') == 'stimuli', 'plural custom')

    $t.ok('ⒶⒷⒸ123'.limit(3) == 'ⒶⒷⒸ…', 'limit')
    $t.ok('ⒶⒷⒸ123'.limit(3, '!') == 'ⒶⒷⒸ!', 'limit')

    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join')
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', { limit: 2 }).join('|') == 'Ⓐ|Ⓑ,Ⓒ', 'split/join limit')
    $t.ok('Ⓐ, Ⓑ, Ⓒ'.split(rx',\s+').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join regex')
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', { limit: 0 }).length() == 3, 'split limit 0')
    $t.ok('ⒶⒷⒸ'.split('').length() == 3, 'split on empty delimiter')

    $t.ok('1Ⓐ2'.split('Ⓐ').join() == '12', 'split on unicode delimiter')
    $t.ok('1Ⓐ2'.split(rx'\D').join() == '12', 'split on unicode regex delimiter')

    $t.ok(',a, b,,c, ,'.split(',').join() == 'abc', 'split - trim empty')
    $t.ok(
        ',a, b,,c, ,'.split(',', -keepWhitespace).join('|') == '|a| b||c| |'
        'split - keep empty'
    )

    $t.ok($uni.splitChars()[3] == 'Ⓒ', 'chars')

    $uniml = '''

        ① item 1
        ② item 2

        ③ item 3

    '''
    $t.ok($uniml.splitLines().length() == 3, 'lines - count')
    $t.ok($uniml.splitLines()[2].getChar(1) == '②', 'lines - trimmed indent')
    $t.ok($uniml.splitLines(-keepWhitespace).length() == 4, 'lines with whitespace')

    $words = 'abc,123? ok. ③②①'.splitWords()
    $t.ok($words.join('|') == 'abc|123|ok|③②①', 'splitWords - default')

    $words = '③②① 123?  xyz!'.splitWords(-keepAllChars)
    $t.ok($words.join('|') == '③②①|123?|xyz!', 'splitWords')

    $words = 'ⒶⒷ!Ⓒ1Ⓐ,ⒷⒸ'.splitWords()
    $t.ok($words.join('|') == 'ⒶⒷ|Ⓒ1Ⓐ|ⒷⒸ', 'splitWords unicode')

    $t.ok($uni.reverse() == '321cba ③②①ⒸⒷⒶ', 'reverse')



    $t.ok('Ⓐ    Ⓑ'.squeeze() == 'Ⓐ Ⓑ', 'squeeze')
    $t.ok('Ⓐ①①①①Ⓑ①①'.squeeze('①') == 'Ⓐ①Ⓑ①', 'squeeze char')

    $t.ok('ⒶⒷⒸ {var}'.fill({ var: '①②③' }) == 'ⒶⒷⒸ ①②③', 'fill')
    $t.ok('abc {1}'.fill('123') == 'abc 123', 'fill 1 arg')
    $t.ok('abc {1} {2}'.fill('123', '456') == 'abc 123 456', 'fill 2 arg')
    $t.ok('abc {} {}'.fill(['123', '456']) == 'abc 123 456', 'fill blanks & list')

    $t.dies(
        fun { 'abc {nope}'.fill('foo') }
        'Can`t look up string key'
    )
    $t.dies(fun { 'abc {} {}'.fill('foo') }, 'fill - not enough values', 'not found')




    $t.section('Strings - Before/After')

    $t.ok('ⒶⒷⒸ①②③'.removeLeft('ⒶⒷ') == 'Ⓒ①②③', 'removeLeft')
    $t.ok('ⒶⒷⒸ①②③'.removeLeft('①') == 'ⒶⒷⒸ①②③', 'removeLeft - no')
    $t.ok('Abcdef'.removeLeft('abc', -ignoreCase) == 'def', 'removeLeft - ignoreCase')

    $t.ok('ⒶⒷⒸ①②③'.removeRight('②③') == 'ⒶⒷⒸ①', 'removeRight')
    $t.ok('ⒶⒷⒸ①②③'.removeRight('①') == 'ⒶⒷⒸ①②③', 'removeRight - no')
    $t.ok('abcDef'.removeRight('def', { ignoreCase }) == 'abc', 'removeLeft - ignoreCase')

    $t.ok('ⒶⒷⒸ'.removeWrap('Ⓐ', 'Ⓒ') == 'Ⓑ', 'removeWrap - exists')
    $t.ok('ⒶⒷ'.removeWrap('Ⓐ', 'Ⓒ') == 'ⒶⒷ', 'removeWrap - partial exists')

    $t.ok('ⒶⒷⒸ'.ensureLeft('Ⓐ') == 'ⒶⒷⒸ', 'ensureLeft - exists')
    $t.ok('ⒷⒸ'.ensureLeft('Ⓐ') == 'ⒶⒷⒸ', 'ensureLeft - not exists')
    $t.ok('ⒶⒷⒸ'.ensureRight('Ⓒ') == 'ⒶⒷⒸ', 'ensureRight - exists')
    $t.ok('ⒶⒷ'.ensureRight('Ⓒ') == 'ⒶⒷⒸ', 'ensureRight - exists')

    $t.ok('Ⓑ'.ensureWrap('Ⓐ', 'Ⓒ') == 'ⒶⒷⒸ', 'ensureWrap - not exists')
    $t.ok('ⒶⒷ'.ensureWrap('Ⓐ', 'Ⓒ') == 'ⒶⒶⒷⒸ', 'ensureWrap - partial exists')

    $t.ok('ⒶⒷⒸ'.append('①②③') == 'ⒶⒷⒸ①②③', 'append')
    $t.ok('ⒶⒷⒸ'.prepend('①②③') == '①②③ⒶⒷⒸ', 'prepend')


    //--------

    $t.section('String Methods - Regex Alts')

    $t.ok('Hello 123'.contains(rx'\d+'), 'contains - true')
    $t.ok('Hello 123'.contains(rx'(\d+)'), 'contains w group - true')
    $t.ok(!'Hello'.contains(rx'\d+'), 'contains - false')
    $t.ok('ABC'.contains(rx'abc', -ignoreCase), 'contains - ignoreCase via option')
    $t.ok('ABC'.contains(rx'abc'i), 'contains - ignoreCase va flag')
    $t.ok('ABC 123'.contains(123), 'contains - number')
    $t.dies(fun { 'ABC 123.45'.contains(123.0) }, 'Got: `number`')
    $t.dies(fun { 'ABC'.contains({}) }, 'Got: `map`')

    $t.ok('123'.count(rx'\d') == 3, 'count - multiple')
    $t.ok('123'.count(rx'(\d)') == 3, 'count - multiple w group')
    $t.ok('abc'.count(rx'\d') == 0, 'count - zero')
    $t.ok('Abc'.count(rx'a', -ignoreCase) == 1, 'count - ignoreCase')

    $t.ok('1abc'.startsWith(rx'\d'), 'startsWith - true')
    $t.ok('1abc'.startsWith(rx'(\d)'), 'startsWith w group - true')
    $t.ok(!'abc1'.startsWith(rx'\d'), 'startsWith - false')
    $t.ok('ABC'.startsWith(rx'abc', -ignoreCase), 'startsWith - ignoreCase')

    $t.ok('abc1'.endsWith(rx'\d'), 'endsWith - true')
    $t.ok('abc1'.endsWith(rx'(\d)'), 'endsWith w group - true')
    $t.ok(!'1abc'.endsWith(rx'\d'), 'endsWith - false')
    $t.ok('123 ABC'.endsWith(rx'abc', -ignoreCase), 'endsWith - ignoreCase')

    $t.ok('123 ABC ABC'.indexOf(rx'abc'i) == 5, 'indexOf - regex')
    $t.ok('123 ABC ABC'.indexOf(rx'(abc)'i) == 5, 'indexOf w group - regex')
    $t.ok('123 ABC ABC'.lastIndexOf(rx'abc'i) == 9, 'lastIndexOf - regex')
    $t.ok('123 ABC ABC'.indexOf(rx'xzy'i) == 0, 'indexOf - regex - not found')
    $t.ok('123 ABC ABC'.lastIndexOf(rx'xzy'i) == 0, 'lastIndexOf - regex - not found')


    $t.section('Strings - Encoding/Crypto')

    $fp = 'cee86e2a6c441f1e308d16a3db20a8fa8fae2a45730b48ca2c0c61e159af7e78'
    $t.ok($fp == 'this is a message'.fingerprint(), 'fingerprint')

    $t.ok(String.randomToken(10).match(rx'[a-z0-9]{10}'), 'randomToken')

    $str = 'Hello World! { "a": 123 }'
    $b64 = $str.toEncoding('base64')
    $t.ok($b64 == 'SGVsbG8gV29ybGQhIHsgImEiOiAxMjMgfQ==', 'toEncoding - base64')
    $t.ok($b64.fromEncoding('base64') == $str, 'fromEncoding - base64')

    $t.ok('<a&b>'.toEncoding('html') == '&lt;a&amp;b&gt;', 'toEncoding - html')
    $t.ok('&lt;a&amp;b&gt;'.fromEncoding('html') == '<a&b>', 'fromEncoding - html')
    $esc = '&#97;&#98;&#99;&#9312;&#9313;&#9314;'
    $t.ok('abc①②③'.toEncoding('htmlAll') == $esc, 'toEncoding htmlAll')

    $enc = 'a%20%E2%92%B7%2F%E2%92%B8%3Ad'
    $t.ok('a Ⓑ/Ⓒ:d'.toEncoding('url') == $enc, 'toEncoding - url')
    $t.ok($enc.fromEncoding('url') == 'a Ⓑ/Ⓒ:d', 'fromEncoding - url')



    $punyOrig = 'MajiでKoiする5秒前'
    $punyEncoded = 'xn--majikoi5-783gue6qz075azm5e'
    $t.ok($punyOrig.toEncoding('punycode') == $punyEncoded, 'toEncoding - punycode')
    $t.ok(
        $punyEncoded.fromEncoding('punycode') == $punyOrig.toLowerCase()
        'fromEncoding - punycode'
    )



    // TODO: There's no simple way to test output of alternate encodings. Only that the encodingId is valid.
    $t.ok('xyz'.toEncoding('Windows-1251'), 'toEncoding - Windows-1251')

    $t.dies(fun { 'x'.toEncoding('invalid') }, 'invalid encoding')
    $t.dies(fun { 'x'.fromEncoding('invalid') }, 'invalid encoding')

    $t.ok(
        $str.fingerprint('sha384').startsWith('aa414a520356a39cbbcb36f8fc5a87703dd6')
        'hash - sha384'
    )
    $binHash = $str.fingerprint('sha384', { binary })
    $bytes = $binHash.toBytes()
    $t.ok($bytes.length() == 48 && $bytes[1] == 170, 'hash - binary')

    $t.ok(String.scrambleId(1) == 'f6trv22', 'scrambleId = 1')
    $t.ok(String.scrambleId(10000) == 'g8b5bdp', 'scrambleId = 10000')
    $t.ok(String.unscrambleId('f6trv22') == 1, 'unscrambleId = 1')
    $t.ok(String.unscrambleId('g8b5bdp') == 10000, 'unscrambleId = 10000')

    $bytes = 'abc ①②③'.toBytes()
    $t.ok($bytes[1] == 97 && $bytes.length() == 13, 'getBytes')
    $t.ok(''.toBytes().length() == 0, 'getBytes - empty string')

    $t.ok(String.fromBytes([97, 99, 101]) == 'ace', 'fromBytes')
    $t.ok(String.fromBytes([]) == '', 'fromBytes - empty list')
    $t.dies(fun { String.fromBytes([97, -100]) }, 'must be a list of positive integers')
    $t.dies(fun { String.fromBytes([97, false]) }, 'must be a list of positive integers')
    $t.dies(fun { String.fromBytes([97, '1']) }, 'must be a list of positive integers')


    $t.section('Strings - Checks')

    $t.ok(''.isEmpty(), 'isEmpty - no length')
    $t.ok(' '.isEmpty(), 'isEmpty - space')
    $t.ok('\n'.isEmpty(), 'isEmpty - newline')
    $t.ok(' \t '.isEmpty(), 'isEmpty - space w tab')
    $t.ok(!'  .  '.isEmpty(), 'isEmpty - non-word')
    $t.ok(' '.isEmpty(), 'isEmpty - line feed')
    $t.ok(String.unicodeToChar(0).isEmpty(), 'isEmpty - null')
    $t.ok(String.unicodeToChar(0x202F).isEmpty(), 'isEmpty - non-breaking space')

    // $t.ok('abc def'.hasCharType('space'), 'hasSpace space')
    // $t.ok('abc\ndef'.hasCharType('space'), 'hasSpace newline')
    // $t.ok(!'abcdef'.hasCharType('space'), 'hasSpace empty')

    // $t.ok(!'abc 123'.hasAllCharType('upper'), 'hasAll uppercase - none')
    // $t.ok(!'aBc 123'.hasAllCharType('upper'), 'isUpperCase - some')
    // $t.ok(!'ABC 123'.hasAllCharType('upper'), 'isUpperCase - all')
    // $t.ok(!''.hasAllCharType('upper'), 'isUpperCase - empty')

    // $t.ok(!'abc 123'.hasCharType('upper'), 'hasUpperCase - none')
    // $t.ok('aBc 123'.hasCharType('upper'), 'hasUpperCase - some')
    // $t.ok('ABC 123'.hasCharType('upper'), 'hasUpperCase - all')
    // $t.ok(!''.hasCharType('upper'), 'hasUpperCase - empty')

    $t.ok('ABC'.isUpperCase(), 'isUpperCase - true')
    $t.ok(!'ABC123'.isUpperCase(), 'isUpperCase - with digits')
    $t.ok(!'AbC 123'.isUpperCase(), 'isUpperCase - mixed')
    $t.ok(!'abc 123'.isUpperCase(), 'isUpperCase - none')
    $t.ok(!''.isUpperCase(), 'isUpperCase - empty')

    $t.ok('abc'.isLowerCase(), 'isLowerCase - true')
    $t.ok(!'abc123'.isLowerCase(), 'isLowerCase - with digits')
    $t.ok(!'AbC 123'.isLowerCase(), 'isLowerCase - mixed')
    $t.ok(!'ABC 123'.isLowerCase(), 'isLowerCase - none')
    $t.ok(!''.isLowerCase(), 'isLowerCase - empty')

    // $t.ok(!'ABC 123'.hasCharType('lower'), 'hasLowerCase - none')
    // $t.ok('AbC 123'.hasCharType('lower'), 'hasLowerCase - some')
    // $t.ok('abc 123'.hasCharType('lower'), 'hasLowerCase - all')
    // $t.ok(!''.hasCharType('lower'), 'hasLowerCase - empty')

    // $t.ok('abc'.hasCharType('alpha'), 'isAlpha')
    // $t.ok('abcDEF'.hasCharType('alpha'), 'isAlpha')
    // $t.ok('123abc'.hasCharType('alpha'), 'isAlpha - w numbers')
    // $t.ok('123 def'.hasCharType('alpha'), 'isAlpha - spaces')
    // $t.ok(!''.hasCharType('alpha'), 'isAlpha - empty')

    // $t.ok('abc'.hasAllCharType('alphaNumeric'), 'isAlphaNumeric')
    // $t.ok('abcDEF'.hasAllCharType('alphaNumeric'), 'isAlphaNumeric')
    // $t.ok('abc123'.hasAllCharType('alphaNumeric'), 'isAlphaNumeric - w numbers')
    // $t.ok(!'abc 123'.hasAllCharType('alphaNumeric'), 'isAlphaNumeric - spaces')
    // $t.ok(!''.hasAllCharType('alphaNumeric'), 'isAlphaNumeric - empty')

    // $t.ok('abc 123'.hasAllCharType('ascii'), 'isAscii')
    // $t.ok(''.hasAllCharType('ascii'), 'isAscii - empty')
    // $t.ok(!'ⒶⒷⒸ'.hasAllCharType('ascii'), 'isAscii - unicode')
    // $t.ok(!'abⒸ'.hasAllCharType('ascii'), 'isAscii - mixed')


    $t.ok('123'.isNumeric(), 'isNumeric')
    $t.ok('-123'.isNumeric(), 'isNumeric - negative')
    $t.ok('123.45'.isNumeric(), 'isNumeric - float')
    $t.ok('123 '.isNumeric() && '123 '.toNumber() == 123, 'isNumeric - trailing space')
    $t.ok(' 123'.isNumeric() && ' 123'.toNumber() == 123, 'isNumeric - leading space')
    $t.ok(!'123a'.isNumeric(), 'isNumeric - alphanum')
    $t.ok(!'abc'.isNumeric(), 'isNumeric - all alpha')
    $t.ok(!''.isNumeric(), 'isNumeric - empty')
    $t.ok(!' '.isNumeric(), 'isNumeric - space')
    $t.ok(!'Inf'.isNumeric(), 'isNumeric - Inf')
    $t.ok(!'NaN'.isNumeric(), 'isNumeric - NaN')
    $t.ok(!'123 apples'.isNumeric(), 'isNumeric')



    $t.section('Strings - Escapes')

    $t.ok('ab' ~ '\\' ~ 'cd' == 'ab\cd', 'string - escape normal char')
    $t.ok('ab\ncd'.match(rx'ab\scd'), 'string - newline')
    $esc = '$_SERVER["REMOTE_ADDR"]'
    $t.ok(!'lot\'s\t "double $quote"'.contains('\\'), 'no leaked backslashes')
    $t.ok('Here\'s an escaped quote'.contains('\''), 'escaped quote (\\\')')
  //  $t.ok('Here`s a backtick' == 'Here\'s a backtick', 'alt apostrophe (\`)')

    $t.ok($esc.startsWith('$_SERVER'), 'prevent php vars - $_SERVER')
    $t.ok('\$abc'.getChar(1) == '\\', 'prevent php vars - \\$abc')
    $t.ok('${abc}'.getChar(1) == '$', 'prevent php vars - ${abc}')



    $t.section('Strings - Regular Expressions')

    $m = 'abc 123'
    $t.ok($m.split(rx'\s')[2] == '123', 'split regex')
    $t.ok($m.match(rx'\w+ \d+') == 'abc 123', 'match - no group')
    $t.ok($m.match(rx'(\w+) (\d+)')[1] == 'abc', 'match - group 1')
    $t.ok($m.match(rx'(\w+) (\d+)')[2] == '123', 'match - group 2')

    $t.ok($m.match(rx'(\w+) (\d+)').indexOf[2] == 5, 'match index')

    $t.ok($m.match(rx'(\S+)$')[1] == '123', 'regex with dollar')

    $t.ok(!$m.match(rx'bad'), 'no match')
    $t.ok($m.match(rx'bad') == '', 'no match returns empty str')
    $t.ok($m.match(rx'(bad)') == '', 'no match + group returns empty str')

    $m = '''
        Start of multi-line string
        number 123
    '''

    $t.ok(!$m.match(rx'Start.*?123'), 'dotall s flag - off')
    $t.ok($m.match(rx'Start.*?123's), 'dotall s flag - on')
    $t.ok($m.match(rx'Start(\n|.)*?123'), 'newline/dot alternative to s flag')


    $m = '08:23'
    $t.ok($m.match(rx'(\d+):(\d+)', 'hour|min').min == '23', 'named groups')
    $t.ok($m.match(rx'(\d+):(\d+)', 'hour|min').indexOf.min == 4, 'named groups - index')

    $t.dies(
        fun { $m.match(rx'(\d+):(\d+)', 'hour') }
        'groupName mismatch', 'number of capture groups'
    )


    $m = 'This is a\n multiline string!\n'
    $t.ok($m.match(rx'STRING'i), 'i flag')

    $t.ok($m.match(rx'a.*?multiline's), 's flag')
    $t.ok($m.match(rx'multi      line'x), 'x flag')
    $t.ok($m.match(rx'^\s+multiline'm), 'm flag - start')
    $t.ok($m.match(rx'is a'm), 'm flag - end')
    $t.dies(fun { $m.match(rx'blah'zz) }, 'bad flag', 'Invalid Regex flag: `z`')

    $t.dies(
        fun { 'longstringlongstring'.match(rx'(?:\D+|<\d+>)*[!?]') }, 'Error in match'
        'PREG_BACKTRACK_LIMIT_ERROR'
    )

    $multi = 'one\ntwo\nthree'
    $t.ok($multi.split(rx'\s').length() == 3, 'Newline regex')

    $cased = 'hello WORLD'
    $t.ok($cased.match(rx'world'.flags('i')) == 'WORLD', 'regex object - .flags')

    $ticks = 'hello `WORLD`'
    $t.ok($ticks.match(rx'`(\w+)`')[1] == 'WORLD', 'regex with backticks')

    $offset = '123 456 789'
    $t.ok($offset.match(rx'\d+'.startIndex(4)) == '456', 'with startIndex')
    $t.ok($offset.match(rx'\d+'.startIndex(-3)) == '789', 'with startIndex - negative')

    if $num := 'abc 123'.match(rx'\d+') {
        $t.ok($num == '123', 'if/as')
    }

    $t.dies(fun { $m.match(rx'(\d+') }, 'missing closing paren')
    $t.dies(fun { $m.match(rx'[a-z') }, 'missing terminating ]')
    $t.dies(fun { $m.match(rx'[z-a]') }, 'range out of order')


    // replace

    $str = 'aa bb aa'
    $replaced = 'aa bb aa'.replace('aa', 'xx')
    $t.ok($replaced == 'xx bb xx', 'replace string - all occurances')
    $t.ok(String.lastReplaceCount() == 2, 'getLastReplaceCount')

    $t.ok('aa bb aa'.replace('aa', 'xx', { limit: 1 }) == 'xx bb aa', 'replace string - limit 1')
    $t.ok('aa bb aa'.replace('aa', 'xx', -first) == 'xx bb aa', 'replace string - -first')

    $escTicks = 'hello \`WORLD\`'
    $t.ok($escTicks.replace(rx'\`(\w+)\`', 'THERE') == 'hello THERE', 'escaped backticks')

    $t.ok('ab  cd e'.replace(rx'\s+', '-') == 'ab-cd-e', 'replace')

    $dollar = '123$foo$'.replace(rx'(\d+)\$foo\$', 'dollar:$1')
    $t.ok($dollar == 'dollar:123', 'regex with $')

    $backslash = '123\\foo\\'.replace(rx'(\d+)\\foo\\', 'backslash:$1')
    $t.ok($backslash == 'backslash:123', 'regex with literal backslash')

    $rx = Regex('`{}`'.fill('world'), 'i')
    $t.ok($ticks.replace($rx, 'VAR') == 'hello VAR', 'replace - variable')

    $cb = x{ $a[1].toUpperCase() ~ '!' }
    $t.ok('foo 123'.replace(rx'(\w+)', $cb) == 'FOO! 123!', 'replace - callback')
    $t.ok(
        'foo 123'.replace(rx'(\w+)', $cb, { limit: 1 }) == 'FOO! 123'
        'replace - callback - limit 1'
    )

    $cb = x{ $a.toUpperCase() }
    $t.ok('foo 123'.replace(rx'\w+', $cb) == 'FOO 123', 'replace - callback - no groups')

    $cb = x{ $a.full.toUpperCase() }
    $t.ok('foo abc'.replace(rx'(\w+) (\w+)', $cb) == 'FOO ABC', 'replace - callback - full key')

    $t.ok('abc 123'.replace(rx'(\w+) (\d+)', '$1 | $2') == 'abc | 123', 'replace - $1, $2')

    $t.ok('Ⓐ'.replace(rx'[^0-9]', '!') == '!', 'replace - unicode')



    // matchAll

    $mult = 'a:123|b:456|c:789'
    $matches = $mult.matchAll(rx'(\w):(\d+)')
    $t.ok($matches[3][1] == 'c' && $matches[3][2] == '789', 'matchAll')

    $matches = $mult.matchAll(rx'(\w):(\d+)', 'char|num')
    $t.ok($matches[3].char == 'c' && $matches[3].num == '789', 'matchAll - named')

    $matches = $mult.matchAll(rx'(\d+)NO(\d+)')
    $t.ok(!$matches.length(), 'matchAll - none')




    $t.section('Strings - Civilize')

    $t.ok('PLS HELP HELP'.civilize() == 'Pls help help', 'PLS HELP HELP')
    $t.ok('I work at NASA'.civilize() == 'I work at NASA', 'I work at NASA')
    $t.ok('ok?!!!'.civilize() == 'ok?!', 'ok?!!!')
    $t.ok('hey.....'.civilize() == 'hey...', 'hey.....')
    $t.ok('ok!!!'.civilize() == 'ok!', 'ok!!!')
    $t.ok('ok???'.civilize() == 'ok?', 'ok???')

    $long = 'aaaaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAARRRRRRRRRGGGGGGHHHHHHHHHHHHHH'
    $t.ok($long.civilize() == 'Aaaarrrggghhh', 'long string, mixed')

    $long2 = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
    $t.ok($long2.civilize() == 'zzz', 'long string all same')

    $long3 = 'asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdd'
    $civ = 'asdasdasdasdasdasdasdasdasdasdasdasdasda…'
    $t.ok($long3.civilize() == $civ, 'long cycled asdasd')

    $longUrl = '''
        Here is my song: https://www.beepbox.co/#6n42s0kbl00e07t7m1a7g0fj7i1r3o321100T0w1f1d1c0h2v0T0w8f1d1c0h0v0T0w7f1d1c0h0v0T0w2f1d1c0h0v0T0w2f1d1c0h0v0T0w1f1d1c0h0v0T1d2c1AbF7B0V1Q5342Pffe8E131
    '''
    $t.ok($longUrl.civilize() == $longUrl, 'keep URL')


    $s = 'hⒶllo there.'
    $t.ok($s.replaceChars('.ⒶⒷⒸ', '!e') == 'hello there!', 'replaceChars - uneven')
    $t.ok('Fóø Bår! žoŤ'.toAscii() == 'Foo Bar! zoT', 'toAscii')
    $t.ok('Fóø ①②③'.toAscii() == 'Foo ', 'toAscii - remove non-ascii')
    $t.ok('‘’“”–—…'.toAscii() == '\'\'""--...', 'toAscii - smart quotes/dashes')


    $t.ok('abc bitch'.civilize() == 'abc *****', 'profanity - singular')
    $t.ok('abc bitches'.civilize() == 'abc *****es', 'profanity - plural')
    $t.ok('cunt\nbitches'.civilize() == '*****\n*****es', 'profanity - multiple across newlines')



    $t.section('Strings - Subscripts')

    $t.ok('ⒶⒷⒸ ①②③'.getChar(2) == 'Ⓑ', '$str[1]')
    $t.ok('ⒶⒷⒸ ①②③'.getChar(-1) == '③', '$str[-1]')
    $t.ok('ⒶⒷⒸ ①②③'.getChar(99) == '', '$str[99] == ``')


    $t.section('Strings - Bounds')

    $t.dies(
        fun { 'ⒶⒷⒸ'.indexOf('a', { startIndex: 10 }) }
        'indexOf offset', 'outside of string'
    )
    $t.dies(
        fun { 'ⒶⒷⒸ'.indexOf('a', { startIndex: -10 }) }
        'indexOf offset', 'outside of string'
    )
    $t.dies(
        fun { 'ⒶⒷⒸ'.lastIndexOf('a', { startIndex: 10 }) }
        'lastIndexOf offset', 'outside of string'
    )



    $t.section('Strings - Misc')

    $t.ok('AdminUserId'.toHumanized() == 'Admin User', 'toHumanized')
    $t.ok('admin_user_id'.toHumanized() == 'Admin User', 'toHumanized (_)')
    $t.ok('admin-user-id'.toHumanized() == 'Admin User', 'toHumanized (-)')
    $t.ok('hear-me-řôàř'.toHumanized() == 'Hear Me Roar', 'toHumanized - extended')
    $t.ok('bannerHTML'.toHumanized() == 'Banner Html', 'toHumanized - acronym')


    $s = '''
        Line 1
            Line 2
    '''
    $t.ok($s.trimIndent() == 'Line 1\nLine 2', 'trimIndent')
    $t.ok($s.trimIndent(-keepRelative) == 'Line 1\n    Line 2', 'trimIndent - relative')




    // TODO: move this to module
    // $t.section('Strings - CSV')

    // $csvLine = 'foo, 3, 4.9, "ab cd"\n'
    // $csvData = $csvLine.parseCsv()
    // $t.ok($csvData[0] == 'foo', 'parseCsv - string')
    // $t.ok($csvData[1] == 3, 'parseCsv - number')
    // $t.ok($csvData[2] == 4.9, 'parseCsv - float')
    // $t.ok($csvData[3] == 'ab cd', 'parseCsv - quoted string')

    return $t
}

