
// Assign the form to a '@@' file-global variable.
@@.form = Form.create('contactForm', {

    hiddenId: {
        type: 'hidden',
        value: '12345',
    },

    name: {
        type: 'text',
        rule: { name },
    },

    email: {
        type: 'email',
        help: 'We won`t spam you.',
    },

    website: {
        rule: 'optional',
        type: 'url',
    },

    customPattern: {
        type: 'text',
        label: 'Three Digit Number',
        rule: { regex: r'\d{3}' },
        placeholder: '###',
    },

    color: {
        type: 'color',
    },

    topic: {
        type: 'radio',
        options: {
            bug: 'Bug Report',
            request: 'Enhancement Request',
            general: 'General Feedback',
        },
    },

    message: {
        type: 'textarea',
    },

    colors: {
        type: 'checkbox',
        label: html'What are your favorite colors? <small>Pick 1 or 2</small>',
        rule: { min: 1, max: 2 },
        options: {
            0: html'<span style="color:darkred">Red</>',
            1: html'<span style="color:green">Green</>',
            2: html'<span style="color:blue">Blue</>',
        },
    },

    howLong: {
        type: 'radio',
        label: 'How long have you been a customer?',
        options: {
            0: 'Less than a year',
            1: '1-2 years',
            2: '2-3 years',
            3: '3-5 years',
            4: 'More than 5 years',
            5: 'I have not made a purchase yet',
        },
    },

    file: {
        type: 'file',
        rule: {
            file: {
                dir: 'testFiles',
                exts: ['txt', 'sh'],
            },
        },
    },

    image: {
        type: 'file',
        rule: {
            image: {
                dir: 'testImages',
                sizeX: 500,
                sizeY: 500,
                keepAspectRatio: true,
            },
        },
    },

    acceptTerms: {
        type: 'checkbox',
        rule: 'accepted',
        label: html'I accept the <a href="/terms">terms</a>.',
    },
})


fn main {

    $mainContent = mainHtml()

    if Session.hasFlash('formDone') {
        $mainContent = thanksHtml()
    }

    Output.sendPage({
        title: 'Example Form',
        main: $mainContent,
        css: url'css/base.css',
        js: url'js/form.js',
    })
}

// This is automatically called when the form is submitted
// (i.e. the HTTP request type is 'POST')
fn mainPost {

    @@.form.process(fn ($data) {

        // Return a custom validation error
        if $data.name == 'skipme' {
            return ['name', 'is skippable name']
        }



        // if $data.subscribe {
        //     File.log('Subscribe: ' ~ $data.email)
        // }

        // Session.setFlash('formDone', true)

        // return true

        return $data
    })
}

// Call `render` on the Form object, with a label
// for the submit button.
tm mainHtml() {

    <h1> Example Form

    {{ @@.form.render('Send Message') }}
}

tm thanksHtml {

    <h1> Thanks!

    <p> Your form has been submitted.

    <p> <a href="{{ Request.getUrl() }}">Back to Form</>
}

// fn sendEmail($formData) {

//     Email.send({
//         from: 'joe@joelesko.com',
//         to: 'joe@joelesko.com',
//         replyTo: $formData.email,

//         subject: 'Contact: {name} ({topic})'.fill($formData),
//         body: emailBodyText($formData),
//     })
// }

// tm emailBodyText($data) {

//     Name: {{ $data.name }}
//     Email: {{ $data.email }}
//     Topic: {{ $data.topic }}

//     {{ $data.message }}
// }

