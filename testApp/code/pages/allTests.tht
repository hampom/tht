
// TODO: This file is monster huge.  Should probably break it up.

fn main {

    $test = Test()

    $test = run($test)

    Output.sendHtml(html($test.resultsHtml()))
}

fn isPerfMode {
    return Input.get('perf', 'b')
}

tm html($results) {

    <!-- this is a comment -->
    <html>
        <head>
          <title> THT Unit Tests
          <link rel="stylesheet" href="/css/base.css">
        </>
        <body>
            <main>
                <h1> THT Unit Tests

                <p>
                    PHP Version: <b>{{ Php.getVersion() }}<br />
                    THT Version: <b>{{ Meta.getThtVersion() }}
                </>

                <p> <a href="#test-results" style="font-weight: bold"> {{ Web.icon('arrowDown') }} Jump to Results

                <h3> Perf
                <p style="font-size: 100%; margin-top: 3rem;">
                    To measure raw execution speed of this page:
                    <ul>
                        <li> Set <code>_coreDevMode: false</> and <code>showPerfPanel: true</>in <code>app.jcon</>
                        <li> Reload with <a href="/all-tests?perf=true">perf=true</a>
                    </>
                </>

                {{ $results }}

            </>
        </>
    </>
}

fn run($t:o) {

    $startTime = Perf.now()

    $t = testValidator($t)
    $t = testRuntimeErrors($t)
    $t = testCompileErrors($t)

    $t = testMathAndLogic($t)
    $t = testBitwise($t)

    $t = testTypes($t)
    $t = testStrings($t)
    $t = testNumber($t)
    $t = testFlags($t)
    $t = testTypeStrings($t)
    $t = testUrlTypeStrings($t)

    $t = testLoops($t)
    $t = testControlFlow($t)

    $t = testLists($t)
    $t = testMaps($t)

    $t = testFunctions($t)
    $t = testTypeDeclarations($t)
    $t = testTemplates($t)

    $t = testCustomModules($t)
    $t = testOop($t)

    $t = testPerf($t)
    $t = testMisc($t)


    // Modules
    $t = libFile($t)
    $t = libDate($t)
    $t = libPassword($t)
    $t = libJconTest($t)
    $t = libJson($t)
    $t = libLitemark($t)
    $t = libMath($t)
    $t = libMeta($t)
    $t = libRequest($t)
    $t = libPhp($t)
    $t = libWeb($t)
    $t = libPage($t)
    $t = libInput($t)
    $t = libForm($t)
    $t = libOutput($t)
    $t = libConfig($t)
    $t = libSession($t)
    $t = libCookie($t)
    $t = libSystem($t)
    $t = libDb($t)
    $t = libCache($t)
    $t = libNet($t)

    // $t = libPerf($t)

    $duration = Perf.now() - $startTime

    if isPerfMode(): print('Perf Duration: ' ~ $duration ~ ' ms')

    return $t
}

fn testRuntimeErrors($t) {

    $t.section('Runtime Errors')

    $t.dies(x{ 'abc'.sdf() }, 'non-existent method', 'Unknown method')

    $t.dies(x{ { a: 1 }.sdfsdf() }, 'invalid method', 'Unknown method')

    $t.dies(x{ 'sdf'.reverse }, 'missing parens in method call',
        'Try: Call method `u_reverse()`')

    $funFor = fn {
        foreach 2 as $foo {
        }
    }
    $t.dies($funFor, 'bad foreach var', 'argument')

    $t.dies(x{ 'abc'.length }, 'length()', 'Call method `u_length()`')

    $t.dies(x{ 'x'.splitwords() }, 'bad case', 'Try: `splitWords` (exact case)')

    $t.dies(x{ (1).leftZeroPad() }, 'word order', 'Try: `zeroPadLeft` (exact case)')
    $t.dies(x{ (1).even() }, 'is-', 'Try: `isEven` (exact case)')

    return $t
}

fn testCompileErrors($t) {

    $t.section('Parser')

    $code = '''

        // test comments

        /*
            this is a block comment
        */

        $commented = 2 // line-end comment

    '''
    $t.parserOk($code, 'comments')
    $longComment = '// ' ~ 'a'.repeat(102) ~ '\n'
    $t.parserOk($longComment, 'line comment over 100 chars')
    $longBlockComment = '/*\n' ~ 'a'.repeat(102) ~ '\n*/'
    $t.parserOk($longBlockComment, 'block comment over 100 chars')

    $longLine = '''
        $url = url'https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;600&family=Roboto:wght@400;500&display=swap'
    '''
    $t.parserError($longLine, 'try: a multi-line string')

    $longFn = 'fn tooManyArgs($a1, $a2, $a3, $a4, $a5) { }'
    $t.parserError($longFn, 'Can not have more than 4 arguments')

    $t.section('Parser Errors - Names')

    $t.parserError('$FOO = 3',        'camelCase')
    $t.parserError('$fOO = 3',        'camelCase')
    $t.parserError('$XMLreader = {}', 'camelCase')
    $t.parserError('$a_b = 3',        'camelCase')

    $t.parserError('$$a = 1',         'only one `$`')
    $t.parserError('$a$b = 1',        'only one `$`')
    $t.parserError('class Foo {\n fn aaa { $ = 1\n }\n}',           'missing a name')

    $t.parserError('if true {\n} Else {\n}',  'all lowercase')

    $t.parserError('fn fo$o {}', '$')
    $t.parserError('fn FOO {}',   'camelCase')
    $t.parserError('fn a {}',    'longer than 1')

    $longName = 'a'.repeat(41)
    $t.parserError('$' ~ $longName ~ ' = 1', '40 characters or less')
    $t.parserError('fn ' ~ $longName ~ ' () {}', '40 characters or less')

    $t.section('Parser Errors - Aliases')

    $t.parserError('for ($ary as $a) { }', 'try: \`foreach')
    $t.parserError('$ary = []\nforeach $a in $ary { }', 'expected `as`')
    $t.parserError('$m = { a: 3 }\nforeach $m as $k => $v {', 'expected `/`')

    $t.parserError('$a = 1 ^ 2',  '+^')
    $t.parserError('$a = 1 & 2',  '+&')
    $t.parserError('$a = 1 | 2',  '+|')
 //   $t.parserError('$a = 1 >> 2',  '+>')  TODO: gives line break error instead
    $t.parserError('$a = 1 << 2',  '+<')
    $t.parserError('$a = 1++',  '+= 1')
    $t.parserError('if true { } elif false {}',  'else if')
    $t.parserError('if true { } elsif false {}',  'else if')
    $t.parserError('if true { } elseif false {}',  'else if')
    $t.parserError('switch() {}',  'try: `match')
    $t.parserError('require()',  'try: `load`')
    $t.parserError('while () {}',  'try: `loop { ... }`')
    $t.parserError('while true {}',  'try: `loop { ... }`')
    $t.parserError('$a = 1 ?: 0',  '||:')
    $t.parserError('$a = 1 ?? 0',  '||:')
    $t.parserError('$a = ``\n$a .= `xyz`',  '~=')


    $t.section('Parser Errors - Misc')

    $t.parserError('$a', 'standalone value')
    $t.parserError('true', 'standalone value')
    $t.parserError('{}', 'standalone expression')
    $t.parserError('$a || 123', 'standalone expression')
    $t.parserError('$a == 123', '`=` (assignment)')
    $t.parserError('if $a = 3 { }', 'assignment', 'if, missing paren')
    $t.parserError('break', 'outside of a loop')
    $t.parserError('return', 'outside of a function')
    $t.parserOk('if true { $a = 1 }', 'newline not needed for one-line if')
    $t.parserOk('fn foo { return 1 }', 'newline not needed for one-line fun')

    // TODO: small bug: outer parens aren't caught if there is no following statement
    $t.parserError('if (1 == 1) { }\n$a = 1', 'outer parens')
    $t.parserError('if (false && (1 == 1)) { }\n$a = 1', 'outer parens')
    $t.parserError('if true { }\n else if (1 == 1) { }\n$a = 1', 'outer parens')
    $t.parserError('foreach ([`a`] as $bbb) { }', 'outer parens')
    $t.parserOk('if (1 == 1) && false { }', 'outer parens')
    $t.parserOk('if false && (1 == 1) { }', 'outer parens')
    $t.parserError('$a = `hello', 'unexpected newline')
    $t.parserError('foreach $a {}', 'expected `as`')
    $t.parserError('for ($i = 0; i < 10; i += 1) {}', 'Try: \`foreach')
    $t.parserError('1 ? 2 ? 3 : 4 : 5', 'nested ternary')
    $t.parserError('$a = e`foo`', 'string modifier')
    $t.parserError('if 2 => 1 { }', '>=')
    $t.parserError('if 1 =< 2 { }', '<=')
    $t.parserError('$a = 1 <> 2', '!=')


    $t.parserError('fn foo\n$a = 1', 'Expected `{`')


    $t.parserError('if false && ($a == 3) return', 'Expected `{`')
    $t.parserError('$a = { FOO: `bar` }', 'camelCase')
    $t.parserError('$a = { foo: `bar`, foo: 1 }', 'duplicate key')
    $t.parserError('$a = (1 + )', 'missing right operand')
    $t.parserError('$a = 2 + (1 * ) + 1', 'missing right operand')
    $t.parserError('<?', 'Unknown token: `<?`')
    $t.parserError('?>', 'Unknown token: `?>`')
    $t.parserError('<?=', 'Unknown token: `<?=`')
    $t.parserError('`hello`[] = `a`', 'Assignment can not')
    $t.parserError('fn test($tma1,\n$tma2) {\n}', 'Newline')
    $t.parserError('fn test($tma1, \n$tma2) {\n}', 'Newline')
    $t.parserError('$a = 1;', 'remove semicolon')
    $t.parserError('$a = [1,, ]', 'Unexpected comma')
    $t.parserError('$a = [,, 1]', 'Unexpected comma')
    $crlf =  String.charFromCode(13) ~ String.charFromCode(10)
    $t.parserOk('$a = 1' ~ $crlf ~ '$b = 2', 'Ignore CR (Windows line break)')

    $t.parserError('$a = ``` sdf', 'newline')
    $t.parserError('$a = ```\ndfg ```', 'separate line')
    $t.parserError('$a = ```\ndfg ', 'unclosed')

    $t.parserError('$a = 1, $b = 2', 'unexpected separator', '')
    $t.parserError('foo())', 'extra separator')
    $t.parserError('foo()]', 'extra separator')
    $t.parserError('foo()}', 'extra separator')


    $t.section('Parser Errors - Adjacent Tokens')

    $t.parserError('$a = $foo $foo',   'unexpected variable')
    $t.parserError('$a = `foo` $foo', 'unexpected variable')
    $t.parserError('$a = 123 $foo',   'unexpected variable')
    $t.parserError('$a = $foo foo',   'unexpected word')
    $t.parserError('$a = foo `foo`', 'unknown keyword')
    $t.parserError('$a = 123 `foo`', 'unexpected string')
    $t.parserError('$a = foo 123',   'unknown keyword')
    $t.parserError('$a = `foo` 123', 'unexpected number')
    $t.parserError('$a = [1, 2 3]',   'unexpected number')
    $t.parserError('$a = { k: a, b c }', 'unknown keyword')
    $t.parserError('let $a = 123', 'unknown keyword')
    $t.parserError('function foo() {}', 'unknown keyword')


    $t.section('Parser Errors - Newlines')

    $t.parserError('$a = 1 /*\n', 'separate line')
    $t.parserError('/*\nsdf\n*/ d', 'missing newline')
    $t.parserError('/*\nsdf', 'unclosed comment')
    $t.parserError('tm fooText() {\n} $a = 1', 'Missing newline after closing brace')
    $t.parserError('if\n(true)\n{ } ', 'newline after `if`')
    $t.parserError('foreach\n(el in list)', 'newline after `foreach`')
    $t.parserError('fn\nfoo()', 'newline after `fn`')
    $t.parserError('class\nFoo {}', 'newline after `class`')
    $t.parserError('$a = new\nFoo()', 'remove `new`')
    $t.parserOk('$a = fn { $c = 1 }', 'Statement in anon function')
    $t.parserOk('if true { $a = 1 }', 'Statement in conditional block')

    // Don't allow dangling open braces
    $t.parserError('if true\n{ }',             'Please move open brace')
    $t.parserError('if true {\n}\nelse\n{ }',  'Please move open brace')
    $t.parserError('foreach [`a`] as $a\n{ }', 'Please move open brace')
    $t.parserError('fn fnn\n{ }',              'Please move open brace')


    $t.section('Parser Errors - Spaces')

    $t.parserError('fn(){}',         'space after `fn`')
    $t.parserError('fn foo () {}',   'space before `(`')
    $t.parserError('fn foo{}',       'space before `{`')
    $t.parserError('$a = fn() {}',   'space after `fn`')
    $t.parserError('fn foo {a = 1 }',     'space after `{`')

    $t.parserError('$z = x{$a > 1 }', 'space after `{`')
    $t.parserError('$z = x{ $a > 1}', 'space before `}`')
    $t.parserOk('$z = x{\n$a > 1\n}', 'newline after `{`')

    $t.parserError('( a + 1)',             'space after `(`')
    $t.parserOk('$a = (\n1 +\n2\n)',       'newline after `(`')
    $t.parserError('foo( )',               'space after `(`')
    $t.parserError('$a = [ ]',             'space after `[`')
    $t.parserError('$a = { }',             'space after `{`')
    $t.parserOk('$a = [\n]',               'space after `[`')
    $t.parserOk('$a = {\n}',               'space after `{`')
    $t.parserError('$a = $b[ 0]',           'space after `[`')
    $t.parserError('$a = $b[0 ]',           'space before `]`')
    $t.parserError('$a= 1+2',              'space before `=`')
    $t.parserError('$a =1+2',              'space after `=`')
    $t.parserError('$a = 1+ 2',            'space before `+`')
    $t.parserError('$a = 1 +2',            'space after `+`')
    $t.parserError('$a = 1 + - 2',         'space after `-`')
    $t.parserError('$a = {a:`b`}',         'space after `{`')
    $t.parserError('$a = { a:`b`}',        'space after `:`')
    $t.parserError('$a = { a : `b`}',      'space before `:`')
    $t.parserError('$a = [1,2,3]',         'space after `,`')
    $t.parserError('if(true) {}',          'space after `if`')
    $t.parserError('if ( true) {}',        'space after `(`')
    $t.parserError('if true{}',          'space before `{`')
    $t.parserError('fn foo { return(a) }', 'space after `return`')
    $t.parserError('$a,$b,$c',             'space after `,`')
    $t.parserError('$a? 1 : 2',            'space before `?`')
    $t.parserError('$a ?1 : 2',            'space after `?`')
    $t.parserError('$a ? 1: 2',            'space before `:`')
    $t.parserError('$a ? 1 :2',            'space after `:`')
    $t.parserError('if true :$a = 1',   'space before `:`')
    $t.parserError('if true:\n$a = 1',  'newline after `:`')
    $t.parserOk('$a = [1, 2, 3]',       'no padding inside `[...]`')
    $t.parserError('$a = [ 1, 2]',  'space after `[`')
    $t.parserError('$a = [1, 2 ]',      'space before `]`')

    $t.parserError('String .random(4)', 'space before `.`')
    $t.parserError('String. random(4)', 'space after `.`')
    $t.parserError('String.\n    random(4)', 'space after `.`')
    $t.parserOk('String\n    .random(4)', 'newline before `.`')

    $t.parserError('\tfoo()', 'tab character not supported')
    $t.parserError('$foo = \t123', 'tab character not supported')
    $t.parserError('\ntm fHtml {\n\t    Test\n}', 'tab character not supported')


    $t.section('Parser Errors - Templates')

    // TODO: there is a bug if a tm is the first line of source code
    $t.parserError('\ntm fHtml {<',                'newline')
    $t.parserError('\ntm fHtml {\n    ---$a = 1',        'space after `---`')
    $t.parserError('\ntm fHtml {\n    --- $a = \n}\n',       'Unexpected newline')
    $t.parserOk('\ntm fHtml {\n    {{5 }}\n}\n',     'space after `{{`')
    $t.parserOk('\ntm fHtml {\n    {{ 5}}\n}\n',     'space before `}}`')
    $t.parserError('\ntm fHtml {\n    {{ \n5 }}',    'unexpected newline')
    $t.parserError('\ntm fHtml {\n    <p class="foo>\n }',     'missing a closing quote')
    $t.parserError('\ntm fHtml {\n    <b>Hi</div>',    'expected `</b>`')
    $t.parserOk('\ntm fffHtml {\n    </>\n}\n',  'extra closing tag')
    $t.parserError('\ntm fHtml {\n    <p>\n    </>\n    </>}\n',  'extra closing tag')
    $t.parserOk('\ntm fHtml {\n    </b>\n}\n',  'named closing tag')
    $t.parserError('fn fHtml {\n    <',              'unexpected `<`', '')
    $t.parserError('\ntm fHtml {\n    <b>\n}', 'missing closing tag')
    $t.parserOk('\ntm fHtml {\n    <b>\n    </...>\n}', 'continue tag')
    $t.parserError('\ntm foo {\n',                   'missing type')
    $t.parserError('\ntm fHtml {\nTest\n}', 'should be indented')
    $t.parserError('\ntm {\nTest\n}', 'must have a name')


    $t.section('Parser Errors - Assignment as Expression')

    $t.parserError('$b = 1\n$a = $b = 3',        'assignment can not')
    $t.parserError('$b = 1\n$a = $b += 3',       'assignment can not')
    $t.parserError('$a = { b: $c = 1 }',           'assignment can not')
    $t.parserError('foo($a = 3)',               'assignment can not')
    $t.parserError('$a[$b = 3]',                   'assignment can not')
    $t.parserError('foreach $a = 3 as $b {}',      'assignment can not')
    $t.parserError('if $a = 3 {}',                 'assignment can not')
    $t.parserError('fn foo { return $a = 3\n }', 'assignment can not')


    $t.section('Parser Errors - Scope')

    $t.parserError('$a = $b + 1', 'unknown variable')
    $t.parserError('fn foo { }\nfn foo() { }', 'already defined')
    $t.parserError('fn foo { }\nfn fOo() { }', 'defined as `foo`')
    $t.parserError('fn foo($aa, $aa) { }', 'already defined')
    $t.parserError('fn foo($aa, $aA) { }', 'typo')

    $t.parserError('fn print() {}', 'core function')
    $t.parserError('fn finally() {}', 'reserved')
    $t.parserError('fn else() {}', 'reserved')

    $t.parserError('$a = 1\nfn foo {\nprint($a)\n}', 'unknown variable')


    // TODO: fix handling of closure variables
 //   $t.parserError('$f = fn foo() keep ($a) { }', 'unknown variable')



    $t.parserError('$a = $b[4]', 'unknown variable')
    $t.parserError('$fOo = 1\n$foO = 2', 'typo')
    $t.parserError('$a = $b + 1', 'unknown variable')
    $t.parserError('$a = $a + 1', 'unknown variable')
    $t.parserError('fOo()\nfn foo { }', 'typo', '')
    $t.parserError('fn main { }\n$a = 1', 'declared before functions')
    $t.parserError('@.a = 123', 'outside of an object')
    $t.parserError('$a = 1\n foreach [0] as $a {\n}', 'already defined')
    $t.parserError('foreach [0] as $a {\n}\nprint($a)', 'unknown variable')
    $t.parserError('try {\n}\ncatch $ex {\n}\nprint($ex)', 'unknown variable')
    $t.parserError('$a = 1\nforeach [0] as $a { }', 'already defined')
    $t.parserError('foreach [0] as $a/$a { }', 'already defined')
    $t.parserError('public foo() { }', 'Missing `fn` or `tm` keyword')

    $t.parserOk('foreach [] as $n: print($n)\n$b = 3', 'statement after one-liner foreach')
    $t.parserOk('if true: print(2)\n$b = 3', 'statement after one-liner if')
    $t.parserOk('fn outer {\n fn fnIn: print(2) \n$b = 3\n }', 'statement after one-liner fn')

    $t.section('Missing $')

    $t.parserError('tt = 123', 'use a variable')
    $t.parserError('$a = tt', 'use a variable')
    $t.parserError('tt #= 123', 'use a variable')
    $t.parserError('tt += 123', 'use a variable')
    $t.parserError('$a = tt - 3', 'use a variable')
    $t.parserError('$a = tt ~ `!`', 'use a variable')
    $t.parserError('$a = 3 - tt', 'use a variable')
    $t.parserError('$a = tt[3]', 'use a variable')
    $t.parserError('fn ff { return tt }', 'use a variable')
    $t.parserError('$a = [tt, 123]', 'use a variable')
    $t.parserError('$a = { b: tt }', 'use a variable')


    //$a = 3 - t
    //return t

     // TODO: this is a runtime error.  capture this at compileTime
    //$code = '$outer = 1\nfn()\fn fn() {\nprint($outer)\n}'
    //$t.parserError($code, 'unknown variable', '')

    return $t
}


fn testPerf($t) {

    if isPerfMode(): return $t

    $t.section('Performance')

    $numIters = 1000

    // make sure array access doesn't hit performance
    // 0.57 ms  0.04 MB
    Perf.start('test.perf.largeArray')
    $start = Perf.now()
    $nums = Math.range(1, $numIters)
    foreach $nums as $nn {
        $a = $nums[$nn]
    }
    $elapsed = Perf.now() - $start
    Perf.stop()
    $t.ok($elapsed <= 1, 'ArrayAccess loop ({} elements) took <= 1 ms'.fill($numIters))

    // 1 million = 40ms
    Perf.start('test.perf.rangeGenerator')
    $start = Perf.now()
    $gen = range(1, $numIters)
    foreach $gen as $n {
       // ...
    }
    Perf.stop()
    $elapsed = Perf.now() - $start
    $t.ok($elapsed <= 1, 'rangeGenerator loop ({} iters) took <= 1 ms'.fill($numIters))

    // 1 million = 8ms
    // Perf.start('test.perf.optimizedLoop')
    // $start = Date.unixTime(true)

    // foreach range(1, $numIters) as $n {
    //   // ...
    // }

    // Perf.stop()
    // $elapsed = Date.unixTime(true) - $start
    // $t.ok($elapsed <= 1, 'optimized loop ({0} iters) took <= 1 ms'.fill($numIters))

    return $t
}


fn testMisc($t) {

    $t.section('Result Objects')

    $okResult = Result.ok(123)
    $t.ok(!$okResult.getFailCode(), 'not ok')
    $t.ok($okResult.get() == 123, 'ok value')

    $failResult = Result.fail('testFail')
    $t.ok($failResult.getFailCode() == 'testFail', 'failCode')

    $t.dies(fn { $failResult.get() }, 'get failed result', 'in a failure state')


    $t.section('Shortcuts')

    $map = { str: 'abc def' }
    $map.str = .upperCase()
      .reverse()
    $t.ok($map.str == 'FED CBA', 'dot assign: $foo = .method()')

    return $t
}


fn testCustomModules($t) {

    $t.section('Modules')

    $t.ok(TestModule.bareFun('Joe') == 'bareFunction:Joe', 'module call - autoloaded')

    $t.ok(TestModule.testModuleVar() == 'moduleVar:mod', 'module var - inside access')
    $t.ok(TestModule.ModuleConstant == 'constant', 'module constant - outside access')

    $t.dies(fn {
        $a = TestModule.moduleVar
    }, 'Can`t read from outside', 'Can not read private')

    $t.dies(fn { TestModule.ModuleConstant = 'outsideChange' },
        'Can`t write from outside', 'Can not set field')
    $t.dies(fn { TestModule.changeConstantAndDie() }, 'Can`t change constant',
        'Can not re-assign to constant field')

    $t.dies(fn { TestModule.nonExportedFn() }, 'Can`t call non-exported',
        'Can not call non-public function')

    load('subDir/OtherModule')
    $t.ok(OtherModule.ok('Foo') == 'ok:Foo', 'import from subfolder')

    $t.dies(fn { load('http://tht-lang.org') }, 'import remote url',
        'Invalid character in `load` path')
    .dies(fn { load('../Foo') }, 'import with dots', 'Path for `load` can only be relative')
    .dies(fn { load('Foo%') }, 'import with illegal char', 'Invalid character in `load` path')
    .dies(fn { load('Foo.tht') }, 'import with tht extension', 'Please remove `.tht`')

    $t.ok(BaseObject.BaseModuleConstant == 'constant', 'constant from subfolder module')
    $t.dies(fn { TestModule.ConstantMap.Purple = 'xxx' }, 'can`t modify constant',
        'Can not modify read-only')

    // load modules with relative paths
    $t.ok(OtherModule.useAdjacent() == 'adjacent', 'call rel adjacent module')
    load('subDir/AdjacentModule')
    $t.ok(AdjacentModule.callUpperModule() == 'bareFunction:adj', 'call rel parent module')

    $t.dies(fn { load('subDir/Adjacentmodule') }, 'file name mismatch', 'Check exact spelling')

    return $t
}

fn testOop($t) {

    $t.section('Classes (OOP)')

    load('oop/BaseObject')

    // inits
    $b = BaseObject({ overrideInit: 333 })
    $t.ok($b.publicFn() == 'public', 'call public fn')
    $t.ok($b.overrideInit == 333, 'override field from init')
    $t.ok($b.overrideNew == 444, 'override field in new()')
    $t.ok($b.publicCallPrivate() == 'private', 'public calling private')
    $t.ok($b.getterVal == 'getter!', 'getter function - auto')
    $t.ok($b.getGetterVal() == 'getter!', 'getter function - direct')


    // public/private
    $t.dies(fn {
        $ba = BaseObject()
        $ba.privateVar = 999
    }, 'can not write to private field', 'Can not write directly to field')

    $t.dies(fn {
        $ba = BaseObject()
        $z = $ba.privateVar
    }, 'can not read private field', 'Can not read private field')

    $t.ok($b.publicVar == 'public', 'read public var')
    $t.dies(fn {
        $ba = BaseObject()
        $ba.publicVar = 'changed'
    }, 'can not write to field', 'Try: Using a setter function')

    $b = BaseObject({ privateNoInit: 'didInit' })
    $t.ok($b.readNoInit() == 'noInit', 'don`t initialize private field')

    // general errors
    $t.dies(fn { BaseObject({}, 'extra') }, 'expects only one argument',
        'Constructor expects only one argument')
    $t.dies(fn { BaseObject('non-map') }, 'first argument must be map',
        'First argument must be a Map')
    $t.dies(fn { BaseObject({ flag: 'true' }) }, 'init types must match',
        'Field `flag` must be of type `boolean`')
    $t.dies(fn { $b.privateFn() }, 'private function',
        'Can not call private method')
    $t.dies(fn { $b.newer = 123 }, 'can`t create field after construct',
        'can not be created after object is constructed')
    $t.parserError('class Foo {\n $a = 1\n}', 'assignment not allowed')
    $t.parserError('class Foo {\n foo()\n}', 'Invalid statement inside `class` block')
    $t.parserError('class Foo1 { }\n\n class F2 { }', 'Only one class allowed')


    load('oop/FactoryObject')
    $fo = FactoryObject({})
    $t.ok($fo.var == 789, 'factory created object')



    $t.section('OOP - Meta Methods')

    $b = BaseObject()
    $t.ok($b.zCallMethod('publicFn') == 'public', 'zCallMethod')
    $t.ok($b.zGetMethods().length() > 10, 'zGetMethods')


    // $t.section('OOP - Composition')

    // load('oop/ComposeParent')
    // load('oop/ComposeHelper')

    // $o = ComposeParent()
    // $t.ok($o.useHelper() == 'helper:111', 'default helper')

    // $o = ComposeParent({
    //     helper: ComposeHelper({ num: 999 })
    // })
    // $t.ok($o.useHelper() == 'helper:999', 'initialized helper')


    // $t.section('OOP - Embedded Object')

    // $t.ok($o.embeddedMethod() == 'embeddedMethod', 'embedded call')
    // $t.ok($o.embeddedField == 'embedded', 'embedded field')
    // $t.ok($o.val == 123, 'embedded field from init map')
    // $t.ok($o.useEmbedded() == 'embedded:123', 'embedded reference in base')
    // $t.dies(fn () keep($o) { $o.addConflict() }, 'conflicting method')

    return $t
}


fn testTypes($t) {

    $t.section('Types')

    $t.ok([].zClassName() == 'List', 'List')
    $t.ok({}.zClassName() == 'Map', 'Map')
    $t.ok('foo'.zClassName() == 'String', 'String')
    $n = 123
    $t.ok($n.zClassName() == 'Number', 'Number')
    $f = true
    $t.ok($f.zClassName() == 'Boolean', 'Boolean')
    $fnn = fn { }
    $t.ok($fnn.zClassName() == 'Function', 'Function')

    $t.ok(sql'abc'.zClassName() == 'SqlTypeString', 'SqlTypeString')

    $t.ok(r'a'.zClassName() == 'Regex', 'Regex')

    $t.ok(noReturn() == false, 'no return is false')


    load('oop/BaseObject')
    $b = BaseObject({})
 //   $t.ok($b.type() == 'object', 'object')


    $t.ok('abc'.zClassName() == 'String', 'class: String')
    $t.ok([1, 2, 3].zClassName() == 'List', 'class: List')
    $t.ok(html'abc'.zClassName() == 'HtmlTypeString', 'class: HtmlTypeString')
    $t.ok($b.zClassName() == 'BaseObject', 'class: Base')


    $t.section('Types - .equals')

    $t.ok('a'.equals('a'), 'string - true')
    $t.ok(!'a'.equals('b'), 'string - false')
    $t.ok(!'1'.equals(1), 'string to num - false')
    $t.ok(!'1'.equals(1 == 1), 'string to bool - false')
    $t.ok((false).equals(1 == 0), 'bool - true')

    $t.ok({}.equals({}), 'map to map - true')
    $t.ok({ a: 1 }.equals({ a: 1 }), 'map to map - true')
    $t.ok(!{ a: 1 }.equals({ a: 2 }), 'map to map - false')

    $t.ok({ a: 1, b: 2 }.equals({ b: 2, a: 1 }), 'map key order - true')

    $t.ok(![].equals({}), 'list to map - false')


    // Nope
    // $t.section('Math with Strings')

    // $t.ok('33' + 0.5 == 33.5, 'stringint + float')
    // $t.ok(0.5 + '33' == 33.5, 'float + stringint')
    // $t.ok(3 + '33' == 36, 'int + stringint')
    // $t.ok(3 + '33.3' == 36.3, 'int + stringfloat')
    // $t.ok(0.1 + '33.1' == 33.2, 'float + stringfloat')
    return $t
}


fn testFunctions($t) {

    $t.section('Functions')

    fn testFn {
        return 'yay'
    }
    $t.ok(testFn() == 'yay', 'no args')

    fn testA($arg) {
        return $arg ~ '!'
    }
    $t.ok(testA('hey') == 'hey!', 'with arg')

    fn testB($arg = 'default') {
        return $arg ~ '!'
    }
    $t.ok(testB() == 'default!', 'default')

    fn testSum {
        $asum = 0
        foreach Meta.getArgs() as $arg {
            $asum += $arg
        }
        return $asum
    }
    $sum = testSum(1, 2, 3, 4)
    $t.ok($sum == 10, 'variable args')


    fn withOp($foo, $bar = 'default') {
        return $bar
    }
    $r = withOp('hello', 'world')
    $t.ok($r == 'world', 'default, supplied')

    $r = withOp('hello')
    $t.ok($r == 'default', 'default, fallback')

    $outer = 'OUT'
    $funClosure = fn ($a) {
        return $a ~ '/' ~ $outer
    }
    $t.ok($funClosure('IN') == 'IN/OUT', 'closure')


    $outer = 'OUT'
    $funClosure2 = fn ($a) {
        $outer ~= '-append'
    }
    $funClosure2(1)
    $t.ok($outer == 'OUT-append', 'closure - modify outer')

    $outer = 'OUT'
    $fnNamed = fn someFun {
        return 123 ~ $outer
    }
    $t.ok($fnNamed() == '123OUT', 'named closure')






    fn addToList($list) {
        $list #= 4
    }
    $refList = [1, 2, 3]
    addToList($refList)
    $t.ok($refList.join() == '123', 'pass-by-copy - list')

    fn modNested($n) {
        $n.map.list[2] = 22222
    }
    $nested = {
        num: 111,
        map: { list: [1, 2, 3] },
    }
    modNested($nested)
    $t.ok($nested.map.list[2] == 2, 'pass-by-copy - nested')

    fn modTypeStr($ats) {
        return $ats.fill('FILLED')
    }
    $ts = html'<b>String {}</b>'
    $tsOk = modTypeStr($ts)
    $t.ok(!$ts.renderString().contains('FILLED'), 'pass-by-copy - typestring')
    $t.ok($tsOk.renderString().contains('FILLED'), 'pass-by-copy - typestring returned')



    $refList.reverse()
    $t.ok($refList[1] == 1, 'list.reverse - not changed in place')



    fn addToString($s) {
        $s ~= '4'
    }
    $refStr = '123'
    addToString($refStr)
    $t.ok($refStr.length() == 3, 'string - pass by ref - unchanged')


    $tm = tm fooHtml {
        <h1> Hello world!
    }
    $t.ok($tm().renderString().contains('</h1>'), 'anon template')

    $outer = 'OUTER'
    $tm = tm fooHtml {
        <h1> Hello {{ $outer }}!
    }
    $t.ok($tm().renderString().contains('OUTER!<'), 'anon template with closure vars')



    fn missingArgs($arg1, $arg2) {
    }
    $t.dies(x{ missingArgs(1) }, 'Missing argument - user function', 'Too few arguments')
    $t.dies(x{ File.read() }, 'Missing argument - module', 'Too few arguments')


    $t.ok(testDefaultMap().a == 123, 'map as default arg')
    $t.ok(testDefaultMap({ a: 345 }).a == 345, 'map as default arg - with passed arg')

    $t.ok(testDefaultList()[2] == 'b', 'list as default arg')
    $t.ok(testDefaultList(['x', 'y', 'z'])[2] == 'y', 'list as default arg - with passed arg')

    $t.ok(testDefaultMaps().a == 'aa', 'multiple default args as maps')
    $t.ok(testDefaultMaps().m2.b == 'bb', 'multiple default args as maps')

    $t.parserError('fn foo { }\n $a = 1', 'top-level')
    $t.parserError('fn { }', 'must have a name')

    // argument checking

    $t.section('Function - Argument Checking')

    $t.ok($t.checkArgs('s', 'x'), 'string')
    $t.ok($t.checkArgs('S', ''), ' empty string')
    $t.ok($t.checkArgs('n', 123), 'number')
    $t.ok($t.checkArgs('l', []), 'list')
    $t.ok($t.checkArgs('b', 1 == 0), 'boolean')
    $t.ok($t.checkArgs('m', {}), 'map')
    $t.ok($t.checkArgs('snl', '0', 0, []), 'multi: string, number, list')


    $t.dies(fn { $t.checkArgs('i', 1, 2) }, 'Too many args', 'expects 1 argument')

    $t.dies(fn { $t.checkArgs('m', []) }, 'Expect map.  Got List.', 'to be a `map`')
    $t.dies(fn { $t.checkArgs('m', 'x') }, 'Expect map. Got String', 'to be a `map`')
    $t.dies(fn { $t.checkArgs('m', 123) }, 'Expect map. Got Number', 'to be a `map`')
    $t.dies(fn { $t.checkArgs('m', 1 == 1) }, 'Expect map. Got Boolean', 'to be a `map`')

    $t.ok($t.checkArgs('s', 123), 'Number as string')
    $t.dies(fn { $t.checkArgs('n', '123') }, 'String as number', 'to be a `number`')

    $t.dies(fn { $t.checkArgs('snl', [], 123, []) }, 'Multi (snl): bad #1', 'be a `string`')
    $t.dies(fn { $t.checkArgs('snl', 'x', '123', []) }, 'Multi (snl): bad #2', 'be a `number`')
    $t.dies(fn { $t.checkArgs('snl', 'x', 123, 'x') }, 'Multi (snl): bad #3', 'be a `list`')

    $t.dies(fn { $t.checkArgs('s', '') }, 'Empty string')

    $t.dies(fn { $t.checkArgs('i', 3.0) }, 'No float for int', 'toInt')
    $t.dies(fn { $t.checkArgs('I', -3) }, 'Positive int: -3', 'negative')
    $t.ok($t.checkArgs('I',  3), 'Positive int: 3 (ok)')
    $t.ok($t.checkArgs('I',  0), 'Positive int: 0 (ok)')

    // $t.ok($t.checkArgs('f', -someFlag), 'Flag ok')
    // $t.dies(fn { $t.checkArgs('f', '-notflag') }, 'Expect flag. Got String', 'to be a `-flag`')
    // $t.dies(fn { $t.checkArgs('f', 1 == 1) }, 'Expect flag. Got Boolean', 'to be a `-flag`')
    $t.parserError('foo(true)', 'Can not use a Boolean')

    $a = [1, 2, 3]
    $t.ok(spread(...$a) == '1:2:3', 'spread operator (...)')


    $t.section('Function - Expression Syntax (Lambdas)')

    $fx = x{ $a + 1 }
    $t.ok($fx(2) == 3, 'basic syntax')
    $fxs = [
        x{ $a + 10 },
        x{ $a + 100 },
    ]
    $t.ok($fxs[1](3) == 13, 'expressions in list')
    $t.ok($fxs[2](3) == 103, 'expressions in list')

    $ex = x{
        $a >= 20
    }
    $fxFilter = [10, 20, 30].filter($ex).join('/')
    $t.ok($fxFilter == '20/30', 'multiline lambda')

    $fxJoin = [1, 2, 3].map(x{ $a + 6 }).join('')
    $t.ok($fxJoin == '789', 'functional usage')

    return $t
}


fn testTypeDeclarations($t) {

    $t.section('Functions - Type Declarations')

    $t.ok(takesString('a'), 'string')
    $t.ok(takesString(''), 'string - ``')
    $t.dies(fn { takesString() }, 'string - none', 'Too few arguments')

    $t.ok(takesInt(1), 'int - 1')
    $t.ok(takesInt(0), 'int - 0')

    $t.ok(takesFloat(1), 'float - 1')
    $t.ok(takesFloat(1.1), 'float - 1.1')
    $t.ok(takesFloat(-1.1), 'float - -1.1')

    $t.ok(takesBool(1 == 1), 'boolean - 1')
    $t.ok(takesBool(1 == 0), 'boolean - 1')

    $t.ok(takesMap({ a: 1 }), 'map - map')
    $t.ok(takesMap({}), 'map - empty map')

    $t.ok(takesList(['a']), 'list - list')
    $t.ok(takesList([]), 'list - empty list')

   // $t.ok(takesFlag(-someFlag), 'flag')

    $t.ok(takesFunction(fn { return 1 }), 'fn - function')
    $f = fn { }
    $t.ok(takesFunction($f) == false, 'fn - empty block')

    $t.ok(takesObject($t), 'object')
    $t.ok(takesObject({ a: 1 }), 'object - map')

    $t.ok(takesAny(1), 'any - int')
    $t.ok(takesAny('a'), 'any - string')
    $t.ok(takesAny({}), 'any - map')

    $t.ok(takesStringDefault() == 'default', 'default')
    $t.ok(takesMultipleDefault(3) == '3,default', 'multiple')
    $t.ok(takesMultipleDefault(5, 'a') == '5,a', 'multiple, default')

    // Built-in type checking
    // Error messages differ in PHP 8, where they are a bit more consistent
    $t.dies(fn { takesString(123) }, 'string - num', 'type string')
    $t.dies(fn { takesString(1 == 1) }, 'string - bool', 'type string')
    $t.dies(fn { takesString([]) }, 'string - list', 'type string')
    $t.dies(fn { takesFloat('1.1') }, 'float - string', 'type float')
    $t.dies(fn { takesBool(1) }, 'boolean - 1', 'type bool')
    $t.dies(fn { takesBool(0) }, 'boolean - 0 ', 'type bool')
    $t.dies(fn { takesBool('') }, 'boolean - ``', 'type bool')
    $t.dies(fn { takesMap(['a']) }, 'map - list', 'o\OMap')
    $t.dies(fn { takesList({ a: 1 }) }, 'list - map', 'o\OList')
    $t.dies(fn { takesObject(1) }, 'object - number', 'object')

    $t.dies(fn { 'abc'.getChar(1.5) }, 'stdlib args: integer', 'be a `integer`')
    $t.dies(fn { 'abc'.limit(-3) }, 'stdlib args: positive integer', 'be a `positive integer`')

    return $t
}

fn takesString($val:s) {
    return true
}

fn takesBool($val:b) {
    return true
}

fn takesInt($val:n) {
    return true
}

fn takesFloat($val:n) {
    return true
}

fn takesList($val:l) {
    return true
}

fn takesMap($val:m) {
    return true
}

// fn takesFlag($val:f) {
//     return true
// }

fn takesFunction($fnCallback:fn) {
    return $fnCallback()
}

fn takesAny($val:any) {
    return true
}

fn takesObject($val:o) {
    return true
}

fn takesStringDefault($val:s = 'default') {
    return $val
}

fn takesMultipleDefault($num:n, $str:s = 'default') {
    return $num ~ ',' ~ $str
}

fn testMaps($t) {

    $t.section('Maps')

    $user = { name: 'Drac', age: 500, friends: [{ name: 'Igor' }] }

    $t.ok($user['name'] == 'Drac', 'bracket')
    $t.ok($user.get('name') == 'Drac', 'get')
    $t.ok($user.length() == 3, 'length')
    $t.ok($user.get('foo', 'bar') == 'bar', 'default')
    $t.ok($user.get(['friends', 1, 'name']) == 'Igor', 'chained')
    $t.ok($user['friends'][1]['name'] == 'Igor', 'chained brackets')
    $t.ok($user.get(['friends', 2, 'name'], '') == '', 'chained - missing value')

    $user['height'] = '6ft'
    $t.ok($user.get('height') == '6ft', 'put')
    $mapNum = { name: 'Frank', age: 8 }
    $t.ok($mapNum.get('age') == 8, 'numeric val')
    $mlmap = {
        name: 'Joe',
        id: 12345,
    }
    $t.ok($mlmap.id == 12345, 'multiline map')
    $t.parserError('{ a: 1, b: 2, }', 'trailing comma')

    $mlmap['foo'] ||= 33
    $t.ok($mlmap.foo == 33, 'default assign')

    $t.parserError('$dyn = `x`\n$dm = { $dyn: 123 }', 'not allowed as Map key')
    $t.parserError('$m = { a: 1,\nb: 2 }', 'add a comma')
    $t.parserError('$m = {\n a: 1\n }', 'add a comma')


    $map = { a: { b: 1 }, x: { y: 2 } }
    $map.x.y = 99
    $t.ok($map.x.y == 99, 'deep assignment')


    $t.section('Maps - dot access')

    $t.ok($user.name == 'Drac', 'dot access')
    $t.dies(fn { $n = $user.nameX }, 'dot access - missing field dies', 'Field does not exist')


    $t.section('Maps - Missing values')

    $empty = { foo: 1 }
    $t.ok($empty['missing'] ~ 'yo' == 'yo', 'empty concat')
    $t.ok($empty['missing'] == '', 'empty string')
    $t.ok(!$empty['missing'] == true, 'empty bool')
    $empty['def'] ||= 'default'
    $t.ok($empty['def'] == 'default', 'empty or assign')


    // suggest key(case)
    $t.dies(fn {
        $m = { name: 'foo' }
        $n = $m.Name
    }, 'Try: `name`', 'Try: \`name\`')

    $t.section('Maps - Explicit default')

    $dmap = { foo: 1 }.default('HAY')
    $t.ok($dmap['missing'] == 'HAY', 'Map default - not found')
    $t.ok($dmap['foo'] == 1, 'Map default - found')

    $countMap = {}.default(0)
    $countMap['a'] += 100
    $t.ok($countMap.a == 100, 'numeric default')


    $t.section('Maps - Methods')

    $map = { a: 1, b: 2 }

    $t.ok($map.hasKey('b'), 'hasKey true')
    $t.ok(!$map.hasKey('z'), 'hasKey false')

    $t.ok($map.hasValue(2), 'hasValue true')
    $t.ok(!$map.hasValue(99), 'hasValue false')

    $t.ok($map.keys().join('|') == 'a|b', 'keys')
    $t.ok($map.values().join('|') == '1|2', 'values')

    $map.renameKey('b', 'c')
    $t.ok($map['c'] == 2, 'renameKey')

    $map = { a: 1, b: 2 }


    // copy / isempty
    $map2 = $map.copy()
    $map2['b'] = 3
    $t.ok($map.b == 2, 'copy')
    $t.ok($map2.b == 3, 'copy')
    $t.ok(!$map2.isEmpty(), 'not isEmpty')
    $map2.clear()
    $t.ok($map2.isEmpty(), 'clear / isEmpty')

    // remove
    $t.ok($map.remove('b') == 2, 'delete - key exists')
    $t.ok($map.remove('Z') == '', 'delete - key nonexistent')
    $t.ok($map.keys().length() == 1, 'delete - modified map')

    // reverse
    $map = { a: 1, b: 2, c: 1 }
    $flipped = $map.reverse()
    $t.ok($flipped['1'] == 'c', 'reverse')
    $t.ok($flipped['2'] == 'b', 'reverse')
    $t.ok($flipped.length() == 2, 'reverse length')

    // slice
    $map = { a: 1, b: 2, c: 3 }
    $t.ok($map.slice(q[b c]).c == 3, 'slice()')
    $t.ok($map.slice(q[b c]).keys().join(':') == 'b:c', 'slice() keys')
    $t.ok($map.slice(q[a z]).z == '', 'slice() with missing key')

    // merge
    $merged = $map.merge({ b: 8, d: 9 })
    $t.ok($merged.toList().join(',') == 'a,1,b,8,c,3,d,9', 'merge')

    $m1 = {
        outer1: {
            inner1: 111,
            changeMe: 333,
        },
    }
    $addIn = {
        outer1: {
            inner1b: [1],
            changeMe: 999,
        },
        outer2: {
            inner2: 222,
        },
    }
    $m2 = $m1.merge($addIn, -deep)
    $t.ok($m2.outer1.changeMe == 999, 'merge deep')
    $t.ok($m2.outer2.inner2 == 222, 'merge deep')
    $t.ok($m2.outer1.inner1 == 111, 'merge deep')

    $m1 = { a: { z: 1 } }
    $m2 = $m1.merge({ a: { x: 99 } })
    $t.ok($m2.a.x == 99 && !$m2.a['z'], 'merge - flat')



    // Truthiness

    $isTrue = true
    if {}: $isTrue = false
    $t.ok($isTrue, 'empty map is falsey')

    $isTrue = false
    if !{}: $isTrue = true
    $t.ok($isTrue, 'empty map negated is truthy')

    $isTrue = false
    if { a: 1 }: $isTrue = true
    $t.ok($isTrue, 'map with key is truthy')

    $t.ok({ a: 1 } || false, '{ a: 1 } || false == truthy')
    $t.ok(!({} && true), '!({} && true) == truthy')

    $v = {}
    $v ||= 123
    $t.ok($v == 123, '{} ||= 123')
    $v = {}
    $v &&= 123
    $t.ok($v.isMap(), '{} &&= 123')

    $v = { a: 99 }
    $v ||= 123
    $t.ok($v.isMap(), '{ a: 99 } ||= 123')
    $v = { a: 99 }
    $v &&= 123
    $t.ok($v == 123, '{ a: 99 } &&= 123')

    $t.ok({ a: 123 }.keyOf(123) == 'a', 'keyOf - found')
    $t.ok({ a: 123, b: 123 }.keyOf(123) == 'a', 'keyOf - found first')
    $t.ok({}.keyOf('VAL') == '', 'keyOf - not found')


    $t.section('Maps - Misc Errors')

    $t.dies(fn { {}.merge(['a']) }, 'Map.merge(<list>)', 'to be a \`map\`')

    $t.parserError('$a = {}\n$b = $a.$a', 'square brackets')


    $t.section('Lists & Maps')

    $t.ok([].isEmpty(), 'empty list')
    $t.ok({}.isEmpty(), 'empty map')
    $t.ok(![1, 2, 3].isEmpty(), 'non-empty list')
    $t.ok(!{ foo: 0 }.isEmpty(), 'non-empty map')


    // Deep copy List
    $nested = [1, [2, 3], { a: 4 }, { l: [5, 6] }]
    $dcopy = $nested.copy()

    $dcopy[1] += 1
    $dcopy[2][1] += 1
    $dcopy[3].a += 1
    $dcopy[4].l[2] += 1

    $njson = Json.encode($nested)

    $njson = Json.encode($nested).renderString()
    $dcJson = Json.encode($dcopy).renderString()

    $t.ok($njson == '[1,[2,3],{"a":4},{"l":[5,6]}]', 'deep copy - list - orig unchanged')
    $t.ok($dcJson == '[2,[3,3],{"a":5},{"l":[5,7]}]', 'deep copy - list - modified copy')


    // Deep copy Map
    $nestMap = { a: 1, l: [2, 3], m: { a: [4, 5] } }
    $mapCopy = $nestMap.copy()

    $mapCopy.a += 1
    $mapCopy.l[2] += 1
    $mapCopy.m.a[2] += 1
    $mapCopy.m['b'] = 9

    $mapJson = Json.encode($nestMap).renderString()
    $copyJson = Json.encode($mapCopy).renderString()

    $t.ok($mapJson == '{"a":1,"l":[2,3],"m":{"a":[4,5]}}', 'deep copy - map - orig unchanged')
    $okJson = '{"a":2,"l":[2,4],"m":{"a":[4,6],"b":9}}'
    $t.ok($copyJson == $okJson, 'deep copy - map - modified copy')


    // Deep copy by reference
    $nestMap = { a: 1, l: [2, 3], m: { a: [4, 5] } }
    $mapRefCopy = $nestMap.copy(-refs)
    $mapRefCopy.m.a[1] = 99
    $t.ok($nestMap.m.a[1] == 99, 'copy by reference - map')

    $nestList = [1, [2, 3], { a: 4 }, { l: [5, 6] }]
    $listRefCopy = $nestList.copy(-refs)
    $listRefCopy[4].l[2] = 999
    $t.ok($nestList[4].l[2] == 999, 'copy by reference - list')


    // Enums

    $enum = { lower, Upper, N500 }
    $t.ok($enum.lower == 'lower', 'enum - lower key')
    $t.ok($enum.Upper == 'Upper', 'enum - Upper key')
    $t.ok($enum.N500 == 'N500', 'enum - number')


    $t.section('Maps - Equals')

    $t.ok(!({ a: 1, b: 2 } == { a: 1, b: 2 }), '== - false')
    $t.ok({ a: 1, b: 2 }.equals({ a: 1, b: 2 }), 'equals - true')
    $t.ok(!{ a: 1, b: 2 }.equals({ a: 1, b: 2, c: 3 }), 'equals - false')
    $t.ok({ a: 1, b: { c: 3 } }.equals({ a: 1, b: { c: 3 } }), 'equals nested map - true')
    $t.ok(!{ a: 1, b: { c: 3 } }.equals({ a: 1, b: { c: 4 } }), 'equals nested map - false')
    $t.ok(!{ 0: 'a', 1: 'b' }.equals(['a', 'b']), 'equals similar list - false')

    $m = {
        a: 123,
        doSomething: fn { return 'fn:' ~ @.a },
        short: x{ @.a + 1 },
    }
    $t.ok($m.doSomething() == 'fn:123', 'added closure to map')
    $t.ok($m.short() == 124, 'added x-function to map')

    $t.section('Maps - Option Maps')

    $ops = { num: 123, bool, str: 'hello' }
    $ops.check({ num: 0, bool: false, str: 'default' })

    $t.ok($ops.bool == true && $ops.str == 'hello', 'option map')

    $ops = { num: 123 }
    $t.dies(fn { $ops.check({ numX: 0 }) }, 'invalid option map key')

    $ops = { num: 123 }
    $t.dies(fn { $ops.check({ num: 'foo' }) }, 'must be of type `string`')

    return $t
}

fn testMathAndLogic($t) {

    $t.section('Math operators')

    $a = 2
    $b = $a + 1 + 2
    $c = $a * 3 + 1
    $d = $a / 2
    $e = 5 % 2
    $f = 3 + -1
    $g = -1 + -1
    $h = 2 ** 4

    $t.ok($a ==  2, 'assign')
    $t.ok($b ==  5, 'add')
    $t.ok($c ==  7, 'mult, add')
    $t.ok($d ==  1, 'divide')
    $t.ok($f ==  2, 'plus negative')
    $t.ok($h == 16, 'exponent')

    $t.ok(5 % 3 ==  2, 'modulo')
    $t.ok(5 % -3 ==  2, 'modulo negative right')
    $t.ok(-5 % 3 ==  -2, 'modulo negative left')
    $t.ok(-5 % -3 ==  -2, 'modulo negative both')


    $fp = 1.1 + 2.2
    $t.ok($fp > 3.2 && $fp < 3.4, 'floating point')

    $t.ok(1_000_000 + 2_000 == 1_002_000, '_ separator')


    $t.ok(2 + 2 * 3 == 8, 'multiply/add precendence')
    $t.ok(2 * 2 ** 3 == 16, 'exponent precendence')


    $t.section('Strict Math')

    $t.dies(x{ 'a' + 2 }, 'Add string to number', 'must be a number')
    $t.dies(x{ '2' + 2 }, 'Add numeric string to number', 'must be a number')
    $t.dies(x{ 2 + 'b' }, 'Add number to string', 'must be a number')
    $t.dies(x{ 'a' * 2 }, 'Multiply string', 'must be a number')
    $t.dies(x{ 'a' % 2 }, 'Modulo string', 'must be a number')
    $t.dies(x{ true + 2 }, 'Add boolean to number', 'must be a number')
    $t.dies(x{ {} + 2 }, 'Add Map to number', 'must be a number')
    $t.dies(fn {
        $aa = 1
        $aa += 'v'
    }, '+= string', 'must be a number')
    $t.dies(x{ 2 ** 'a' }, 'number ** string', 'must be a number')
   // $t.dies(fn { return 2 / 0 }, 'divide by zero', 'division by zero')


    $t.section('Hex & Binary Numbers')

    $t.ok(0b10111 == 23, 'binary')
    $t.ok(0b10111 * 2 == 46, 'binary * dec')

    $t.ok(0x1f == 31, 'hex')
    $t.ok(0x1f * 2 == 62, 'hex * dec')

    $t.ok(0123 == 123, 'no octal leading zero')


    $t.section('Truth')


    $true = true
    $false = false

    $t.ok(!$false, '! false')
    $t.ok($true, 'true')
    $t.ok($true || $false, '||')
    $t.ok($true && $true, '&&')
    $t.ok(!($true && $false), '! &&')
    $t.ok(!($false || $false), '! ||')


    $t.section('Positive/Negative')

    $t.ok(-1 < 1, '< negative')
    $t.ok(1 > -1, '> negative')
    $t.ok(2 * -1 == -2, 'times negative')
    $t.ok(+2 + +2 == 4, 'unary plus')


    $t.section('Comparison')

    $t.ok(1 == 1, '==')
    $t.ok(0 == 0.0, '0 == 0.0')
    $t.ok(1 == 1.0, '1 == 1.0')
    $t.ok(1 != 2, '!=')
    $t.ok(1 < 2, '<')
    $t.ok(2 > 1, '>')
    $t.ok(4 >= 3, '>= gt')
    $t.ok(2 <= 3, '<= lt')
    $t.ok(3 >= 3, '>= eq')
    $t.ok(3 <= 3, '<= eq')

    $t.ok(4 <=> 2 == 1, '<=> = 1')
    $t.ok(2 <=> 4 == -1, '<=> = -1')
    $t.ok(2 <=> 2 == 0, '<=> = 0')
    $t.ok(2.1 <=> 2.0 == 1, '<=> float = 1')
    $t.ok(2.0 <=> 2.1 == -1, '<=> float = -1')
    $t.ok(2.0 <=> 2.0 == 0, '<=> float = 0')

    $str = 'moo'
    $t.ok($str <=> 'zoo'    == -1, '<=> string -')
    $t.ok($str <=> 'abcdef' ==  1, '<=> string +')
    $t.ok($str <=> 'moo'    ==  0, '<=> string =')

    $t.section('Strict Comparison')

    $t.dies(x{ 1 > 'a' }, 'number > string', 'must be of the same type')
    $t.dies(x{ 2 > '1' }, 'number > numeric string', 'must be of the same type')
    $t.dies(x{ 'a' <= 1 }, 'string <= number', 'must be of the same type')

    $t.dies(x{ 1 > true }, 'number <= boolean', 'must be a number or string')
    $t.dies(x{ 0 > [] }, 'number <= list', 'must be a number or string')

    $t.ok('' != false, '`` != false')
    $t.ok(0 != false, '0 != false')
    $t.ok('0' != 0, '`0` == 0')
    $t.ok(1 != true, '1 != true')
    $t.ok(true != [1], 'true != list')
    $t.ok(false != [], 'false != empty list')


    $t.section('Math Assignment')

    $aa = 10
    $aa += 10
    $t.ok($aa == 20, '+=')
    $aa *= 2
    $t.ok($aa == 40, '*=')
    $aa -= 30
    $t.ok($aa == 10, '-=')
    $aa /= 2
    $t.ok($aa == 5, '/=')
    $aa **= 2
    $t.ok($aa == 25, '**=')


    $t.section('Float & Ints')

    $t.ok(5 == 5.0, '5 == 5.0')
    $t.ok(1 + 2.0 == 3, '1 + 2.0 == 3')
    $t.ok(1 + 2.0 == 3.0, '1 + 2.0 == 3.0')
    $t.ok(1.0 + 2.0 == 3.0, '1.0 + 2.0 == 3.0')
    $t.ok(1.11111 + 2.22222 == 3.33333, '1.11111 + 2.22222 == 3.33333')

    return $t
}



fn testLoops($t) {

    $t.section('Loops')

    $s = ''
    foreach range(1, 3) as $i {
        $s ~= $i
    }
    $t.ok($s == '123', 'foreach, range')

    $s = ''
    foreach range(5, 1) as $i {
        $s ~= $i
    }
    $t.ok($s == '54321', 'desc range')

    $s = ''
    foreach range(0, 8, 2) as $i {
        $s ~= $i
    }
    $t.ok($s == '02468', 'range step 2')


    $s = ''
    $nums = [1, 2, 3, 4, 5]
    foreach $nums as $n {
        $s ~= $n
    }
    $t.ok($s == '12345', 'foreach, list')
    $s = ''
    foreach $nums as $n {
        $s ~= $n
    }
    $t.ok($s == '12345', 'foreach, list - second time (reset)')



    $pairs = { a: 1, b: 2, c: 3 }
    $s = ''
    foreach $pairs as $letter/$number {
        $s ~= $number ~ $letter
    }
    $t.ok($s == '1a2b3c', 'foreach, map')

    $s = ''
    foreach $pairs as $letter/$number {
        $s ~= $number ~ $letter
    }
    $t.ok($s == '1a2b3c', 'foreach, map - second time (reset)')


    $s = ''
    foreach range(7, 9) as $i/$num {
        $s ~= $i ~ $num
    }
    $t.ok($s == '172839', 'foreach, range with index')

    $s = ''
    foreach [4, 5, 6] as $i/$num {
        $s ~= $i ~ $num
    }
    $t.ok($s == '142536', 'foreach, list with index')




    $i = 0
    $s = ''
    loop {
        $i += 1
        $s ~= $i
        if $i == 3: break
    }
    $t.ok($s == '123', 'loop - break')

    $i = 0
    $s = ''
    loop {
        $i += 1
        if $i == 4: continue
        $s ~= $i
        if $i == 5: break
    }
    $t.ok($s == '1235', 'loop - continue')


    $i = 0
    foreach [11, 22, 33] as $n {
        $i = $n
        if $n > 20: break
    }
    $t.ok($i == 22, 'foreach - break')

    $i = 0
    foreach [11, 22, 33] as $n {
        $i = $n
        if $n > 20: continue
    }
    $t.ok($i == 33, 'foreach - continue')


    $t.parserError('loop {\n$a = 1\n}\n', 'needs a \'break\'')
    $t.parserError('loop {\nloop { break }\n}\n', 'needs a \'break\'')
    $t.parserOk('loop {\nloop { break }\nbreak }\n', 'nested breaks')
    $t.parserOk('fn go { loop {\nreturn\n}\n }', 'return instead of break')

    $t.parserError('$a = 1\nbreak', '`break` not allowed')
    $t.parserError('$a = 1\ncontinue', '`continue` not allowed')

    return $t
}



fn testControlFlow($t) {


    $t.section('Short Circuiting')

    $fn1 = x{ 1 }
    $fn0 = x{ 0 }
    $fnDie = fn { die('Do not reach here!') }

    $b = $fn1() || $fnDie()
    $t.ok($b == true, 'or')

    $b = $fn0() && $fnDie()
    $t.ok($b == false, 'and')

    $b = $fn1() ||: $fnDie()
    $t.ok($b == 1, 'valgate or')

    $b = $fn0() &&: $fnDie()
    $t.ok($b == 0, 'valgate and')

    $b = $fn1() &&: $fn0() &&: $fnDie()
    $t.ok($b == 0, 'valgate and+and')

    $b = $fn0() ||: $fn1() ||: $fnDie()
    $t.ok($b == 1, 'valgate or+or')


    $t.section('Logic Assignment')
    $a = 0 ||: 5
    $t.ok($a == 5, '||: false')
    $a = 2 ||: 5
    $t.ok($a == 2, '||: true')
    $a = 0 &&: 5
    $t.ok($a == 0, '&&: false')
    $a = 2 &&: 5
    $t.ok($a == 5, '&&: true')
    $a = 0 ||: 2 &&: 4
    $t.ok($a == 4, '||: &&:')
    $a = 1 &&: 0 ||: 5
    $t.ok($a == 5, '&&: ||:')
    $a = 0 ||: '' ||: 6
    $t.ok($a == 6, '||: ||:')
    $a = 1 &&: 2 &&: 3
    $t.ok($a == 3, '&&: &&:')
    $a = 1
    $a &&= 5
    $t.ok($a == 5, '&&= true')
    $a = 0
    $a &&= 3
    $t.ok($a == 0, '&&= false')
    $a = 0
    $a ||= 2
    $t.ok($a == 2, '||= true')
    $a ||= 3
    $t.ok($a == 2, '||= false')


    $t.section('if/else')

    $a = 1

    if true: $a = 2
    $t.ok($a == 2, 'if true')

    if false: $a = 3
    $t.ok($a == 2, 'if false')

    if false {
        $a = 3
    } else {
        $a = 4
    }
    $t.ok($a == 4, 'else')

    if false {
        $a = 3
    } else if true {
        $a = 5
    }
    $t.ok($a == 5, 'else if')

    if false {
        $a = 3
    } else if false {
        $a = 5
    } else if false {
        $a = 9
    } else {
        $a = 6
    }
    $t.ok($a == 6, 'if, else if, else')


    $fnOneLine = fn ($x) {
        if $x == 1:      return 10
        else if $x == 2: return 20
        else if $x == 3: return 30
        else:            return 40
    }

    $t.ok($fnOneLine(1) == 10, 'one-liner if/else (if)')
    $t.ok($fnOneLine(2) == 20, 'one-liner if/else (else if)')
    $t.ok($fnOneLine(3) == 30, 'one-liner if/else (else if)')
    $t.ok($fnOneLine(4) == 40, 'one-liner if/else (else)')


    $t.section('Match')

    $fnMatch  = fn ($z) {

        match $z {
            'foo'            { return 'string' }
            r'reg'           { return 'regex' }
            ['a', 'b']       { return 'list' }
            $z.length() > 4  { return 'expr' }
            default          { return 'default' }
        }
    }

    $t.ok($fnMatch('foobar') == 'expr', 'expr')
    $t.ok($fnMatch('foo') == 'string', 'string')
    $t.ok($fnMatch('regex') == 'regex', 'regex')
    $t.ok($fnMatch('none') == 'default', 'default')
    $t.ok($fnMatch('b') == 'list', 'list')

    $fnMatchOneLine  = fn ($y) {
        match {
            $y == 1: return 10
            $y == 2: return 20
            default: return 30
        }
    }

    $t.ok($fnMatchOneLine(1) == 10, 'match - no subject - one-line')
    $t.ok($fnMatchOneLine(2) == 20, 'match - no subject -  one-line')
    $t.ok($fnMatchOneLine(3) == 30, 'match - no subject -  one-line')


    $fnMatchMissing = fn ($z) {
        match $z {
            'foo' { return 'string' }
        }
    }
    $t.dies(fn { $fnMatchMissing(1) }, 'did not match any of the conditions')


    $t.section('Misc')

    $ex = false
    $fin = false
    try {
        die('ERROR!')
    } catch $err {
        $ex = $err
    } finally {
        $fin = true
    }

    $t.ok($ex.message() == 'ERROR!', 'try/catch thrown')
    $t.ok($fin, 'try/catch - finally')

    $fileEx = false
    try {
        File.read('sdfsdfsdf')
    } catch $e {
        $fileEx = $e.message()
    }
    $t.ok($fileEx.contains('Path does not exist'), 'catch File exception')

    $t.section('Other Operators')

    $t.ok(2 > 1 ? true : false, 'ternary - true')
    $t.ok(1 > 2 ? false : true, 'ternary 0 false')

    $ifDo = 1
    if true: $ifDo = 2
    $t.ok($ifDo == 2, 'one-liner - true')
    if false: $ifDo = 9
    $t.ok($ifDo == 2, 'one-liner - false')

    return $t
}

fn testValidator($t) {

    $t.section('Validate - Vars')

    $t.parserOk('$if = 1', 'keyword as var: $if')
    $t.parserOk('$fn = fn { return 1 }', 'keyword as var: $if')

    $t.parserError('$UpperCase = 123', 'lower camelCase')
    $t.parserError('$ = 123', 'missing a name')
    $t.parserError('$1 = 123', 'start with a letter')
    $t.parserError('$$ = 123', 'one `$` prefix')
    $t.parserError('$foo_bar = 123', 'no underscores')
    $t.parserError('$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1', 'or less')


    $t.section('Validate - Words')

    $t.parserError('$foo.foo_bar = 1', 'underscore')
    $t.parserError('$foo.A = 1', '1 character')
    $t.parserError('$foo.a$a = 1', 'can not contain a `$`')
    $t.parserError('$a.goHTML', 'pure lowerCamelCase')
    $t.parserError('$a.UPPER', 'camelCase')
    $t.parserError('fn DoSomething {}', 'pure lowerCamelCase')
    $t.parserError('$a.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = 1', 'or less')

    return $t
}


fn testStrings($t) {

    $t.section('Strings')

    $stra = '456789'
    $t.ok($stra.getChar(-1) == '9', 'substring index')
    $t.ok('abc'[1] == 'a', 'subscript []')
    $t.ok('abc'[10] == '', 'subscript [] - out of bounds')
    $t.ok('abc'[-1] == 'c', 'subscript [-1]')
    $t.dies(fn { 'abc'[0] = 123 }, 'Can not use `[]`', 'Can not use `[]`')


    $t.section('Multiline Strings')

    $ml = '''
        this is a
        multiline
        string.
    '''
    $t.ok($ml.contains('multiline\nstring'), 'multiline with indent')



    $t.section('String Concatenation')

    $t.ok('a' ~ 'b' == 'ab', 'a ~ b')
    $t.ok('a' ~  1  == 'a1', 'a ~ 1')
    $t.ok(1.2  ~ 'b' == '1.2b', '1.2 ~ b')
    $t.ok(true ~ '!' == 'true!', 'true ~ !')
    $t.ok(false ~ '!' == 'false!', 'false ~ !')

    $t.dies(x{ 'foo' + 'bar' }, 'accidental +', 'Did you mean `~`')

    $s = 'a'
    $s ~= 'bc'
    $t.ok($s == 'abc', '~=')


    $t.section('String Methods')

    $hi = 'Hello World!'
    $t.ok('abcdef'.reverse() == 'fedcba', 'direct string method')
    $t.ok($hi.length() == 12, 'length()')
    $t.ok($hi.getChar(1) == 'H', 'getChar()')
    $t.ok($hi.getChar(-1) == '!', 'getChar() negative')
    $t.ok($hi.getChar(100) == '', 'getChar() out of bounds')

    $t.ok($hi.contains('Hello'), 'contains()')
    $t.ok(!$hi.contains('missing'), '! contains()')
    $t.ok($hi.split('o').length() == 3, 'split()')
    $t.ok($hi.split('o')[1] == 'Hell', 'split()')
    $t.ok(String.charFromCode(65) ~ String.charFromCode(122) == 'Az', 'String.fromCharCode')

    $t.ok('abc'.setChar(2, 'Z') == 'aZc', 'setChar')
    $t.ok('abc'.setChar(-1, 'Z') == 'abZ', 'setChar negative')
    $t.dies(x{ 'abc'.setChar(5, 'xx') }, 'setChar - out of bounds',
        'outside of string length')
    $t.dies(x{ 'abc'.setChar(1, 'xx') }, 'setChar - 1 character',
        'must be exactly 1 character')

    $t.ok(''.toBoolean() == false, 'toBoolean - empty string')
    $t.ok('0'.toBoolean() == true, 'toBoolean - 0')
    $t.ok('false'.toBoolean() == true, 'toBoolean - false')
    $t.ok('true'.toBoolean() == true, 'toBoolean - true')

    $t.ok('123'.toNumber() == 123, 'toNumber')
    $t.ok('99ft'.toNumber() == 99, 'toNumber - trailing letters')
    $t.ok('1.300.000,01'.toNumber('.', ',') == 1300000.01,
        'toNumber - thousand/decimal')


    $t.section('String Methods - Unicode')

    $uni = 'ⒶⒷⒸ①②③ abc123'
    $t.ok($uni.length() == 13, 'length')

    $t.ok($uni.getChar(3) == 'Ⓒ', 'getChar')
    $t.ok($uni.getChar(-1) == '3', 'getChar negative')

    $t.dies(x{ 'x'[0] }, 'index `0` is not valid')
    $t.ok($uni.hasIndex(1), 'hasIndex one')
    $t.ok($uni.hasIndex(-1), 'hasIndex negative')
    $t.ok(!$uni.hasIndex(100), 'hasIndex out of bounds')
    $t.ok(!''.hasIndex(1), 'hasIndex empty')

    $t.ok('a'.getCharCode() == 97, 'getCharCode with no argument')
    $t.ok($uni.getCharCode(3) == 9400, 'getCharCode')
    $t.ok(String.charFromCode(9400) == 'Ⓒ', 'charFromCode')
    $t.ok(String.charFromCode(65) == 'A', 'charFromCode, ascii')

    $t.ok($uni.left(3) == 'ⒶⒷⒸ', 'left')
    $t.ok($uni.right(3) == '123', 'right')

    $t.ok($uni.substring(5, 5) == '②③ ab', 'substring')
    $t.ok($uni.substring(4) == '①②③ abc123', 'substring - remainder')

    $t.ok($uni.startsWith('ⒶⒷⒸ'), 'startsWith')
    $t.ok('ab ⒶⒷ'.endsWith('ⒶⒷ'), 'endsWith')
    $t.ok('abc ⒶⒷ'.startsWith('AbC', -ignoreCase), 'startsWith ignoreCase')
    $t.ok($uni.endsWith('ABc123', -ignoreCase), 'endsWith ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ') == 2, 'indexOf')
    $t.ok(' ⒶⒷ ⒶⒷ'.indexOf('ⒶⒷ', { startAt: 3 }) == 5, 'indexOf - offset')
    $t.ok('abc'.indexOf('BC', { ignoreCase }) == 2, 'indexOf - ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷ'.lastIndexOf('ⒶⒷ') == 5, 'lastIndexOf')
    $t.ok(' ⒶⒷ xy'.lastIndexOf('ⒶⒷ', { startAt: 3 }) == 0, 'lastIndexOf - offset')
    $t.ok('abab'.lastIndexOf('AB', { ignoreCase }) == 3, 'lastIndexOf - ignoreCase')

    $t.ok(' ⒶⒷ ⒶⒷⒶ'.count('Ⓐ') == 3, 'count char')
    $t.ok(' ⒶⒷC D ⒶⒷC'.count('ⒶⒷC') == 2, 'count word')
  //  $t.ok('123 abc 789'.count(r'\d+') == 2, 'count regex')
    $t.ok('ABC abc'.count('ab', -ignoreCase) == 2, 'count case-insensitive')
  //  $t.ok('ABC abc'.count(r'[a-b]+', true) == 2, 'count case-insensitive regex')

    $t.ok('ⒶⒸ'.insert('Ⓑ', 2) == 'ⒶⒷⒸ', 'insert')
    $t.ok('ⒶⒷⒸ'.insert('①', -2) == 'Ⓐ①ⒷⒸ', 'insert negative index')

    $t.ok($uni.contains('③ a'), 'contains')
    $t.ok($uni.contains('③ ABc', -ignoreCase), 'contains ignoreCase')

    $t.ok('aⒷⒸ'.padLeft(5, ' ') == '  aⒷⒸ', 'pad left')
    $t.ok('aⒷⒸ'.padLeft(5) == '  aⒷⒸ', 'pad left - no char')
    $t.ok('aⒷⒸ'.padRight(5, '①') == 'aⒷⒸ①①', 'pad right char')
    $t.ok('aⒷⒸ'.padBoth(5, ' ') == ' aⒷⒸ ', 'pad both')
    $t.ok('aⒷⒸ'.padBoth(6, ' ') == ' aⒷⒸ  ', 'pad both uneven')

    $t.ok('  ⒶⒷ ①②  '.trim() == 'ⒶⒷ ①②', 'trim')
    $t.ok('③③  ⒶⒷ ①②  ③'.trim('③') == 'ⒶⒷ ①②', 'trim mask')
    $t.ok('  ⒶⒷ ①②'.trimLeft() == 'ⒶⒷ ①②', 'leftTrim')
    $t.ok('ⒶⒷ ①②  '.trimRight() == 'ⒶⒷ ①②', 'rightTrim')
    $t.ok('ⒶⒷ ①②  ③'.trimRight('③') == 'ⒶⒷ ①②', 'rightTrim mask')
    $t.ok('③ ⒶⒷ ①②'.trimLeft('③') == 'ⒶⒷ ①②', 'leftTrim mask')

    $t.ok('Abc DEF ⒶⒷⒸ'.upperCase() == 'ABC DEF ⒶⒷⒸ', 'upperCase')

    // NOTE: pre php 7.3, the unicode chars are not lowercased
    if Php.getVersion(-num) >= 70300 {
        $t.ok('Abc DEF ⒶⒷⒸ'.lowerCase() == 'abc def ⓐⓑⓒ', 'lowerCase')
    } else {
        $t.ok('Abc DEF ⒶⒷⒸ'.lowerCase() == 'abc def ⒶⒷⒸ', 'lowerCase')
    }

    $t.ok('fòôbàř'.upperCase() == 'FÒÔBÀŘ', 'upperCase - extended')
    $t.ok('FÒÔBÀŘ'.lowerCase() == 'fòôbàř', 'lowerCase - extended')

    $t.ok('ABC'.lowerCaseFirst() == 'aBC', 'lowerCaseFirst')
    $t.ok('abc'.upperCaseFirst() == 'Abc', 'upperCaseFirst')

    $t.ok('ŘÔÀŘ'.lowerCaseFirst() == 'řÔÀŘ', 'lowerCaseFirst - extended')
    $t.ok('řôàř'.upperCaseFirst() == 'Řôàř', 'upperCaseFirst - extended')

    $t.ok('this is a title'.titleCase() == 'This is a Title', 'titleCase')
    $t.ok('a title'.titleCase() == 'A Title', 'titleCase - starting ignoreWord')
    $t.ok('a:title'.titleCase() == 'A:title', 'titleCase - close punctuation')

    $t.ok('horse'.plural(1) == 'horse', 'plural no')
    $t.ok('horse'.plural(2) == 'horses', 'plural yes')
    $t.ok('boss'.plural(2) == 'bosses', 'plural s yes')
    $t.ok('stimulus'.plural(3, 'stimuli') == 'stimuli', 'plural custom')

    $t.ok('ⒶⒷⒸ123'.limit(3) == 'ⒶⒷⒸ…', 'limit')
    $t.ok('ⒶⒷⒸ123'.limit(3, '!') == 'ⒶⒷⒸ!', 'limit')

    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join')
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', { limit: 2 }).join('|') == 'Ⓐ|Ⓑ,Ⓒ', 'split/join limit')
    $t.ok('Ⓐ, Ⓑ, Ⓒ'.split(r',\s+').join('|') == 'Ⓐ|Ⓑ|Ⓒ', 'split/join regex')
    $t.ok('Ⓐ,Ⓑ,Ⓒ'.split(',', { limit: 0 }).length() == 3, 'split limit 0')
    $t.ok('ⒶⒷⒸ'.split('').length() == 3, 'split on empty delimiter')

    $t.ok(',a, b,,c, ,'.split(',').join() == 'abc', 'split - trim empty')
    $t.ok(',a, b,,c, ,'.split(',', -keepWhitespace)
        .join('|') == '|a| b||c| |', 'split - keep empty')


    $t.ok($uni.splitChars()[3] == 'Ⓒ', 'chars')

    $uniml = '''

        ① item 1
        ② item 2

        ③ item 3

    '''
    $t.ok($uniml.splitLines().length() == 3, 'lines - count')
    $t.ok($uniml.splitLines()[2].getChar(1) == '②', 'lines - trimmed indent')
    $t.ok($uniml.splitLines(-keepWhitespace).length() == 4, 'lines with whitespace')

    $words = 'abc,123? ok. ③②①'.splitWords()
    $t.ok($words.join('|') == 'abc|123|ok', 'splitWords - default')

    $words = '③②① 123?  xyz!'.splitWords(-keepAllChars)
    $t.ok($words.join('|') == '③②①|123?|xyz!', 'splitWords')

    $t.ok($uni.reverse() == '321cba ③②①ⒸⒷⒶ', 'reverse')

    $t.ok('<a&b>'.encodeHtml() == '&lt;a&amp;b&gt;', 'encodeHtml')
    $t.ok('&lt;a&amp;b&gt;'.decodeHtml() == '<a&b>', 'decodeHtml')
    $esc = '&#97;&#98;&#99;&#9312;&#9313;&#9314;'
    $t.ok('abc①②③'.encodeHtml(-allChars) == $esc, 'encodeHtml all')

    $enc = 'a%20%E2%92%B7%2F%E2%92%B8%3Ad'
    $t.ok('a Ⓑ/Ⓒ:d'.encodeUrl() == $enc, 'encodeUrl')
    $t.ok($enc.decodeUrl() == 'a Ⓑ/Ⓒ:d', 'decodeUrl')

    $t.ok('ⒶⒷⒸ①②③'.removeLeft('ⒶⒷ') == 'Ⓒ①②③', 'removeLeft')
    $t.ok('ⒶⒷⒸ①②③'.removeLeft('①') == 'ⒶⒷⒸ①②③', 'removeLeft - no')
    $t.ok('Abcdef'.removeLeft('abc', -ignoreCase) == 'def', 'removeLeft - ignoreCase')

    $t.ok('ⒶⒷⒸ①②③'.removeRight('②③') == 'ⒶⒷⒸ①', 'removeRight')
    $t.ok('ⒶⒷⒸ①②③'.removeRight('①') == 'ⒶⒷⒸ①②③', 'removeRight - no')
    $t.ok('abcDef'.removeRight('def', -ignoreCase) == 'abc', 'removeLeft - ignoreCase')




    //--------

    $t.ok('Ⓐ    Ⓑ'.squeeze() == 'Ⓐ Ⓑ', 'squeeze')
    $t.ok('Ⓐ①①①①Ⓑ①①'.squeeze('①') == 'Ⓐ①Ⓑ①', 'squeeze char')

    $t.ok('ⒶⒷⒸ {var}'.fill({ var: '①②③' }) == 'ⒶⒷⒸ ①②③', 'fill')
    $t.ok('abc {1}'.fill('123') == 'abc 123', 'fill 1 arg')
    $t.ok('abc {1} {2}'.fill('123', '456') == 'abc 123 456', 'fill 2 arg')
    $t.ok('abc {} {}'.fill(['123', '456']) == 'abc 123 456', 'fill blanks & list')

    $t.dies(fn { 'abc {nope}'.fill('foo') },
        'fill - string key - no map', 'Can`t look up `fill` value')
    $t.dies(fn { 'abc {} {}'.fill('foo') }, 'fill - not enough values', 'not found')


    $t.section('Strings - Checks')

    $t.ok(' \n  '.isSpace(), 'isSpace true')
    $t.ok(!'  .  '.isSpace(), 'isSpace false')
    $t.ok(!''.isSpace(), 'isSpace empty')

    $t.ok('abc def'.hasSpace(), 'hasSpace space')
    $t.ok('abc\ndef'.hasSpace(), 'hasSpace newline')
    $t.ok(!'abcdef'.hasSpace(), 'hasSpace empty')

    $t.ok(!'abc 123'.isUpperCase(), 'isUpperCase - none')
    $t.ok(!'aBc 123'.isUpperCase(), 'isUpperCase - some')
    $t.ok('ABC 123'.isUpperCase(), 'isUpperCase - all')
    $t.ok(!''.isUpperCase(), 'isUpperCase - empty')

    $t.ok(!'abc 123'.hasUpperCase(), 'hasUpperCase - none')
    $t.ok('aBc 123'.hasUpperCase(), 'hasUpperCase - some')
    $t.ok('ABC 123'.hasUpperCase(), 'hasUpperCase - all')
    $t.ok(!''.hasUpperCase(), 'hasUpperCase - empty')

    $t.ok(!'ABC 123'.isLowerCase(), 'isLowerCase - none')
    $t.ok(!'AbC 123'.isLowerCase(), 'isLowerCase - some')
    $t.ok('abc 123'.isLowerCase(), 'isLowerCase - all')
    $t.ok(!''.isLowerCase(), 'isLowerCase - empty')

    $t.ok(!'ABC 123'.hasLowerCase(), 'hasLowerCase - none')
    $t.ok('AbC 123'.hasLowerCase(), 'hasLowerCase - some')
    $t.ok('abc 123'.hasLowerCase(), 'hasLowerCase - all')
    $t.ok(!''.hasLowerCase(), 'hasLowerCase - empty')

    $t.ok('a b c'.slug() == 'a-b-c', 'toSlug')
    $t.ok('aaBbCc'.slug() == 'aa-bb-cc', 'toSlug - from camel')
    $t.ok('AaBbCc'.slug() == 'aa-bb-cc', 'toSlug - from uppercamel')
    $t.ok('AA BB CC'.slug() == 'aa-bb-cc', 'toSlug - from uppercamel')
    $t.ok('a b c'.slug('__') == 'a__b__c', 'toSlug - delimiter')

    $t.ok('a b c'.slug('__') == 'a__b__c', 'toSlug - delimiter')

    $t.ok('aa bb cc'.camelCase() == 'aaBbCc', 'camelCase')
    $t.ok('-aa-bb--cc!'.camelCase() == 'aaBbCc', 'camelCase - delim')
    $t.ok('aa-bb-cc'.camelCase(-upper) == 'AaBbCc', 'upperCamelCase')
    $t.ok('a b c'.camelCase() == 'aBC', 'camelCase - single chars')

    $t.ok('abc'.isAlpha(), 'isAlpha')
    $t.ok('abcDEF'.isAlpha(), 'isAlpha')
    $t.ok(!'abc123'.isAlpha(), 'isAlpha - w numbers')
    $t.ok(!'abc def'.isAlpha(), 'isAlpha - spaces')
    $t.ok(!''.isAlpha(), 'isAlpha - empty')

    $t.ok('abc'.isAlphaNumeric(), 'isAlphaNumeric')
    $t.ok('abcDEF'.isAlphaNumeric(), 'isAlphaNumeric')
    $t.ok('abc123'.isAlphaNumeric(), 'isAlphaNumeric - w numbers')
    $t.ok(!'abc 123'.isAlphaNumeric(), 'isAlphaNumeric - spaces')
    $t.ok(!''.isAlphaNumeric(), 'isAlphaNumeric - empty')

    $t.ok('123'.isNumber(), 'isNumber')
    $t.ok('-123'.isNumber(), 'isNumber - negative')
    $t.ok('123.45'.isNumber(), 'isNumber - float')
    $t.ok(!'123 '.isNumber(), 'isNumber - space')
    $t.ok(!'123a'.isNumber(), 'isNumber - alphanum')
    $t.ok(!'abc'.isNumber(), 'isNumber - all alpha')
    $t.ok(!''.isNumber(), 'isNumber - empty')

    $t.ok('abc 123'.isAscii(), 'isAscii')
    $t.ok(''.isAscii(), 'isAscii - empty')
    $t.ok(!'ⒶⒷⒸ'.isAscii(), 'isAscii - unicode')
    $t.ok(!'abⒸ'.isAscii(), 'isAscii - mixed')


    $t.section('Strings - Escapes')

    $t.ok('ab\cd' == 'ab' ~ '\\' ~ 'cd', 'string - escape normal char')
    $t.ok('ab\ncd'.match(r'ab\scd'), 'string - newline')
    $esc = '$_SERVER["REMOTE_ADDR"]'
    $t.ok(!'lot\'s\t "double $quote"'.contains('\\'), 'no leaked backslashes')
    $t.ok('Here\'s an escaped quote'.contains('\''), 'escaped quote (\\\')')
  //  $t.ok('Here`s a backtick' == 'Here\'s a backtick', 'alt apostrophe (\`)')

    $t.ok($esc.startsWith('$_SERVER'), 'prevent php vars - $_SERVER')
    $t.ok('\$abc'.getChar(1) == '\\', 'prevent php vars - \\$abc')
    $t.ok('${abc}'.getChar(1) == '$', 'prevent php vars - ${abc}')



    $t.section('Strings - Regular Expressions')

    $m = 'abc 123'
    $t.ok($m.split(r'\s')[2] == '123', 'split regex')
    $t.ok($m.match(r'\w+ \d+') == 'abc 123', 'match - no group')
    $t.ok($m.match(r'(\w+) (\d+)')[1] == 'abc', 'match - group 1')
    $t.ok($m.match(r'(\w+) (\d+)')[2] == '123', 'match - group 2')

    $t.ok($m.match(r'(\w+) (\d+)').indexOf[2] == 5, 'match index')

    $t.ok($m.match(r'(\S+)$')[1] == '123', 'regex with dollar')

    $t.ok($m.match(r'badpattern') == '', 'bad match')

    $m = '08:23'
    $t.ok($m.match(r'(\d+):(\d+)', 'hour|min').min == '23', 'named groups')
    $t.ok($m.match(r'(\d+):(\d+)', 'hour|min').indexOf.min == 4, 'named groups - index')

    $t.dies(fn { $m.match(r'(\d+):(\d+)', 'hour') },
        'groupName mismatch', 'number of capture groups')


    $m = 'This is a\n multiline string!\n'
    $t.ok($m.match(r'STRING'i), 'i flag')

    $t.ok($m.match(r'a.*?multiline's), 's flag')
    $t.ok($m.match(r'multi      line'x), 'x flag')
    $t.ok($m.match(r'^\s+multiline'm), 'm flag - start')
    $t.ok($m.match(r'is a'm), 'm flag - end')
    $t.dies(fn { $m.match(r'blah'zz) }, 'bad flag', 'Invalid Regex flag `z`')

    $t.dies(fn { 'longstringlongstring'.match(r'(?:\D+|<\d+>)*[!?]') }, 'Error in match',
        'PREG_BACKTRACK_LIMIT_ERROR')

    $multi = 'one\ntwo\nthree'
    $t.ok($multi.split(r'\s').length() == 3, 'Newline regex')

    $cased = 'hello WORLD'
    $t.ok($cased.match(r'world'.flags('i')) == 'WORLD', 'regex object')

    $ticks = 'hello `WORLD`'
    $t.ok($ticks.match(r'`(\w+)`')[1] == 'WORLD', 'regex with backticks')

    $offset = '123 456 789'
    $t.ok($offset.match(r'\d+'.startIndex(4)) == '456', 'with startIndex')
    $t.ok($offset.match(r'\d+'.startIndex(-3)) == '789', 'with startIndex - negative')

    // replace

    $str = 'aa bb aa'
    $replaced = 'aa bb aa'.replace('aa', 'xx')
    $t.ok($replaced == 'xx bb xx', 'replace string - all occurances')
    $t.ok(String.lastReplaceCount() == 2, 'getLastReplaceCount')

    $t.ok('aa bb aa'.replace('aa', 'xx', { limit: 1 }) == 'xx bb aa', 'replace string - limit 1')
    $t.ok('aa bb aa'.replace('aa', 'xx', -first) == 'xx bb aa', 'replace string - -first')

    $escTicks = 'hello \`WORLD\`'
    $t.ok($escTicks.replace(r'\`(\w+)\`', 'THERE') == 'hello THERE', 'escaped backticks')

    $t.ok('ab  cd e'.replace(r'\s+', '-') == 'ab-cd-e', 'replace')

    $dollar = '123$foo$'.replace(r'(\d+)\$foo\$', 'dollar:$1')
    $t.ok($dollar == 'dollar:123', 'regex with $')

    $backslash = '123\\foo\\'.replace(r'(\d+)\\foo\\', 'backslash:$1')
    $t.ok($backslash == 'backslash:123', 'regex with literal backslash')

    $rx = Regex('`{}`'.fill('world'), 'i')
    $t.ok($ticks.replace($rx, 'VAR') == 'hello VAR', 'replace - variable')

    $cb = x{ $a[1].upperCase() ~ '!' }
    $t.ok('foo 123'.replace(r'(\w+)', $cb) == 'FOO! 123!', 'replace - callback')
    $t.ok('foo 123'.replace(r'(\w+)', $cb, { limit: 1 }) == 'FOO! 123',
        'replace - callback - limit 1')

    $cb = x{ $a.upperCase() }
    $t.ok('foo 123'.replace(r'\w+', $cb) == 'FOO 123', 'replace - callback - no groups')

    $cb = x{ $a.full.upperCase() }
    $t.ok('foo abc'.replace(r'(\w+) (\w+)', $cb) == 'FOO ABC', 'replace - callback - full key')

    $t.ok('abc 123'.replace(r'(\w+) (\d+)', '$1 | $2') == 'abc | 123', 'replace - $1, $2')


    // matchAll

    $mult = 'a:123|b:456|c:789'
    $matches = $mult.matchAll(r'(\w):(\d+)')
    $t.ok($matches[3][1] == 'c' && $matches[3][2] == '789', 'matchAll')

    $matches = $mult.matchAll(r'(\w):(\d+)', 'char|num')
    $t.ok($matches[3].char == 'c' && $matches[3].num == '789', 'matchAll - named')

    $matches = $mult.matchAll(r'(\d+)NO(\d+)')
    $t.ok(!$matches.length(), 'matchAll - none')




    $t.section('Strings - Civilize')

    $t.ok('PLS HELP HELP'.civilize() == 'Pls help help', 'PLS HELP HELP')
    $t.ok('I work at NASA'.civilize() == 'I work at NASA', 'I work at NASA')
    $t.ok('ok?!!!'.civilize() == 'ok?!', 'ok?!!!')
    $t.ok('hey.....'.civilize() == 'hey...', 'hey.....')
    $t.ok('ok!!!'.civilize() == 'ok!', 'ok!!!')
    $t.ok('ok???'.civilize() == 'ok?', 'ok???')

    $long = 'aaaaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAARRRRRRRRRGGGGGGHHHHHHHHHHHHHH'
    $t.ok($long.civilize() == 'Aaaarrrggghhh', 'long string, mixed')

    $long2 = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
    $t.ok($long2.civilize() == 'zzz', 'long string all same')

    $long3 = 'asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdd'
    $civ = 'asdasdasdasdasdasdasdasdasdasdasdasdasda…'
    $t.ok($long3.civilize() == $civ, 'long cycled asdasd')

    $longUrl = '''
        Here is my song: https://www.beepbox.co/#6n42s0kbl00e07t7m1a7g0fj7i1r3o321100T0w1f1d1c0h2v0T0w8f1d1c0h0v0T0w7f1d1c0h0v0T0w2f1d1c0h0v0T0w2f1d1c0h0v0T0w1f1d1c0h0v0T1d2c1AbF7B0V1Q5342Pffe8E131
    '''
    $t.ok($longUrl.civilize() == $longUrl, 'keep URL')


    $s = 'hⒶllo there.'
    $t.ok($s.replaceChars('.ⒶⒷⒸ', '!e') == 'hello there!', 'replaceChars - uneven')
    $t.ok('Fóø Bår! žoŤ'.removeAccents() == 'Foo Bar! zoT', 'removeAccents')


    $t.section('Strings - Subscripts')

    $t.ok('ⒶⒷⒸ ①②③'[2] == 'Ⓑ', '$str[1]')
    $t.ok('ⒶⒷⒸ ①②③'[-1] == '③', '$str[-1]')
    $t.ok('ⒶⒷⒸ ①②③'[99] == '', '$str[99] == ``')
    $t.dies(fn { 'x'[0] = 'a' }, 'Can not use `[]`')

    $t.section('Strings - Bounds')

    $t.dies(fn { 'ⒶⒷⒸ'.indexOf('a', { startAt: 10 }) },
        'indexOf offset', 'outside of string')
    $t.dies(fn { 'ⒶⒷⒸ'.indexOf('a', { startAt: -10 }) },
        'indexOf offset', 'outside of string')
    $t.dies(fn { 'ⒶⒷⒸ'.lastIndexOf('a', { startAt: 10 }) },
        'lastIndexOf offset', 'outside of string')
    $t.ok('ⒶⒷⒸ'.getCharCode(100) == -1, 'getCharCode out of bounds')




    $t.section('Strings - Misc')

    $t.ok('AdminUserId'.humanize() == 'Admin User', 'toHumanized')
    $t.ok('admin_user_id'.humanize() == 'Admin User', 'toHumanized (_)')
    $t.ok('admin-user-id'.humanize() == 'Admin User', 'toHumanized (-)')

    $s = '''
        Line 1
            Line 2
    '''
    $t.ok($s.trimIndent() == 'Line 1\nLine 2', 'trimIndent')
    $t.ok($s.trimIndent(-keepRelative) == 'Line 1\n    Line 2', 'trimIndent - relative')

    if !isPerfMode() {
        $fp = 'cee86e2a6c441f1e308d16a3db20a8fa8fae2a45730b48ca2c0c61e159af7e78'
        $t.ok($fp == 'this is a message'.fingerprint(), 'fingerprint')

        $t.ok(String.random(10).match(r'[a-z0-9]{10}'), 'random')
    }
    // TODO: move this to module
    // $t.section('Strings - CSV')

    // $csvLine = 'foo, 3, 4.9, "ab cd"\n'
    // $csvData = $csvLine.parseCsv()
    // $t.ok($csvData[0] == 'foo', 'parseCsv - string')
    // $t.ok($csvData[1] == 3, 'parseCsv - number')
    // $t.ok($csvData[2] == 4.9, 'parseCsv - float')
    // $t.ok($csvData[3] == 'ab cd', 'parseCsv - quoted string')

    return $t
}


fn testFlags($t) {

    $t.section('Flags')

    $flag = -myFlag
    $t.ok($flag.myFlag, 'flag - one')

    // $flag = -flagA|-flagB
    // $t.ok($flag.flagA && $flag.flagB, 'flag - multiple')

    // $flag = -myFlag
    // $t.ok($flag.is(-myFlag), 'is')
    // $t.ok(!$flag.is(-default), 'is not default')

    // $flag = -flagX|-flagY
    // $flag.allow([-flagX, -flagY, -flagZ])

    // $t.ok($flag.is(-flagX) && $flag.is(-flagY), 'combined - separate checks')
    // $t.ok($flag.is(-flagX|-flagY), 'combined - one check')if !isPerfMode() {

    // $addedFlag = $flag.add(-flagZ)
    // $addedFlag.allow([-flagX, -flagY, -flagZ])
    // $t.ok($addedFlag.is(-flagZ), 'add')

    // $removedFlag = $addedFlag.remove(-flagX)
    // $t.ok($removedFlag.is(-flagY) && $removedFlag.is(-flagZ), 'remove')

    // $errFlag = -nope
    // $t.dies(fn { $errFlag.allow([-flag1, -flag2]) }, 'allow - fail')

    // $errFlag2 = -yep
    // $t.dies(fn { $errFlag2.is(-nope) }, 'auto validate via `is`')

    // $t.ok(-f1.equals(-f1), 'equal')
    // $t.ok(!(-f1.equals(-f2)), 'not equal')

    // $checkFlag = fn ($flArg = -myDefault) { return $flArg }
    // $t.ok($checkFlag(-arg1|-arg2).is(-arg1|-arg2), 'flag arg')
    // $t.ok($checkFlag().is(-myDefault), 'flag arg - default')

    // $t.ok(-someFlag.type() == 'flag', 'flag type')

    // $t.ok(-someFlag.toBoolean() == true, 'toBoolean - true')
    // $t.ok(-default.toBoolean() == false, 'toBoolean - false')

    // $t.ok(-someFlag|-other.toString() == '-someFlag|-other', 'toString')

    // $map = {
    //     -someFlag: 111,
    // }
    // $map[-otherFlag] = 222

    // $t.ok($map[-someFlag] == 111 && $map[-otherFlag] == 222, 'as map keys')

    // $keepFlag1 = -flagA|-flagB
    // $keepFlag1.allow([-flagA, -flagB, -flagX])
    // $keepFlag2 = $keepFlag1.keep(-flagB|-flagX)
    // $t.ok($keepFlag2.is(-flagB) && !$keepFlag2.is(-flagA|-flagX), 'keep')

    // $defFlag = -someFlag
    // $t.ok(!$defFlag.is(-default), 'set flag is not -default')
    // $t.ok($defFlag.remove(-someFlag).is(-default), 'empty flag is -default')

    return $t
}

fn testTypeStrings($t) {

    $t.section('TypeStrings')

    $t.dies(fn { return plain'a' ~ 'b' }, 'Can not combine', 'Can not combine')
    $t.dies(fn { return 'a' ~ plain'b' }, 'Can not combine', 'Can not combine')
    $t.dies(fn { return url'a' ~ cmd'b' }, 'Can not combine', 'of the same type')

    $lock1 = plain'1={},'.fill('a')
    $lock2 = plain'2={}'.fill('b')
    $combined = $lock1 ~ $lock2
    $t.ok($combined.renderString() == '1=a,2=b', 'combined TypeStrings')

    $t1 = plain't1'
    $t1 ~= plain't2'
    $t.ok($t1.renderString() == 't1t2', 'combined with ~=')

    $t.ok(tagHtml('a').stringType() == 'html', 'stringType')
    $t.ok(sql'x'.stringType() == 'sql', 'stringType')

    $t.dies(fn { return url'page?foo={}' },
        'dynamic query hardcoded in url string', 'dynamic queries')

    $lUrl = url'http://test.com/'.setQuery({ foo: 'val`s' })
    $lCmd = cmd'xget {} > file.txt'.fill($lUrl)
    $lHtml = deepEscHtml($lCmd)

    $escOut = '<b>xget &apos;http://test.com/?' ~ 'foo=val%27s&apos; &gt; file.txt</b>\n'
    if System.getOs() == 'windows' {
        // Windows escapes shell differently
        $escOut = '<b>xget &quot;http://test.com/?foo=val 27s&quot; &gt; file.txt</b>\n'
    }
    $t.ok($lHtml.renderString() == $escOut, 'recursive escaped renderString()')

    return $t
}

fn testUrlTypeStrings($t) {

    $t.section('Url TypeStrings')

    $lUrl = url'http://test.com/'
    $lUrl.setQuery({ test: 123, foo: 'a b' })
    $t.ok($lUrl.getScheme() == 'http', 'get scheme')
    $t.ok($lUrl.getPort() == 80, 'get port')
    $t.ok($lUrl.getHost() == 'test.com', 'get host')
    $t.ok($lUrl.getOrigin() == 'http://test.com', 'get origin')

    $t.ok($lUrl.isAbsolute(), 'isAbsolute = true')
    $t.ok(!$lUrl.isRelative(), 'isRelative = false')
    $sUrl = $lUrl.renderString()
    $t.ok($sUrl.contains('?test=123&foo=a%20b'), 'query add')

    $relUrl = url'/path/page'
    $t.ok(!$relUrl.isAbsolute(), 'isAbsolute = false')
    $t.ok($relUrl.isRelative(), 'isRelative = true')

    $changeUrl = url'http://asite.com/home'
    $changeUrl.setHost('othersite.com')
    $changeUrl.setScheme('https')
    $changeUrl.setPath('/other/path')
    $changeUrl.setQuery({ baz: 999 })
    $sChanged = $changeUrl.renderString()
    $t.ok($sChanged == 'https://othersite.com/other/path?baz=999', 'overrided parts')

    $t.ok(url'/page'.link('hey').renderString() == '<a href="/page">hey</a>', 'link()')

    $mixedQuery = url'/path?foo=123'.setQuery({ bar: 456 })
    $t.ok($mixedQuery.renderString() == '/path?foo=123&bar=456', 'url: mixed query')

    $t.ok(url'/foo#abc'.getHash() == 'abc', 'hash get')
    $t.ok(url'/foo#abc'.setHash('xyz').renderString() == '/foo#xyz', 'hash set')
    $t.ok(url'/foo?a=1#abc'.setHash('X,Y,Z,').getHash() == 'x-y-z', 'hash set & sanitize')

    $toRelUrl = url'http://mysite.com/path/home'.toRelative()
    $t.ok($toRelUrl.renderString() == '/path/home', 'toRelative')
    $t.ok($toRelUrl.toRelative().renderString() == '/path/home', 'toRelative `/path/home`')
    $t.ok(url'path/home'.toRelative().renderString() == '/path/home', 'toRelative `path/home`')
    $t.ok(url'/'.toRelative().renderString() == '/', 'toRelative `/`')
    $originUrl = url'http://site.com'.toRelative().renderString()
    $t.ok($originUrl == '/', 'toRelative `http://site.com`')

    $relWithQuery = url'http://mysite/page?foo=1'.toRelative()
    $t.ok($relWithQuery.renderString() == '/page?foo=1', 'toRelative with query')

    $absUrl = url'/my/path'.toAbsolute('https://mysite.com')
    $t.ok($absUrl.renderString() == 'https://mysite.com/my/path', 'toAbsolute')

    $absUrl = url'http://oldsite/my/path'.toAbsolute('https://newsite')
    $t.ok($absUrl.renderString() == 'https://newsite/my/path', 'toAbsolute - replace origin')

    $urlWithQuery = url'/foo'.setQuery({ a: 1 })
    $urlWithQuery.clearQuery()
    $t.ok($urlWithQuery.renderString() == '/foo', 'clearQuery')

    $url = url'https://site.com/this/is/a/path?a=1'
    $t.ok($url.getPathParts().join('|') == 'this|is|a|path', 'pathParts')



    $t.section('UrlQuery')

    $qUrl = url'/page?name=test&num=123'
    $t.ok($qUrl.getQuery().get('name') == 'test', 'get, default rule')
    $t.ok($qUrl.getQuery().get('num', 'i') == 123, 'get, i')
    $t.ok($qUrl.getQuery().get('name', 'i') == 0, 'get, i, default')

    $qUrl.getQuery().set({ num: 999, flag: true })
    $t.ok($qUrl.getQuery().get('num', 'i') == 999, 'set i')
    $t.ok($qUrl.getQuery().get('flag', 'b') == true, 'set b')

    $sqUrl = $qUrl.renderString()
    $t.ok($sqUrl == '/page?name=test&num=999&flag=true', 'query() + renderString()')

    $sxUrl = url'/page?foo=123'
    $sxUrl.getQuery().setDefault({ foo: 999, other: 'yes' })
    $t.ok($sxUrl.renderString() == '/page?foo=123&other=yes', 'setDefault')

    $otherUrl = url'/page'.setQuery({ z: 99 })
    $sxUrl.setQuery($otherUrl)
    $t.ok($sxUrl.renderString() == '/page?foo=123&other=yes&z=99', 'get from other Url')

    $otherUrl.setQuery({ z: 333 })
    $sxUrl.setQuery($otherUrl.getQuery())
    $t.ok($sxUrl.renderString() == '/page?foo=123&other=yes&z=333', 'get from other UrlQuery')

    $fQuery = url'/page?foo=123&bar=xyz'.getQuery()
    $t.ok($fQuery.has('foo'), 'hasField')
    $t.ok(!$fQuery.has('no'), 'not hasField')
    $t.ok($fQuery.getNames().join('|') == 'foo|bar', 'fields')

    $kQuery = url'/page?a=11&b=22&c=33'.getQuery()
    $kQuery.keep(['b', 'c'])
    $t.ok($kQuery.renderString() == '?b=22&c=33', 'keep')

    $dQuery = url'/page?a=11&b=22&c=33'.getQuery()
    $dQuery.delete('b')
    $names = $dQuery.getNames().join('|')
    $t.ok($names == 'a|c', 'delete')

    $staticQuery = url'/page?a=11&b=22&a=99'.renderString()
    $t.ok($staticQuery == '/page?a=11&b=22&a=99', 'static query with dupe keys')

//    https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;600&family=Roboto:wght@400;500&display=swap


    return $t
}

tm deepEscHtml($val) {
    <b>{{ $val }}</>
}

fn testLists($t) {

    $t.section('Lists')

    $ary = [1, 2, 3, 4, 5]
    $t.ok([4, 5, 6].reverse()[-1] == 4, 'direct list method')
    $t.ok($ary.length() == 5, 'size')
    $t.ok($ary.get(3) == 3, 'at')
    $t.ok($ary.get(10, 9) == 9, 'default')
    $t.ok($ary[2] == 2, 'direct')
    $t.ok($ary.join(':') == '1:2:3:4:5', 'join')
    $t.ok($ary.reverse().join(':') == '5:4:3:2:1', 'reverse')


    $ary = [[0, 0], [1, 1]]
    $ary[1][1] = 99
    $t.ok($ary[1][1] == 99, 'deep assignment')


    $aryExtraComma = [
        6, 7, 8, 9,
    ]
    $t.ok($aryExtraComma.join(':') == '6:7:8:9', 'trailing comma')
    $t.parserError('$a = [1, 2, 3, ]', 'trailing comma')

    $ary = [1, 2, 3, 4, 5]
    $t.ok($ary[-2] == 4, 'negative index')

    $ary[1] = 99
    $t.ok($ary[1] == 99, 'direct set')

    $mlary = [
        'hello',
        { name: 'world' },
        'yay',
    ]

    $t.ok($mlary[2]['name'] == 'world', 'multiline array')

    $t.parserOk('$l = [\n1, 2,\n]', 'trailing commas')
    $t.parserError('$l = [\n1\n]', 'add a comma')


    // copy
    $copyAryA = [1, 2]
    $copyAryB = $copyAryA.copy()
    $copyAryA[1] = 11
    $copyAryB[1] = 22

    $t.ok($copyAryA[1] == 11 && $copyAryB[1] == 22, 'copy')

    // insert / remove
    $ary = [1, 2, 3]

    $ary.push(40)
    $t.ok($ary[4] == 40, 'push')
    $t.ok($ary.pop() == 40, 'pop')
    $t.ok($ary.length() == 3, 'pop modified original')

    $t.ok($ary.insert(1, -10)[1] == -10 && $ary.length() == 4, 'insert index 0')
    $t.ok($ary.remove(1) == -10 && $ary.length() == 3, 'remove index 0')

    $t.ok([1, 2].remove(3) == '', 'remove undefined element')
    $t.ok([].remove(1) == '', 'remove from empty list')


    // insert
    $ary = [1, 2, 3]
    $ary.insert(1, 40)
    $t.ok($ary[1] == 40 && $ary.length() == 4, 'insert index 0')

    $ary = [1, 2, 3]
    $ary.insert(-1, 40)
    $t.ok($ary[3] == 40 && $ary.length() == 4, 'insert index -1')


    // pushFirst / popFirst
    $ary = [1, 2, 3]
    $t.ok($ary.pushFirst(-99).join(',') == '-99,1,2,3', 'pushFirst')
    $t.ok($ary.popFirst() == -99, 'popFirst')

    $t.ok([].pop() == '', 'pop from empty list')
    $t.ok([].popFirst() == '', 'popFirst from empty list')

    $t.ok([0, 1, 2].remove(-1) == 2, 'remove index -1')
    $t.ok([0, 1, 2].remove(-2) == 1, 'remove index -2')

    $t.ok([0, 1, 2].remove(99) == '', 'remove missing item == ``')
    $t.ok([0, 1, 2].remove(99, 2).length() == 0, 'remove missing items == []')

    $t.ok([0, 1, 2].remove(1, 2).join('|') == '0|1', 'remove index 1, items = 2')
    $t.ok([0, 1, 2].remove(-2, 2).join('|') == '1|2', 'remove index -2, items = 2')

    $ary = [1, 2, 3]
    $ary.pop()
    $t.ok($ary.length() == 2 && $ary.last() == 2, 'size after pop')

    $ary.pushAll([3, 4])
    $t.ok($ary.length() == 4 && $ary.last() == 4, 'pushAll')


    // insertAll
    $ary = [1, 2, 3]
    $ary.insertAll(3, [10, 11])
    $t.ok($ary.length() == 5 && $ary[3] == 10 && $ary.last() == 3, 'insertAll')

    $ary = [1, 2, 3]
    $ary.insertAll(-2, [10, 11])
    $t.ok($ary.length() == 5 && $ary[3] == 11 && $ary.last() == 3, 'insertAll - negative')

    // slice
    $t.ok([0, 1, 2, 3].slice(2).join('|') == '1|2|3', 'slice')
    $t.ok([0, 1, 2, 3].slice(-2).join('|') == '2|3', 'slice -2')
    $t.ok([0, 1, 2, 3].slice(2, 2).join('|') == '1|2', 'slice w length')

    // splice steps
    $items = ['a', 'b', 'c', 'd', 'e']
    $items.remove(3, 2)
    $t.ok($items.join('|') == 'a|b|e', 'splice step 1')
    $items.insertAll(3, ['X', 'Y', 'Z'])
    $t.ok($items.join('|') == 'a|b|X|Y|Z|e', 'splice step 2')


    // repeat
    $repeat1 = [].repeat('z', 5)
    $t.ok($repeat1.join(',') == 'z,z,z,z,z', 'repeat 1')
    $repeat1 = ['a', 'b'].repeat('z', 3)
    $t.ok($repeat1.join(',') == 'a,b,z,z,z', 'repeat append')

    // Quoted Lists
    $t.ok(q[ aa bb  'cc' ][2] == 'bb', 'quoted list')
    $t.ok(q[ aa bb  'cc' ][3] == '`cc`', 'quoted list + quotes')
    $ml = q[
        aa bb
        'cc'
    ]
    $t.ok($ml[1] == 'aa bb', 'multiline quoted list')
    $t.ok($ml[2] == '`cc`', 'multiline quoted list + quotes')
    $t.ok({ a: q[a b c] }.a[2] == 'b', 'quoted list in single-line map key')

    // Truthiness

    $isTrue = true
    if []: $isTrue = false
    $t.ok($isTrue, 'empty list is falsey')

    $isTrue = false
    if ![]: $isTrue = true
    $t.ok($isTrue, 'empty list negated is truthy')

    $isTrue = false
    if [1]: $isTrue = true
    $t.ok($isTrue, 'list with key is truthy')

    $t.ok([1] || false, '[1] || false == truthy')
    $t.ok(!([] && true), '!([] && true) == truthy')

    $v = []
    $v ||= 123
    $t.ok($v == 123, '[] ||= 123')
    $v = []
    $v &&= 123
    $t.ok($v.isList(), '[] &&= 123')

    $v = [99]
    $v ||= 123
    $t.ok($v.isList(), '[99] ||= 123')
    $v = [99]
    $v &&= 123
    $t.ok($v == 123, '[99] &&= 123')


    $t.section('Lists - Sorting')

    // sort
    $t.ok(['a', 'b', 'c'].sort().join('|') == 'a|b|c', 'sort')
    $t.ok(['1', '2', '10'].sort().join('|') == '1|2|10', 'sort numeric strings')

    $list = q[ a b c ].sort(x{ $b <=> $a })
    $t.ok($list.join('|') == 'c|b|a', 'sort function')

    $list = [1, 3, 2].sort(-reverse)
    $t.ok($list.join('|') == '3|2|1', 'reverse sort')

    $list = ['a1', 'a10', 'a2'].sort()
    $t.ok($list.join('|') == 'a1|a2|a10', '-natural sort')

    $list = ['a1', 'a10', 'a2'].sort(-ascii)
    $t.ok($list.join('|') == 'a1|a10|a2', '-ascii sort')

    $list = ['a1', 'a3', 'A2', 'A4'].sort(-ignoreCase)
    $t.ok($list.join('|') == 'a1|A2|a3|A4', '-ignoreCase')

    $list = ['a1', 'a3', 'A2', 'A4'].sort({ ignoreCase, reverse })
    $t.ok($list.join('|') == 'A4|a3|A2|a1', '-ignoreCase -reverse')


// $list = [1, 2, 3, 10, 20, 30]
// print($list.sort({}))
// print($list.sort({ ascii: true }))

// $list = ['1', '2', '3', '10', '20', '30']
// print($list.sort({}))
// print($list.sort({ ascii: true }))

// $list = ['a1', 'a2', 'a3', 'a10', 'a20', 'a30']
// print($list.sort({}))
// print($list.sort({ ascii: true }))

// $list = ['a1', 'a2', 'a3', 'A10', 'a20', 'a30']
// print($list.sort({ ignoreCase: true }))
// print($list.sort({ ascii: true }))





    $list = ['a', 'b', 'c', 'x'].swap(2, 3)
    $t.ok($list.join() == 'acbx', 'swap')

    $list = ['a', 'b', 'c', 'x'].swap(1, -1)
    $t.ok($list.join() == 'xbca', 'swap negative index')



    $t.section('Lists - Out of Bounds')

    $t.dies(fn { [1].slice(2) }, 'slice', 'outside of List length')

    $t.ok([1, 2, 3].first(5).join() == '123', 'first larger than len')
    $t.ok([1, 2, 3].last(5).join() == '123', 'last larger than len')

    $t.ok([].first() == '', 'first missing == ``')
    $t.ok([].last() == '', 'last missing == ``')
    $t.ok([].first(2).join('|').length() == 0, 'first 2 missing == []')
    $t.ok([].last(2).join('|').length() == 0, 'last 2 missing == []')


    $t.section('Lists - Misc')

    $t.ok(q[a a b c d d].unique().join(':') == 'a:b:c:d', 'unique')

    $defaultList = ['a', 'b'].default('Z')
    $t.ok($defaultList[1] == 'a', 'default, normal')
    $t.ok($defaultList[99] == 'Z', 'default, missing')

    $rand1 = [20, 21, 22, 23].random(1)
    $rand2 = [20, 21, 22, 23].random(2)
    $t.ok($rand1 >= 20, 'random 1')
    $t.ok(Math.sum($rand2) >= 40, 'random 2')

    $compact = [1, 0, 0, false, '', 'zz'].compact()
    $t.ok($compact.join('|') == '1|zz', 'compact')


    $t.section('Lists - Functional')

    $t.ok([1, 2, 3].map(fn ($a) { return $a * 2 }).join(':') == '2:4:6', 'map')
    $t.ok([1, 2, 3].reduce(fn ($a, $i) { return $i + $a }, 3) == 9, 'reduce')
    $t.ok([1, 2, 3, 4].filter(fn ($a) { return $a % 2 }).join(':') == '1:3', 'filter')

    $mdl = [1, 2, [], [3, 4], [[5, 6], [7, 8]]]
    $t.ok($mdl.flat(99).join('') == '12345678', 'flat')
    $t.ok([1, [2, [3]]].flat().length() == 3, 'flat(1)')

    $table = [{ a: 20 }, { a: 70 }, { a: -30 }]
    $tableVals = $table.sortByColumn('a').map(x{ $a.a }).join(',')
    $t.ok($tableVals == '-30,20,70', 'tableSort by map')

    $table = [[1, 50], [2, -30], [3, 10]]
    $tableVals = $table.sortByColumn(2).map(x{ $a[2] }).join(',')
    $t.ok($tableVals == '-30,10,50', 'tableSort by index')
    $tableVals = $table.sortByColumn(2, -reverse).map(x{ $a[2] }).join(',')
    $t.ok($tableVals == '50,10,-30', 'tableSort by index (DESC)')

    $rows = [
        { a: 20,  b: 'x' },
        { a: 70,  b: 'y' },
        { a: -30, b: 'z' },
    ]
    $vals = $rows.getColumn('a').join(',')
    $t.ok($vals == '20,70,-30', 'getColumn')
    $vals = $rows.getColumn('a', 'b')
    $t.ok($vals.y == 70 && $vals.length() == 3, 'getColumn with index')

    $t.section('Lists - Searching')

    $t.ok(['a', 'b', 'c'].contains('c'), 'contains')
    $t.ok(!['a', 'b', 'c'].contains('D'), 'contains - no')
    $t.ok(['a', 'b', 'c'].containsAll(['a', 'c']), 'containsAll')
    $t.ok(['a', 'b', 'b', 'c'].containsAll(['a', 'c']), 'containsAll - 2 negatives')
    $t.ok(['a', 'b', 'c', 'c'].containsAll(['a', 'c']), 'containsAll - 2 positives')
    $t.ok(['a', 'b', 'c'].containsAll(['a', 'c', 'c']), 'containsAll - 2 positives - right')
    $t.ok(!['a', 'b', 'c'].containsAll(['c', 'D']), 'containsAll - no')

    $t.section('Lists - Equals')

    $t.ok(!(['a', 'b'] == ['a', 'b']), '== - false')
    $t.ok(['a', 'b'].equals(['a', 'b']), 'equals - true')
    $t.ok(!['a', 'b'].equals(['a', 'b', 'c']), 'equals - false')
    $t.ok(['a', [1, 2]].equals(['a', [1, 2]]), 'equals nested list - true')
    $t.ok(!['a', [1, 2]].equals(['a', [8, 9]]), 'equals nested list - false')
    $t.ok(!['a', 'b'].equals({ 0: 'a', 1: 'b' }), 'equals similar map - false')


    $t.section('Lists - Conversions')

    // $zip = ['a', 1, 'b', 2, 'c', 3].toZipperMap()
    // $t.ok($zip['c'] == 3, 'toZipperMap')

    $vals = [1, 2, 3].toMap(['a', 'b', 'c'])
    $t.ok($vals['c'] == 3, 'toMap')

    $t.dies(x{ ['a', 'b', 'c'].toMap([]) }, 'number of keys')

    $vals = ['a', 'b', 'c'].toMap()
    $t.ok($vals['3'] == 'c', 'toMap - no argument')

    $set = ['a', 'b', 'c', 'c'].toSet()
    $t.ok($set['c'] == true, 'toSet')



    // TODO: test multiple array args

    $t.section('Lists - Set')

    $list1 = ['green', 'blue', 'red']
    $list2 = ['blue', 'green', 'yellow']
    $int = $list1.intersection($list2).join(',')
    $t.ok($int == 'green,blue', 'intersection')

    $union = $list1.union($list2).join(',')
    $t.ok($union == 'green,blue,red,yellow', 'union')

    $diff = $list1.difference($list2).join(',')
    $t.ok($diff == 'red', 'difference')


    $t.section('Lists - Querying')

    $rows = [
        { id: 0, color: 'red' },
        { id: 1, color: 'green' },
        { id: 2, color: 'green' },
        { id: 3, color: 'blue' },
    ]
    $counts = $rows.countBy(x{ $a.color })
    $t.ok($counts.green == 2, 'countBy')

    $index = $rows.indexBy(x{ $a.id })
    $t.ok($index[3].color == 'blue', 'indexBy')

    $groups = $rows.groupBy(x{ $a.color })
    $t.ok($groups.green.length() == 2, 'groupBy')

    $t.dies(fn { $a = [1].groupBy(x{ false }) }, 'string key')

    return $t
}

fn testTemplates($t) {

    $t.section('Templates')

    // Punt on these for now
    // $wsLine = whitespaceLineHtml().renderString()
    // $t.ok($wsLine == '<div><b>a 1</b><b>a 2</b></div>\n', 'HTML whitespace - lines')

    // $wsTags = whitespaceTagHtml().renderString()
    // $t.ok($wsTags == '<p>This is a <b>Message</b>!</p>\n', 'HTML whitespace - tags')

    $htmlUsers = templateHtml(['Frodo', 'Sam', 'Gandalf']).renderString()
    $t.ok($htmlUsers.match(r'<li>Frodo.*?<li>Sam.*?<li>Gandalf's), 'template - loop & variables')

    $htmlUsers = templateHtml(['Frodo', '<b>Sam</b>', 'Gandalf'])
    $t.ok($htmlUsers.renderString().contains('&lt;b&gt;Sam'), 'template with html escapes')

    $t.section('HTML Templates')

    $t.parserError('tm html {\n    <b class=foo> hi\n }', 'missing quote')
    $t.parserError('tm html {\n    <b class= "foo"> hi\n }', 'space after `=`')
    $t.parserError('tm html {\n    <b class ="foo"> hi\n }', 'space before `=`')
    $t.parserError('tm html {\n    <b class="foo> hi\n }', 'closing quote')
    $t.parserError('tm html {\n    <p>\n    sdfsdf\n}', 'closing tag')


    .section('Template Escaping')

    $t.ok(entHtml().renderString().contains('&gt;'), 'html - entity')
    $plain = formatBlockHtml().renderString()
    $t.ok($plain.contains('&lt;foo&gt;\n    indented'), 'html - format block')
  //  $t.ok(bsHtml().unlock().contains('a\nb\nc'), 'html - newlines')
    $h = expHtml('"\'', 'a&b"').renderString()
    $t.ok($h.contains('<p "&quot;&apos;">'), 'html - tag attribute')
    .ok($h.contains('a&amp;b'), 'html - outer')

    $t.ok(tagsHtml(inCss()).renderString().contains('<style'), 'html - css style block')
    $t.ok(tagsHtml(inJs()).renderString().contains('<script'), 'html - js block')
    $t.ok(tagsHtml(entHtml()).renderString().contains('<p>2 &gt; 1</p>'), 'html - embed html')

    $ls = html'<p>a &gt; c</p>'
    $t.ok(tagsHtml($ls).renderString().contains('<p>a &gt; c</p>'), 'html - TypeString')

    .ok(dataJs('string').renderString().contains('"string"'), 'js - string')
    .ok(dataJs('a\nb').renderString().contains('"a\\nb"'), 'js - string newline')
    .ok(dataJs('a"b').renderString().contains('"a\\"b"'), 'js - string quote')

    .ok(dataJs(1234).renderString().contains('1234'), 'js - num')
    .ok(dataJs(1 == 1).renderString().contains('true'), 'js - bool')
    .ok(dataJs({ a: 1 }).renderString().contains('{"a":1}'), 'js - object')

    $t.ok(regexJs().renderString().contains('/\\/[\\w]+\\n/g'), 'js - regex with backslashes')

    // TODO: Fix this in next version
    // $mlVar = '''

    //     Line 1
    //       Line 2

    // '''

    // $out = multilineVarText($mlVar).renderString()
    // $t.ok($out.contains('Message:\n\nLine 1\n  Line 2'), 'nested multiline string with indent')

    $chunks = []
    $chunks #= chunkHtml(5)
    $chunks #= chunkHtml(9)

    $out = listOfChunksHtml($chunks).renderString()
    $t.ok($out.contains('C5') && $out.contains('C9'), 'list of nested templates')

    return $t
}

fn testBitwise($t) {

    $t.section('Bitwise Operators')

    .ok(1 +| 2 == 3, 'bitwise or (+|)')
    .ok(2 +& 3 == 2, 'bitwise AND (+&)')
    .ok(1 +^ 2 == 3, 'bitwise XOR (+^)')

    .ok(+~5 == -6, 'bitwise NOT (+~)')

    .ok(3 +< 2 == 12, 'bitwise shift LEFT (+<)')
    .ok(13 +> 2 == 3, 'bitwise shift RIGHT (+>)')

    .ok(0b100 +| 0b010 == 0b110, 'OR (+|) with binary number')
    .ok(0b100 +& 0b110 == 0b100, 'AND (+&) with binary number')
    .ok(0b100 +^ 0b110 == 0b010, 'XOR (+^) with binary number')
    .ok(+~0b110 == -7, 'NOT (+~) with binary number')

    return $t
}


fn libFile($t) {

    if isPerfMode(): return $t

    $t.section('Module: File')

    $t.dies(fn { File.exists('../bad.txt') }, 'parent shortcut (..)',
        'Parent shortcut `..` not allowed')
    $t.dies(fn { File.read('http://yahoo.com') }, 'stop remote file read',
        'Remote URL not allowed')
    $t.dies(fn { File.exists('') }, 'empty path', 'empty string')
    $t.dies(fn { File.exists('./path') }, 'dotted relative path', 'Dot directory `.` not allowed')
    $t.dies(fn { File.exists('/passwd') }, 'outside of sandbox',
        'Path must be relative to `data/files`')

    $t.ok(!File.exists('sdf/sdf'), 'Missing file does not exist')
    $t.ok(!File.isFile('sdf/sdf'), 'Missing path is not a file')
    $t.ok(!File.isDir('sdf/sdf'), 'Missing path is not a dir')

    $f = 'testFile.txt'
    $d = 'testDir'

    if File.exists($d) {
        File.deleteDir($d)
    }
    File.makeDir($d)
    $t.ok(File.isDir($d), 'make dir')

    $p = File.joinPath($d, $f)

    File.write($p, 'line1')
    $t.ok(File.getSize($p) == 5, 'File size')
    $t.ok(File.exists($p), 'File exists')
    $t.ok(File.isFile($p), 'File is file')

    File.append($p, '\nline2\n')
    $t.ok(File.getSize($p) == 12, 'File append line')

    File.append($p, ['line3', 'line4'])
    $lines = File.read($p).join('|')
    $t.ok($lines == 'line1|line2|line3|line4', 'append list')




    $parts = File.pathParts($p)

    $t.ok($parts.dirPathParts.last() == $d, 'Path info dirList has parent dir')
    $t.ok($parts.fileExt == 'txt', 'Path info extension')
    $t.ok($parts.fileName == 'testFile.txt', 'Path info fileName')
    $t.ok($parts.fileNameShort == 'testFile', 'Path info shortFileName')

    // $t.ok(File.parsePath('././profile.png').dirList.length() == 0, 'remove . from path')


    File.delete($p)
    $t.ok(!File.exists($p), 'File deleted')

    // avoid race condition in windows
    // TODO: find a better way
    System.sleep(20)

    File.deleteDir($d)
    $t.ok(!File.exists($d), 'Dir deleted')


    $t.ok(File.getMimeType('testFile.txtx') == 'text/plain', 'mime: text/plain')
    $t.ok(File.getMimeType('testFile.pdfx') == 'application/pdf', 'mime: application/pdf')

    $t.ok(File.extensionToMimeType('png') == 'image/png', 'ext to mime')
    $t.ok(File.extensionToMimeType('.pdf') == 'application/pdf', 'ext with dot to mime')
    $t.ok(File.extensionToMimeType('foo') == 'application/octet-stream', 'ext to mime: default')

    $t.ok(File.mimeTypeToExtension('image/png') == 'png', 'mime to ext')
    $t.ok(File.mimeTypeToExtension('text/html') == 'html', 'mime to ext: dupe')
    $t.ok(File.mimeTypeToExtension('asdasdsd') == '', 'mime to ext: none')


    $path = 'perms.txt'
    File.write($path, '...')
    $perm = File.getPerms($path)
    $t.ok($perm.read == true, 'perms - read')
    $t.ok($perm.write == true, 'perms - write')
    $t.ok($perm.execute == false, 'perms - execute')
    File.delete($path)

    $t.ok(File.appPath().endsWith('/testApp'), 'appPath')
    $t.ok(File.publicPath().endsWith('/public'), 'publicPath')

    $docFile = File.publicPath('foobar.html')
    $t.ok($docFile.right(19) == '/public/foobar.html', 'documentPath with file')

    $p = 'multiline.txt'
    $content = 'xxx\n'.repeat(5)
    File.write($p, $content)
    $rlines = File.read($p)
    $t.ok($rlines.length() == 5, 'read')
    $rcombined = File.read($p, -join)
    $t.ok($rcombined.length() == 20, 'read - combined')


    $content = '11\n\n22\n33\n44\n99\n100'
    File.write($p, $content)
    $numNums = 0
    $val = File.readLines($p, fn ($line) {
        if $line.match(r'\d'): $numNums += 1
        if $line == '99': return 99
    })
    $t.ok($numNums == 5, 'readLines - closure var')
    $t.ok($val == 99, 'readLines - early return val')

    $csvContent = 'a b, 33, 123\n\n'

    $t.section('Absolute/Relative')

    $path = '/dir1/dir2/dir3/file.txt'
    $t.ok(File.hasRootPath($path, '/dir1/dir2'), 'hasRootPath')
    $t.ok(!File.hasRootPath($path, '/foo'), 'hasRootPath: false')
    $t.ok(File.stripRootPath($path, '/dir1/dir2') == 'dir3/file.txt', 'stripRootPath')
    $t.ok(!File.hasEndPath($path, 'foo.txt'), 'hasEndPath: false')
    $t.ok(File.stripEndPath($path, 'dir3/file.txt') == '/dir1/dir2', 'stripEndPath')
    $t.ok(File.isRelative('dir/file.txt'), 'isRelative')
    $t.ok(!File.isRelative('/dir/file.txt'), 'isRelative: false')
    $t.ok(File.isAbsolute('/dir/file.txt'), 'isAbsolute')
    $t.ok(!File.isAbsolute('dir/file.txt'), 'isAbsolute: false')

    $t.section('File.loopDir')

    $combined = []
    $fnLoop = fn ($lpath) {
        $combined #= $lpath['fileName']
    }

    $combined = []
    File.loopDir('loopMe', $fnLoop)
    $sCombined = $combined.sort().join('|')

    $expected = 'file1.txt|file2.txt'
    $t.ok($sCombined == $expected, 'File.loopDir - default')

    $combined = []
    File.loopDir('loopMe', $fnLoop, -deep)
    $sCombined = $combined.sort().join('|')
    $expected = 'file1.txt|file2.txt|subfile1.txt|subfile1.txt'
    $t.ok($sCombined == $expected, 'File.loopDir - -deep')

    $combined = []
    File.loopDir('loopMe', $fnLoop, { deep, filter: 'all' })
    $sCombined = $combined.sort().join('|')
    $expected = 'dir1|dir2|file1.txt|file2.txt|subdir1|subfile1.txt|subfile1.txt'
    $t.ok($sCombined == $expected, 'File.loopDir - -deep, -includeDirs')

    $combined = []
    File.loopDir('loopMe', $fnLoop, { deep, filter: 'dirs' })
    $sCombined = $combined.sort().join('|')
    $expected = 'dir1|dir2|subdir1'
    $t.ok($sCombined == $expected, 'File.loopDir - -deep, -onlyDirs')



    $t.section('File.readDir')

    $files = File.readDir('loopMe')
    $t.ok($files.length() == 2 && $files.sort()[2] == 'loopMe/file2.txt',
        'readDir')

    $files = File.readDir('loopMe', { filter: 'all' })
    $t.ok($files.length() == 4 && $files.sort()[2] == 'loopMe/dir2',
        'readDir - filter: all')

    $files = File.readDir('loopMe', { filter: 'dirs' })
    $t.ok($files.length() == 2 && $files.sort()[2] == 'loopMe/dir2',
        'readDir - filter: dirs')

    $files = File.readDir('loopMe', { deep, filter: 'files' })
    $t.ok($files.length() == 4 && $files.sort()[2] == 'loopMe/dir2/subfile1.txt',
        'readDir - deep, filter: files')

    $files = File.readDir('loopMe', { deep, filter: 'all' })
    $t.ok($files.length() == 7 && $files.sort()[2] == 'loopMe/dir1/subdir1',
        'readDir - deep, filter: all')


    $tfile = 'touchMe.txt'

    File.delete($tfile)

    File.touch($tfile)
    $t.ok(File.exists($tfile), 'touch')

    File.touch($tfile, Date.create('2 days ago'))
    $t.ok(File.getModifyTime($tfile).isPast(), 'touch with date')

    File.touch($tfile, Date.create('+2 days'), { stat: 'modify' })
    $mdate = File.getModifyTime($tfile)
    $adate = File.getAccessTime($tfile)
    $t.ok($mdate.isFuture() && $adate.isPast(), 'touch - only modify')

    return $t
}


fn libDate($t) {

    $t.section('Module: Date')

    $ts = 1400000000
    $date1 = Date.create($ts)

    $d2 = Date.create('2021-07-29 15:42:01')

    $t.ok(Date.unixTime() > $ts, 'Date.unixTime')
    $t.ok($date1.format() == '2014-05-13T16:53:20+0000', 'Date.format (default)')
    $t.ok($date1.format('Y-m-d H:i:s') == '2014-05-13 16:53:20', 'Date.format')
    $t.ok($date1.toMap().year == 2014, 'toMap')

    $dc = Date.create('2021-07-29 15:42:01')
    $ds = date'2021-07-29 15:42:01'
    $t.ok($dc.equals($ds), 'date string')

    $ts1 = Date.now().unixTime()
    $d1 = Date.create($ts1)
    $ts2 = $ts1 + 378
    $d2 = Date.create($ts2)
    $t.ok($d1.unixTime() - $d2.unixTime() == -378, 'fromUnixTime')

    $t.ok(Date.durationToSecs('2 hours') == 7200, 'durationToSecs')
    $t.ok(Date.durationToSecs('-2 hours') == -7200, 'durationToSecs - negative')

    $fromMap = Date.create({ year: 2021, month: 5, day: 17 })
    $t.ok($fromMap.format('Y-m-d') == '2021-05-17', 'create from map')
    $t.dies(x{ Date.create({ hour: 22, minute: 38, second: 08 }) }, 'contain the fields')

    $added = $fromMap.add('2 months').add('4 days')
    $t.ok($added.format('Y-m-d') == '2021-07-21', 'add chained')

    $added = $fromMap.add('-3 days')
    $t.ok($added.format('Y-m-d') == '2021-05-14', 'add negative')

    $added = $fromMap.add('1 week + 3 days')
    $t.ok($added.format('Y-m-d') == '2021-05-27', 'add compound')

    $added = $fromMap.add(3600 * 24)
    $t.ok($added.format('Y-m-d') == '2021-05-18', 'add seconds')

    $t.section('Module: Date2')

    $now = Date.now()
    $later = $now.add('3 days')

    $t.ok($later.isAfter($now), 'isAfter')
    $t.ok(!$now.isAfter($later), 'isAfter false')

    $t.ok($now.isBefore($later), 'isBefore')
    $t.ok(!$later.isBefore($now), 'isBefore false')

    $t.ok($now.isBeforeOrEqual($now), 'isBeforeOrEqual - equal')
    $t.ok(!$later.isBeforeOrEqual($now), 'isBeforeOrEqual - false')
    $t.ok($now.isBeforeOrEqual($later), 'isBeforeOrEqual - true')

    $t.ok($now.isAfterOrEqual($now), 'isAfterOrEqual - equal')
    $t.ok($later.isAfterOrEqual($now), 'isAfterOrEqual - true')
    $t.ok(!$now.isAfterOrEqual($later), 'isAfterOrEqual - false')

    $today = Date.today()
    $t.ok($today.format('Ymd') == $now.format('Ymd'), 'today & now')
    $t.ok($today.toMap().hour == 0, 'today')
    $t.ok($now.clearTime().equals($today), 'clearTime')

    $dateDst = Date.create('2022-12-01 15:00:00')
    $t.ok($dateDst.getTimezone() == 'America/Los_Angeles', 'getTimezone is from app.jcon')
    $tzDate = $dateDst.setTimezone('Europe/Helsinki')
    $t.ok($tzDate.format().contains('+0200'), 'setTimezone')
    $t.ok(!$tzDate.isDst(), 'isDst - false')

    $dateNotDst = Date.create('2022-05-01 15:00:00')
    $tzDate = $dateNotDst.setTimezone('Europe/Helsinki')
    $t.ok($tzDate.format().contains('+0300'), 'DST changes TZ offset')
    $t.ok($tzDate.isDst(), 'isDst - true')


    // setlocale takes something like 0.3ms
    $locDate = Date.create('2021-06-17')
    Date.setLocale('de_DE')
    $t.ok($locDate.format('l, F d, Y') == 'Donnerstag, Junii 17, 2021', 'setLocale - de_DE')
    Date.setLocale('en_US')
    $t.ok($locDate.format('l, F d, Y') == 'Thursday, June 17, 2021', 'setLocale - en_US')


    $otherDate = $now.add('50 hours')
    $t.ok($otherDate.diffHuman() == '2 days', 'diffHuman - days')


    $almostMinute = $now.add(58)
    $t.ok($almostMinute.diffHuman() == '1 minute', 'diffHuman - minutes')

    $longAgo = $now.add('-1000 days')
    $t.ok($longAgo.diffHuman() == '2 years', 'diffHuman - years')

    $monthish = $now.add('3 days')
    $t.ok($monthish.diff() == 259200, 'diff - no args')

    $date1 = Date.create('2022-02-01')
    $date2 = Date.create('2021-03-01')
    $t.ok($date1.diffHuman($date2) == '1 year', 'diffHuman - otherDate')
    $t.ok($date1.diff($date2, 'days').floor() == 337, 'diff - otherDate')
    $t.ok($date2.diff($date1, 'days').ceiling() == -337, 'diff - negative')

    $past = Date.create('3 mins ago')
    $future = Date.create('+3 mins')
    $t.ok($past.isPast() && !$past.isFuture(), 'isPast')
    $t.ok(!$future.isPast() && $future.isFuture(), 'isFuture')

    return $t
}

fn libPassword($t) {

    $t.section('Module: Password')

    if isPerfMode(): return $t

    $p1 = String.xDangerPassword('p@ssw0rd ⒶⒷⒸ 123')
    $h1 = $p1.xDangerHash()

    $t.ok($h1.left(3) == '$2y' && $h1.length() >= 60, 'hash')

    $t.ok($p1.check($h1), 'check')
    $t.ok(!$p1.check('nope'), 'check - false')

    $t.ok($p1.checkPattern(r'\d{3}'), 'checkPattern')
    $t.ok(!$p1.checkPattern(r'[xyz]+'), 'checkPattern - false')

    $t.ok($p1.length() == 16, 'length')

    $t.dies(fn { String.xDangerPassword($h1).xDangerHash() },
        'no re-hash', 'already-hashed value')

    return $t
}

fn libDb($t) {


    $t.section('Module: Db')

    if isPerfMode(): return $t

    Db.xDangerDropTable('test')
    Db.createTable('test', { key: 'varchar(255)', value: 'varchar(255)' })

    $key = 'test' ~ Math.random(0, 1000)
    Db.insertRow('test', { key: $key, value: Date.unixTime() })
    Db.insertRow('test', { key: $key ~ '-date', value: date'2021-03-14' })
    Db.insertRow('test', { key: $key ~ '-password', value: String.xDangerPassword('p@ssw0rd') })

    $t.ok(Db.lastInsertId() == 3, 'lastInsertId')

    $t.ok(Db.countRows('test', sql'value != ""') == 3, 'count 3 (sql)')
    $t.ok(Db.countRows('test', { key: $key }) == 1, 'count 1 (map)')

    $rows = Db.selectRows(sql'select * from test')
    $t.ok($rows.length() == 3, 'Insert & select row')
    $t.ok($rows[1].key == $key, 'Check inserted row')

    $dateRow = Db.selectRow(sql'select * from test where key = {}'.fill($key ~ '-date'))
    $t.ok($dateRow['value'] == '2021-03-14 00:00:00', 'inserted date value')

    $pwRow = Db.selectRow(sql'select * from test where key = {}'.fill($key ~ '-password'))
    $t.ok($pwRow['value'].left(7) == '$2y$10$', 'inserted password value')

    Db.xDangerDropTable('dates')
    Db.createTable('dates', { key: 'varchar(255)', createDate: 'varchar(20)' })
    Db.insertRow('dates', { key: $key, createDate: date'2021-03-14' })
    $row = Db.selectRow(sql'select * from dates')
    $t.ok($row.createDate.format('Y/m/d') == '2021/03/14', 'returned date value')

    $dbh = Db.useDatabase('default')
    $rows = $dbh.selectRows(sql'select * from test')
    $t.ok($rows[1].key == $key, 'Db.useDatabase')

    Db.updateRow('test', { value: 'new!' }, { key: $key })
    $row = Db.selectRow(sql'select * from test where key = {}'.fill($key))
    $t.ok($row['value'] == 'new!', 'updateRow')

    $t.dies(fn {
        Db.updateRow('test', { value: 'new!' }, sql'key != ""')
    }, 'updateRow - too many', 'more than one row')


    Db.deleteRow('test', { key: $key })
    $rows = Db.selectRows(sql'select * from test')
    $t.ok($rows.length() == 2, 'Delete row')

    foreach range(1, 9) as $i {
        Db.insertRow('test', { key: 'num', value: $i })
    }
    $num = Db.countRows('test', { key: 'num', 'value >=': 5 })
    $t.ok($num == 5, 'operator in where key: >=')

    $rows = Db.selectRows(sql'select * from test', { key: 'num', 'value >=': 5 })
    $t.ok($rows.length() == 5, 'selectRows - whereMap')

    $rows = Db.selectRows(sql'select * from test', { limit: 3 })
    $t.ok($rows.length() == 3, 'selectRows - whereMap - limit')

    $rows = Db.selectRows(sql'select * from test', { key: 'num', orderBy: 'value' })
    $t.ok($rows[1].value == '1', 'selectRows - whereMap - order by')

    $rows = Db.selectRows(sql'select * from test', { key: 'num', orderByDesc: 'value' })
    $t.ok($rows[1].value == '9', 'selectRows - whereMap - order by desc')

    $row = Db.selectRow(sql'select * from test', { key: 'num', 'value': 5 })
    $t.ok($row.value == '5', 'selectRow - whereMap')


    Db.insertRow('test', { key: 'in1', value: 11 })
    Db.insertRow('test', { key: 'in2', value: 22 })
    Db.insertRow('test', { key: 'in3', value: 33 })
    Db.insertRow('test', { key: 'in4', value: 44 })
    Db.insertRow('test', { key: 'in5', value: 55 })

    $inIds = q[in1 in3 in5 in99]
    $rows = Db.selectRows(sql'select * from test where key in ({in})'.fill({ in: $inIds }))
    $t.ok($rows.getColumn('value').join(',') == '11,33,55', 'where in')

    $rows = Db.selectRows(sql'select * from test', { 'key in': $inIds })
    $t.ok($rows.getColumn('value').join(',') == '11,33,55', 'where in - via whereMap')


    $t.dies(fn {
        Db.deleteRow('test', sql'key != ""')
    }, 'deleteRow - too many', 'more than one row')

    $t.dies(fn {
        Db.updateRow('"bad', { key: $key }, sql' key = {}'.fill($key))
    }, 'invalid table name - updateRow', 'Invalid table name')

    $t.dies(fn {
        Db.deleteRow('"bad', sql' key = {}'.fill($key))
    }, 'invalid table name - deleteRows', 'Invalid table name')

    $t.dies(fn {
        Db.runQuery('delete from test')
    }, 'reject renderString query - query', 'must be passed a `sql`')

    $t.dies(fn {
        Db.selectRows('select * from test')
    }, 'reject renderString query - selectRows', 'must be passed a `sql`')

    $t.dies(fn {
        Db.useDatabase('badDb')
    }, 'bad driver name', 'unknown')


    // TODO: test inserted, updated Date
    // TODO: test returned date column (and col with "-date" suffix)

    //Db.selectRows('shows', { 'publishDate >': date'48 hours' })

    return $t
}

fn libJconTest($t) {

    $t.section('Module: Jcon')

    $d = Jcon.parse('{\nkey: value\n}\n')
    $t.ok($d.key == 'value', 'string value')

    $d = Jcon.parse('{\n key: "hello"\n }')
    $t.ok($d.key == 'hello', 'quoted string value')

    $d = Jcon.parse('{\nkey: true\n}\n')
    $t.ok($d.key == true, 'true value')

    $d = Jcon.parse('{\nkeyA: valA\nkeyB: valB\n}\n')
    $t.ok($d.keyB == 'valB', '2nd key')

    $d = Jcon.parse('{\nkey: false\n}\n')
    $t.ok($d.key == false, 'false value')

    $d = Jcon.parse('{\nkey: 1234.5\n}\n')
    $t.ok($d.key == 1234.5, 'num value')

    $d = Jcon.parse('{\nkey: [\nv1\nv2\nv3\n]\n}\n')
    $t.ok($d.key.length() == 3, 'list value')
    $t.ok($d.key[3] == 'v3', 'list value')

    $d = Jcon.parse('{\nkey: \'\'\'\nThis is\nmultiline\n\'\'\'\n}\n')
    $t.ok($d.key.contains('\nmultiline'), 'multiline value')

    $d = Jcon.parse('{\nkeLm: \'\'\'\n## Heading!\n\'\'\'\n}\n')
    $t.ok($d.keLm.renderString().contains('<h2>'), 'Litemark value')

    $t.ok(Jcon.fileExists('app.jcon'), 'fileExists')
    $t.ok(!Jcon.fileExists('missing.jcon'), 'fileExists - not')

    $t.dies(fn { Jcon.parse('sdfsdf') }, 'missing top-level')
    $t.dies(fn { Jcon.parse('{ foo: 123 }') }, 'Missing newline after open brace')
    $t.dies(fn { Jcon.parse('{\n foo: 123, \n}') }, 'remove trailing comma')
    $t.dies(fn { Jcon.parse('{\n foo: 1\n foo: 2\n }') }, 'duplicate key')
    $t.dies(fn { Jcon.parse('{\n foo : 1\n }') }, 'extra space before colon')
    $t.dies(fn { Jcon.parse('{\n foo:1\n }') }, 'missing space after colon')
    $t.dies(fn { Jcon.parse('') }, 'empty string')

    return $t
}


fn libJson($t) {

    $t.section('Module: Json')

    .ok(Json.decode(json'{"k1":[123,"hello"]}')['k1'][2] == 'hello', 'decode sub-list')
    .ok(Json.decode(json'{"k1":{"k2":"hello"}}')['k1']['k2'] == 'hello', 'decode sub-map')
    .ok(Json.decode(json'[1,2,3]')[2] == 2, 'decode list')
    .ok(Json.decode(json'true') == true, 'decode boolean')
    .ok(Json.decode(json'123.45') == 123.45, 'decode number')

    $st = Json.encode({ a: 'hi', b: [1, 2, 3] })

    $t
    .ok($st.renderString().contains('"hi"'), 'encode string')
    .ok($st.renderString().contains('[1,2,3]'), 'encode list')
    .ok($st.renderString().contains('"b":'), 'encode key')
    .dies(fn { Json.decode(json'{"a":123,/*"b":"comment"*/}') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"test\ud800":123}') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"te\st":123}') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"a":123}=') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"a":NaN}') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"a":Inf}') }, 'unable to decode')
    .dies(fn { Json.decode(json'{"a":1.0e4096}') }, 'invalid large number')

    $obj = Json.decode($st)
    $t.ok($obj.b[2] == 2, 'decode after encode')

    // Waiting for PHP security patch
    // $dupe = json'{"a":123,"a":999}'
    // >> $dupe
    // >> Json.decode($dupe)

    return $t
}

fn libLitemark($t) {

    $t.section('Module: Litemark')

    $b = tesLm().renderString()

    $t.ok($b.contains('<h1>Heading 1'), 'H1')
    $t.ok($b.contains('<h2>Heading 2'), 'H2')

    $t.ok($b.contains('<p>\nLine 1\nLine 2\n</p>'), 'p 2-line')
    $t.ok($b.contains('<p>\nPara 2\n</p>'), 'p 1-line')

    $t.ok($b.contains('This is <strong>bold</strong>'), 'bold')
    $t.ok($b.contains('This is <em>italic</em>'), 'italic')
    $t.ok($b.contains('This is <strong><em>bold italic</em></strong>'), 'bold italic')
    $t.ok($b.contains('This is <em><strong>italic bold</strong></em>'), 'italic bold')

    $t.ok($b.contains('inline <del>strike text</del>'), 'inline del')
    $t.ok($b.contains('<del><a href="/url">url</a></del>'), 'next del + link')

    $t.ok($b.contains('<li>Item 1'), 'li 1')
    $t.ok($b.contains('<li>Item 3'), 'li 3')

    $t.ok($b.contains('href="/rel-url"'), 'a cmd - url only')

    $t.ok($b.contains('link label</a>'), 'a cmd - label')

    $t.ok($b.contains('<a href="http://abc.com/inline/url.htm?a=1&b=2#xzy"'), 'auto-link URL')
    $t.ok($b.contains('<a href="http://paren.com/"'), 'auto-link URL - paren')
    $t.ok($b.contains('<a href="http://comma.com"'), 'auto-link URL - comma')

    $t.ok($b.contains('pre-break<br />post-break'), '[br]')

    $t.ok($b.contains('<pre class="">\ncode_here'), 'code block')
    $t.ok($b.contains('<pre class="custom-class">'), 'code block class')

    $t.ok($b.contains('<b>CUSTOM: jcon</b>'), 'from JCON')
    $t.ok($b.contains('<b>OTHER: jcon</b>'), 'from JCON, other')

    $body = lm'''

        This is [custom | custom tag "content"!]

        - callbacks: [cb | cbarg] and [cberror]

    '''

    $customOut = Litemark.parse($body, {
        features: 'lists',
        customTags: {
            custom1: '<span class="custom">{1}</span>',
            cb1: x{ '<b class="cb">{}!</b>'.fill($a) },
            cberror0: fn {
                die('oops')
            },
        },
    })
    $co = $customOut.renderString()




    $tagHtml = '<span class="custom">custom tag &ldquo;content&rdquo;!</span>'
    $t.ok($co.contains($tagHtml), 'custom tag html')
    $t.ok($co.contains('<b class="cb">cbarg!</b>'), 'callback')
    $t.ok($co.contains('[ERROR'), 'callback error')


    $body = lm'''
        This is a https://link.com/to/somewhere?param=1
    '''

    $urlOut = Litemark.parse($body, {
        urlHandler: fn ($url) {
            return html'<a href="{}">link</a>'.fill($url)
        },
    })
    $uo = $urlOut.renderString()
    $t.ok($uo.contains('https://link.com/to/somewhere?param=1'), 'urlHandler')

    $parse = fn {
        Litemark.parse($body, {
            urlHandler: fn ($url) {
                return '<a href="{}">link</a>'.fill($url)
            },
        })
    }
    $t.dies($parse, 'urlHandler error', 'must return an html TypeString')




    $body = lm'''
        This is <b>HTML</b>
    '''

    // allow
    $htmlOut = Litemark.parse($body, {
        features: 'xDangerHtml',
    })
    $ho = $htmlOut.renderString()
    $t.ok($ho.contains('<b>'), 'allowHtml = yes')

    // don't allow HTML
    $htmlOut = Litemark.parse($body, {
        features: ':forum',
    })
    $ho = $htmlOut.renderString()
    $t.ok($ho.contains('&lt;b&gt;'), 'allowHtml = no')



    $body = lm'''
        This is a [https://a.com | link]
    '''

    // allow
    $out = Litemark.parse($body, {
        features: 'indexLinks',
    })
    $so = $out.renderString()
    $t.ok(!$so.contains('nofollow'), 'indexLinks = yes')

    // don't allow HTML
    $out = Litemark.parse($body, {
        features: ':forum',
    })
    $so = $out.renderString()
    $t.ok($so.contains('nofollow'), 'indexLinks = no')

    $body = lm'''
        # Heading

        - list 1
        - list 2

        [image http://image]

        This is [del | inline]
    '''

    // allow
    $out = Litemark.parse($body, {
        features: ':blog',
    })
    $so = $out.renderString()
    $t.ok($so.contains('<h1>'), 'featureSet, heading = yes')
    $t.ok($so.contains('<li>'), 'featureSet, list = yes')
    $t.ok($so.contains('<img loading="lazy" src="http://image"'), 'featureSet, image = yes')
    $t.ok($so.contains('<del>'), 'featureSet, inline = yes')


    // allow
    $out = Litemark.parse($body, {
        features: 'headings|lists|images',
    })
    $so = $out.renderString()
    $t.ok($so.contains('<h1>'), 'ind feature, heading = yes')
    $t.ok($so.contains('<li>'), 'ind feature, list = yes')
    $t.ok($so.contains('<img loading="lazy" src="http://image"'), 'ind feature, image = yes')



    $out = Litemark.parse($body, {
        features: ':comment',
    })
    $so = $out.renderString()
    $t.ok($so.contains('# Heading'), ':comment, heading = no')
    $t.ok($so.contains('- list 2'), ':comment, list = no')
    $t.ok($so.contains('[image'), ':comment, image = no')
    $t.ok($so.contains('[del |'), ':comment, inline = no')


    $body = '''

        This is code:
        \`\`\`
        code { $foo }
        \`\`\`

        This is a quote:
        > line 1
        > line 2

    '''.xDangerToType('lm')

    $out = Litemark.parse($body, {
        features: ':comment',
    })
    $so = $out.renderString()

    $t.ok($so.contains('\`\`\`'), ':comment, code fence = no')
    $t.ok($so.contains('> line 2'), ':comment, blockquote = no')

    $out = Litemark.parse($body, {
        features: ':forum',
    })
    $so = $out.renderString()
    $t.ok($so.contains('<pre'), ':forum, code fence = yes')
    $t.ok($so.contains('<blockquote>'), ':forum, blockquote = yes')


    // unclosed tag
    $body = lm'''

        [foo unclosed blah blah
        [other tag]

    '''
    $out = Litemark.parse($body, {

    }).renderString()
    $t.ok($out.contains('MISSING \`]\`'), 'unclosed tag')


    // bad featureSet
    $lm = fn {
        Litemark.parse($body, {
            features: ':blah',
        })
    }
    $t.dies($lm, 'unknown featureSet', 'Unknown feature set')

    // bad feature
    $lm = fn {
        Litemark.parse($body, {
            features: 'blah',
        })
    }
    $t.dies($lm, 'unknown feature', 'Unknown feature')


    // bad tag name
    $lm = fn {
        Litemark.parse($body, {
            customTags: {
                badTag1: html'...',
            },
        })
    }
    $t.dies($lm, 'all lowercase', 'must be all lowercase')

    // bad tag name - no number
    $lm = fn {
        Litemark.parse($body, {
            customTags: {
                nonum: html'...',
            },
        })
    }
    $t.dies($lm, 'end in number', 'end with number')

    return $t
}

fn testNumber($t) {

    $t.section('Number')

    .ok(Math.pi().round(2) == 3.14, 'rounded pi to precision 2')
    .ok((2.6).round() == 3, 'round - up')
    .ok((2.4).round() == 2, 'round - down')
    .ok((1025.1).round(-1) == 1030, 'round - place: -1')
    .ok((2.5).round(0, { half: 'down' }) == 2, 'round - half down')
    .ok((2.5).round(0, { half: 'odd' }) == 3, 'round - half odd')
    .ok((2.5).round(0, { half: 'even' }) == 2, 'round - half even')

    .ok((2.4).ceiling() == 3, 'ceiling')
    .ok((-2.4).ceiling() == -2, 'ceiling negative')

    .ok((2.6).floor() == 2, 'floor')
    .ok((-2.6).floor() == -3, 'floor negative')


    .ok((5).clamp(1, 10) == 5, 'clamp in boundary')
    .ok((20).clamp(1, 10) == 10, 'clamp max')
    .ok((-20).clamp(1, 10) == 1, 'clamp min')

    .ok((1).sign() == 1, 'sign positive')
    .ok((0).sign() == 0, 'sign zero')
    .ok((-1).sign() == -1, 'sign negative')

    .ok((-5).absolute() == 5, 'absolute - negative')
    .ok((0).absolute() == 0, 'absolute - zero')
    .ok((1.1).absolute() == 1.1, 'absolute - positive float')
    .ok((-3.1).absolute() == 3.1, 'absolute - negative float')

    .ok((100).clampMax(10) == 10, 'clampMax - clamped')
    .ok((100).clampMax(200) == 100, 'clampMax - not clamped')

    .ok((-10).clampMin(0) == 0, 'clampMin - clamped')
    .ok((100).clampMin(10) == 100, 'clampMin - not clamped')

    .ok((123).roundToStep(100) == 100, 'roundToStep(123, 100) == 100')
    .ok((123).roundToStep(-100) == 100, 'roundToStep(123, -100) == 100')
    .ok((123).roundToStep(0) == 123, 'roundToStep(123, 0) == 123')
    .ok((200).roundToStep(200) == 200, 'roundToStep(200, 200) == 200')
    .ok((-23).roundToStep(10) == -30, 'roundToStep(-23, 10) == -30')
    .ok((3.8).roundToStep(0.5) == 3.5, 'roundToStep(3.8, 0.5) == 3.5')

    .ok(Math.range(0, 3).join(',') == '0,1,2,3', 'range')
    .ok(Math.range(3, 0).join(',') == '3,2,1,0', 'range - desc')
    .ok(Math.range(-2, 2).join(',') == '-2,-1,0,1,2', 'range - neg to pos')
    .ok(Math.range(0, 8, 2).join(',') == '0,2,4,6,8', 'range - step')
    .ok(Math.range(0.1, 0.5, 0.1).join(',') == '0.1,0.2,0.3,0.4,0.5', 'range - floats')
    .dies(fn { Math.range(1, 10, 100) }, 'less than total range',
        'can not be greater than the total range')



    $t.section('Lists')

    $t.ok(Math.min([5, 0, -33, 10]) == -33, 'min')
    $t.ok(Math.max([5, 0, -33, 10]) == 10, 'max')
    $t.ok(Math.min([]) == 0, 'empty min')

    $t.ok(Math.sum([-5, 10.5, 0, 33]) == 38.5, 'sum')
    $t.ok(Math.sum([]) == 0, 'empty sum')

    $t.ok(Math.product([-1, 32, 0.5]) == -16, 'product')
    $t.ok(Math.product([]) == 1, 'empty product')

    $t.dies(fn { Math.sum([123, 0, '55']) }, 'must be a number')



    .ok((123).zeroPadLeft(2) == '123', 'zeroPadLeft - less')
    .ok((123).zeroPadLeft(6) == '000123', 'zeroPadLeft - more')
    .ok((123.4).zeroPadLeft(6) == '000123', 'zeroPadLeft - float is removed')

    .ok((123).zeroPadRight(2) == '123.00', 'zeroPadRight - int ')
    .ok((123.4).zeroPadRight(3) == '123.400', 'zeroPadRight - float 3')
    .ok((123.4567).zeroPadRight(2) == '123.46', 'zeroPadRight - float - less')

    .ok((1).isOdd(), 'isOdd: 1')
    .ok((-1).isOdd(), 'isOdd: -1')
    .ok(!(2).isOdd(), '!isOdd: 2')
    .ok(!(-2).isOdd(), '!isOdd: -2')
    .ok(!(0).isOdd(), '!isOdd: 0')
    .ok((1.5).isOdd(), 'isOdd: 1.5')
    .ok(!(2.5).isOdd(), '!isOdd: 2.5')

    .ok((0).isEven(), 'isEven: 0')
    .ok((2).isEven(), 'isEven: 2')
    .ok((-2).isEven(), 'isEven: -2')
    .ok(!(1).isEven(), '!isEven: 1')
    .ok(!(-1).isEven(), '!isEven: -1')
    .ok(!(1.5).isEven(), '!isEven: 1.5')
    .ok((2.5).isEven(), 'isEven: 2.5')

    .ok((16).isMultipleOf(2), 'isMultipleOf')
    .ok((-16).isMultipleOf(2), 'isMultipleOf - negative')
    .ok(!(16).isMultipleOf(5), '!isMultipleOf')
    .ok((0).isMultipleOf(2), 'isMultipleOf zero')


    $num = 1234.56
    $t.ok($num.format() == '1,235', 'format')
    $t.ok($num.format({ numDecimals: 1 }) == '1,234.6', 'format - numDecimals')
    $t.ok($num.format({ numDecimals: 2, thousandSep: '' }) == '1234.56', 'format - blank sep')
    $flags = { numDecimals: 2, thousandSep: ' ', decimalSep: ',' }
    $t.ok($num.format($flags) == '1 234,56', 'format - sep & dec')
    $t.ok($num.format({ sign: true, numDecimals: 1 }) == '+1,234.6',
        'format - sign positive')
    $t.ok($num.format({ parens: true }) == '1,235',
        'format - negative parens / positive')

    $num = -1234.56
    $t.ok($num.format() == '-1,235', 'format - negative')
    $t.ok($num.format({ numDecimals: 1 }) == '-1,234.6', 'format - negative - numDecimals')
    $t.ok($num.format({ parens: true }) == '(1,235)',
        'format - negative parens / negative')


    $num = 0
    $t.ok($num.format() == '0', 'format - negative')
    $t.ok($num.format({ numDecimals: 3 }) == '0.000', 'format - zero - numDecimals')
    $t.ok($num.format({ sign: true, zeroSign: '-' }) == '-0', 'format - zero - negative')
    $t.ok($num.format({ sign: true, zeroSign: '+' }) == '+0', 'format - zero - positive')
    $t.ok(
        $num.format({ parens: true, zeroSign: '-' }) == '(0)',
        'format - zero - negative parens'
    )
    $t.ok(
        $num.format({ parens: true, zeroSign: '-', numDecimals: 3 }) == '(0.000)',
        'format - zero - negative parens - numDecimals'
    )

    $num = 1234.56
    $t.dies(fn { $num.format({ thousandSep: '*&*' }) }, 'Invalid option map value')


    $num = 1234.56
    $t.ok($num.toString() == '1234.56', 'toString')
    $t.ok($num.toBoolean() == true, 'toBoolean')
    $t.ok((0).toBoolean() == false, 'toBoolean - false')
    $t.ok((-1).toBoolean() == true, 'toBoolean - negative')
    $t.ok((0.1).toBoolean() == true, 'toBoolean - float')

    $t.ok((1.0).isInt() == true, 'isInt true')
    $t.ok((1.2).isInt() == false, 'isInt false')
    $t.ok((1.2).isFloat() == true, 'isFloat true')
    $t.ok((1).isFloat() == false, 'isFloat false')
    $t.ok((1.2).toInt() == 1, 'toInt')
    $t.ok((1).toFloat() == 1.0, 'toFloat')

    $t.ok((0).humanizeCount() == '0th', 'humanizeCount - 0th')
    $t.ok((1).humanizeCount() == '1st', 'humanizeCount - 1st')
    $t.ok((2).humanizeCount() == '2nd', 'humanizeCount - 2nd')
    $t.ok((3).humanizeCount() == '3rd', 'humanizeCount - 3rd')
    $t.ok((4).humanizeCount() == '4th', 'humanizeCount - 4th')
    $t.ok((9).humanizeCount() == '9th', 'humanizeCount - 9th')
    $t.ok((30).humanizeCount() == '30th', 'humanizeCount - 30th')
    $t.ok((31).humanizeCount() == '31st', 'humanizeCount - 31st')
    $t.ok((32).humanizeCount() == '32nd', 'humanizeCount - 32nd')
    $t.ok((33).humanizeCount() == '33rd', 'humanizeCount - 33rd')

    return $t
}

fn libMath($t) {

    $t.section('Module: Math')

    $rand = Math.random(6, 8)
    $rnd = Math.random()


    $t
    .ok($rand >= 6 && $rand <= 8, 'random')
    .ok($rand.floor() == $rand, 'random is int')
    .ok($rnd >= 0.0 && $rnd < 1.0, 'random float')

    $t.ok(Math.convertBase(21, 10, 2) == '10101', 'convertBase: dec to bin')
    .ok(Math.convertBase('1af9', 16, 10) == 6905, 'convertBase: hex to dec')

    $t.ok(Math.hexToDec('F1') == 241, 'hexToDex')
    $t.ok(Math.hexToDec('FF0000') == 16711680, 'hexToDex - color')
    $t.ok(Math.hexToDec('#FF0000') == 16711680, 'hexToDex - CSS color')
    $t.ok(Math.hexToDec('0xFF0000') == 16711680, 'hexToDex - 0x prefix')
    $t.ok(Math.decToHex(241) == 'F1', 'decToHex')
    $t.ok(Math.decToHex(16) == '10', 'decToHex')

    return $t
}

fn libMeta($t) {

    $t.section('Module: Meta')

    .ok(Meta.functionExists('libMeta'), 'functionExists')
    .ok(Meta.callFunction('metaCallMe', ['a', 'b']) == 'a|b', 'callFunction & arguments')

    // TODO: templateMode spills over after error
    .ok(Meta.noTemplateMode() == false, 'noTemplateMode ok')
    .dies(fn { failModeHtml() }, 'noTemplateMode fail', 'can not be called in Template mode')

    .ok(Meta.functionExists('dynamicFunction'), 'dynamic fn exists')
    .ok(Meta.callFunction('dynamicFunction', ['Hey']) == 'Hey!!!', 'call dynamic function')

    .ok(Meta.getThtVersion().match(r'\d+\.\d+\.\d+'), 'thtVersion')
    .ok(Meta.getThtVersion(-num).match(r'^\d{5}$'), 'thtVersion - digits')

    if !isPerfMode() {
        $t.ok(Meta.zGetStdLib()['File'].read.contains('filePath'), 'zGetStdLib')
    }

    return $t
}

fn metaCallMe {

    $args = Meta.getArgs()

    return $args.join('|')
}

fn failTemplateMode {
    Meta.noTemplateMode()
}

tm failModeHtml {
    --- failTemplateMode()
}


// fn libPerf($t) {
//       $t.section('Module: Perf')

//       Perf.forceActive(true)
//       Perf.start('test.perfModule')
//       System.sleep(1)
//       Perf.stop(true)

//       $res = Perf.results(true)
//       $found = false
//       for (r in res.single) {
//           if (r.task == 'testPerf') {
//               found = true
//               break
//           }
//       }
//       $t.ok(found, 'Perf task & results')

//       Perf.forceActive(false)
// }

fn libPhp($t) {

    $t.section('Module: Php')

    $t.ok(Php.getVersion().match(r'\d+\.\d+\.\d+'), 'PHP version')
    $t.ok(Php.getVersion(-num) >= 50500, 'PHP version - numeric')

    $fl = Php.options(['PATHINFO_FILENAME', 'PATHINFO_BASENAME'])
    $t.ok($fl == 10, 'PHP - constant flags')

    $t.ok(Php.getConstant('E_CORE_ERROR') == 16, 'getConstant')

    $t.ok(Php.call('strrev', 'abcdef') == 'fedcba', 'call')
    $t.dies(fn { Php.call('nonexistent', 1, 2) }, 'Non-existent PHP call',
        'PHP function does not exist')
    $t.dies(fn { Php.call('eval', 'echo("hi");') }, 'stop blocklisted fn - by name',
        'PHP function is blocklisted')
    $t.dies(fn { Php.call('ini_set', 'x', 'y') }, 'stop blocklisted fn - by match',
        'PHP function is blocklisted')


    Php.require('vendor/testVendorClass.php')

    $vc = Php.new('Abc/VendorClass')
    $t.ok($vc.takeArray([1, 2, 3]) == 1, 'Vendor class - take array')
    $t.ok($vc.returnArray([1, 2, 3])[1] == 'a', 'Vendor class - return array')
    $t.ok($vc.returnRecords().remove(1)['color'] == 'Red', 'Vendor class - recursive arrays')
    $t.ok($vc.returnObject().callMe() == 'abc', 'Vendor subClass')

    $t.ok($vc.zSet('ALL_CAP_FIELD', 789), 'Vendor class - ALL_CAP_FIELD')
    $t.ok($vc.zGet('ALL_CAP_FIELD') == 789, 'Vendor class - ALL_CAP_FIELD')
    $t.ok($vc.zCall('ALL_CAP_METHOD') == 'FOO', 'Vendor class - ALL_CAP_METHOD')

    $t.dies(fn { $v = Php.version }, 'version()', 'Did you mean to call method `version()`')

    $t.ok(Php.functionExists('strpos'), 'fn exists')
    $t.ok(!Php.functionExists('strposxx'), 'fn exists (not)')
    $t.ok(Php.classExists('DateTime'), 'class exists')
    $t.ok(!Php.classExists('FooBar'), 'class exists (not)')
    $t.ok(Php.classExists('/o/u_Test'), 'class exists (o namespace)')

    $t.ok(Php.call('Abc/VendorClass::staticFunction', 123) == 'STATIC: 123', 'static call')

    return $t
}

fn libWeb($t) {

    $t.section('Module: Web')

    // %5B0%5D   nane[0]=val
   // print(Web.renderStringQuery({ foo: 2, bar: 3, baz: [4, 5] }))

    $t.ok(Web.skipHitCounter() == true, 'skipHitCounter - true')

    $t.ok(Web.icon('arrowRight').renderString().contains('ticon'), 'icon')
    $t.dies(fn { Web.icon('missingBlah') }, 'icon - error', 'Unknown icon')

    $em = Web.maskEmail('user@example.com')
    $t.ok($em.renderString().match(r'&#64;.*?display:none'), 'mask email')


    // $t.dies(x{ Web.assetUrl(url'/nope.png') }, 'does not exist')
    // $t.dies(x{ Web.assetUrl('url/nope.png') }, 'must be passed a `url`')
    // $url = Web.assetUrl(url'/images/image.png')
    // $t.ok($url.getQuery().get('v', 'i') > 1000, 'Web.assetUrl added v param')

    return $t
}

fn libPage($t) {

    $t.section('Module: Page')

    $page = Page.create({
        appName: 'AppName',
        joiner: '~',
        tagline: 'This is a tagline',
    })

    $page.addBodyClass('class1')
    $page.addBodyClass('otherClass')
    $page.setDescription('This is the   desc. ')
    $page.setIcon(url'/images/icon.png')
    $page.setImage(url'/images/image.png')
    $page.addToHead(html'<meta name="custom" property="THT">')

    // Files have to exist
    $page.addCss(url'/css/base.css')
    $page.addJs(url'/js/form.js')

    $out = $page.render()

    $t.ok($out.match(r'<!doctype html>\s*<html>\s*<head>'s), 'start tags')
    $t.ok($out.match(r'<head>.*</head>'s), 'head tags')
    $t.ok($out.match(r'</body>\s*</html>'s), 'end tags')

    $title = '<title>AppName ~ This is a tagline'
    $t.ok($out.renderString().contains($title), 'title - default')
    $t.ok($out.contains('"og:title" content="This is a tagline"'), 'tagline to og:title')

    $page.setTitle('Page Title')

    $out = $page.render().renderString()

    $title = '<title>Page Title ~ AppName'
    $t.ok($out.contains($title), 'title - after setTitle')

    $t.ok($out.contains('"og:title" content="Page Title"'), 'og:title')
    $t.ok($out.contains('"og:site_name" content="AppName"'), 'og:site_name')
    $t.ok($out.contains('meta name="viewport"'), 'viewport meta tag')

    $t.ok($out.match(r'''
        <head>.*<meta name="custom" property="THT">.*</head>
    '''s), 'addToHead')

    // TODO: Test for min.gz and cache 'v' param
    $t.ok($out.match(r'"og:image" content="/images/image\.png"'), 'image')
    $t.ok($out.match(r'<link rel="icon" href="/images/icon\.png">'), 'icon')
    $t.ok($out.match(r'rel="stylesheet" href="/css/base\.css"'), 'addCss')
    $t.ok($out.match(r'''
        <script src="/js/form\.js" nonce="[a-zA-Z0-9]{20,}">
    '''), 'addJs')

    $t.dies(fn { Page.create({ foo: 123 }) }, 'invalid page field')

    return $t
}


fn libOutput($t) {

    $t.section('Module: Output')

    $t.dies(fn {  Output.redirect('http://google.com') }, 'redirect - normal',
        'must be passed a `url`')

    return $t
}

fn libInput($t) {

    $t.section('Module: Input')

    $badQueryVal = Input.get('sdfsd')
    $t.ok($badQueryVal == '', 'get - bad string')

    $badQueryVal = Input.get('sdfsd', 'i')
    $t.ok($badQueryVal == 0, 'get - bad int')

    $data = Input.getAll({
        email: 'email',
        comment: 'ms',
    })

    $badFields = $data.errors
    $t.ok(!$data.ok, 'getAll - not ok')
    $badField = $badFields[2]['field']
    $t.ok($badFields.length() ==  2 && $badField == 'comment', 'getAll - errors')

    $t.dies(fn { formValidate('abc', 'badRule') }, 'bad rule', 'missing `type`')

    $t.ok(formValidate('', 'id|optional') == '', 'optional ok')
    $t.ok(formValidate('123', 'id|optional') == '123', 'optional ok')

    $t.ok(formValidate('id123', 'id') == 'id123', 'id ok')
    $t.ok(formValidate('$foo', 'id') == '', 'id not ok')

    $result = formValidateResult('', 'i')
    $t.ok($result['ok'] == false && $result['value'] == 0, 'empty i - not ok, default zero')

    $result = formValidateResult('', 's')
    $t.ok($result['ok'] == false && $result['value'] == '', 'empty s - not ok, default empty')

    $result = formValidateResult('', 'b')
    $t.ok($result['ok'] == false && $result['value'] == false, 'empty b - not ok, default false')

    $t.ok(formValidate('1234', 'i') == 1234, 'int ok')
    $t.ok(formValidate('-123', { type: 'i', min: -200 }) == -123, 'negative')

    $t.ok(formValidate('$1', 'i') == 0, 'number not ok')

    $t.ok(formValidate('123.4', 'f') == 123.4, 'float ok')
    $t.ok(formValidate('-123.4', 'f|min:-200') == -123.4, 'float - negative')

    $t.ok(formValidate('0', 'f') == 0.0, 'float - 0')
    $t.ok(formValidate('1.2', 'f') == 1.2, 'float - 1.2')
    $t.ok(formValidate('11', 'f|min:1|max:10') == 0.0, 'float - out of range')

    $t.ok(formValidate('true', 'b') == true, 'boolean ok')
    $t.ok(formValidate('false', 'b') == false, 'boolean ok')
    $t.ok(formValidate('1', 'b') == true, 'boolean num 1 = true')
    $t.ok(formValidate('0', 'b') == false, 'boolean num 0 = false')
    $t.ok(formValidate('$1', 'b') == false, 'boolean not ok = false')


    $t.ok(formValidate('me@mail.com', 'email') == 'me@mail.com', 'email ok')
    $t.ok(formValidate('me.com', 'email') == '', 'email not ok - missing @')
    $t.ok(formValidate('me@mailcom', 'email') == '', 'email not ok - missing dot')
    $t.ok(formValidate('skip', 'email') == '', 'email not ok')

    $t.ok(formValidate('me@mail@com', 'email') == '', 'email - two @`s')
    $t.ok(formValidate('me@mail.com.', 'email') == 'me@mail.com', 'email - trailing dot')
    $t.ok(formValidate('me@mail.cm', 'email') == 'me@mail.com', 'email - .cm to .com')

    $t.ok(formValidate('me@gmai.com', 'email') == 'me@gmail.com', 'email - gmail typo')
    $t.ok(formValidate('me@gmal.com', 'email') == 'me@gmail.com', 'email - gmail typo')
    $t.ok(formValidate('me@gmaill.com', 'email') == 'me@gmail.com', 'email - gmail typo')
    $t.ok(formValidate('me@hotmai.cm', 'email') == 'me@hotmail.com', 'email - hotmail typo')
    $t.ok(formValidate('me@htmail.com', 'email') == 'me@hotmail.com', 'email - hotmail typo')

    $t.ok(formValidate('me@yaho.co.uk', 'email') == 'me@yahoo.co.uk', 'email - yahoo typo')
    $t.ok(formValidate('me@yahii.com', 'email') == 'me@yahoo.com', 'email - yahoo typo')
    $t.ok(formValidate('me@yagoo.com', 'email') == 'me@yahoo.com', 'email - yahoo typo')

    $t.ok(formValidate('1', 'accepted') == true, 'accepted ok')
    $t.ok(formValidate('true', 'accepted') == true, 'accepted ok - true')
    $t.ok(formValidate('0', 'accepted') == false, 'accepted not ok')
    $t.ok(formValidate('false', 'accepted') == false, 'accepted not ok - false')
    $t.ok(formValidate('', 'accepted') == false, 'accepted not ok')

    $t.ok(formValidate('(123) 456-7890 x23', 'phone') == '(123) 456-7890 x23', 'phone ok')
    $t.ok(formValidate('badPhone', 'phone') == '', 'phone not ok')

    $t.ok(formValidate('abc  123!', 's') == 'abc 123!', 'text ok')
    $t.ok(formValidate('abc<b>tag', 's') == 'abctag', 'text no tag')
    $t.ok(formValidate('abc\nline2', 's') == 'abc line2', 'text newline')

    $sb = 'abc   123   \n\n  xyz!  \n  '
    $t.ok(formValidate($sb, 'ms') == 'abc   123\n\n  xyz!', 'multiline spaces')
    $t.ok(formValidate('abc<b>tag', 'ms') == 'abctag', 'multiline no tag')
    $t.ok(formValidate('abc\n\n\n\nline2', 'ms') == 'abc\n\n\nline2',
        'multiline newline')
    $t.ok(formValidate('short', 'ms|min:8') == '', 'multiline min')

    $t.ok(formValidate('???', 's|civilize') == '?', 'civilized ?')

    $t.ok(formValidate('toolong', 's|max:5') == '', 'max string')
    $t.ok(formValidate('100', 'i|max:10') == 0, 'max int')
    $t.ok(formValidate('5', 'i|min:10') == 0, 'min int')


    $t.ok(formValidate('user 123', 'username') == '', 'username - space')
    $t.ok(formValidate('user123', 'username') == 'user123', 'username ok')

    $json = formValidate('{"a":[1,2,3],"b":true}', 'json')
    $t.ok($json.a[2] == 2 && $json.b == true, 'json')

    $rule = { type: 's', in: q[red blue green] }
    $t.ok(formValidate('green', $rule) == 'green', 'in: ok')
    $t.ok(formValidate('orange', $rule) == '', 'in: not ok')

    $rule = { type: 's', notIn: q[red blue green] }
    $t.ok(formValidate('orange', $rule) == 'orange', 'notIn: ok')
    $t.ok(formValidate('green', $rule) == '', 'notIn: not ok')

    $date = formValidate('2021-07-14', 'date')
    $t.ok($date.format() == '2021-07-14T00:00:00-0700', 'date')

    $date = formValidate('2021-07-14T15:43', 'dateTime')
    $t.ok($date.format() == '2021-07-14T15:43:00-0700', 'dateTime')

    $date = formValidate('2021-07', 'dateMonth')
    $t.ok($date.format() == '2021-07-01T00:00:00-0700', 'dateMonth')

    $date = formValidate('2021-W13', 'dateWeek')
    $t.ok($date.format() == '2021-03-29T00:00:00-0700', 'dateWeek')

    $time = formValidate('13:45', 'time')
    $t.ok($time == '13:45', 'time')

    if !isPerfMode() {
        $pass = formValidate('pass123', 'newPassword')
        $t.ok($pass == '', 'newPassword - weak')

        $pass = formValidate('js83!ksdfsdf', 'newPassword')
        $t.ok($pass.xDangerPlainText() == 'js83!ksdfsdf', 'newPassword - ok')

        $pass = formValidate('p@ssw0rd', 'password')
        $t.ok($pass.xDangerPlainText() == 'p@ssw0rd', 'password - ok')
    }

    $t.ok(formValidate(['a1', 'a2'], 'id|list').join('|') == 'a1|a2', 'list')
    $t.ok(formValidate(33, 'i|list')[1] == 33, 'list - one element')
    $t.ok(formValidate([33, 44], 'i|list').join('|') == '33|44', 'list|i')
    $t.ok(formValidate(['a5', 'a6'], 'id') == '', 'list data without list rule')
    $t.ok(formValidate([7, [8, 9]], 'i|list').length() == 0, 'nested list not allowed')

    // TODO: same/notSame

    // TODO: test get, post, and post w/out csrf

    return $t
}

fn libForm($t) {

    $t.section('Module: Form')

    $form = Form.create('testForm', {
        num: {
            tag: 'number',
            rule: { type: 'i', max: 100 },
        },
        comment: {
            tag: 'textarea',
        },
        email: {
            tag: 'email',
        },
        password: {
            tag: 'password',
        },
    })

    $fhtml = $form.render('Submit').renderString()

    $currUrl = Request.getUrl().getPath()
    $t.ok(
        $fhtml.contains('<form method="post" action="' ~ $currUrl ~ '" id="testForm"'),
        'form render - form tag'
    )

    $t.ok(
        $fhtml.contains('<input aria-label="Num" name="num" value="" type="number"'),
        'form render - num input tag'
    )

    $t.ok(
        $fhtml.contains('<input aria-label="Email" name="email" value="" type="email"'),
        'form render - email input tag'
    )

    $t.ok(
        $fhtml.contains('"csrfToken":'),
        'form render - csrfToken'
    )

    $t.ok(
        $fhtml.contains('type="submit">Submit</button>'),
        'form render - submit button'
    )

    $t.ok(
        $fhtml.contains('<span>Show Password</span>')
        && $fhtml.contains('''
            <input aria-label="Password" name="password" value="" type="password"
        '''),
        'form render - password'
    )



    // TODO: more tests!

    return $t
}


fn formValidate($v, $type) {

    return formValidateResult($v, $type)['value']
}

fn formValidateResult($v, $type) {

    $val = Input.validateValue('test', $v, $type)

    return $val
}


fn libConfig($t) {

    $t.section('Module: Config')

    $t.ok(Config.get('num') == -123.45, 'get num')
    $t.ok(Config.get('booleanFalse') == false, 'get boolean')
    $t.ok(Config.get('booleanTrue') == true, 'get boolean')
    $t.ok(Config.get('string') == 'value with spaces, etc.', 'get string')
    $t.ok(Config.get('map').key == 'value', 'get map')
    $t.ok(Config.get('list')[2] == 'value 2', 'get list')
    $t.dies(fn { Config.get('MISSING') }, 'missing key',
        'No `app` config value for key')
    $t.ok(Config.get('local').localVar == 789, 'local config')

    $t.ok(Config.get('aUrl').rawString() == 'https://asite.com', 'url typestring')

    return $t
}

fn libCookie($t) {

    $t.section('Module: Cookie')

    Cookie.set('test', 'abc123')
    $t.ok(Cookie.get('test') == 'abc123', 'Cookie - get/set')

    Cookie.set('deleteMe', 'xxx')
    Cookie.delete('deleteMe')
    $t.ok(Cookie.get('deleteMe') == '', 'Cookie - delete')

    $t.dies(fn {
        Cookie.set('test', '{"a":123}')
    }, 'alphanumeric')

    return $t
}

fn libSession($t) {

    $t.section('Module: Session')

    Session.deleteAll()

    Session.set('key1', 'value')
    Session.set('key2', { a: 'b' })
    $t.ok(Session.get('key1') == 'value', 'set/get')
    $t.ok(Session.get('key2').a == 'b', 'get map')

    $t.ok(Session.getAll().keys().join('|') == 'key1|key2', 'getAll')

    $t.ok(Session.get('missing', '') == '', 'get with blank default')
    $t.ok(Session.get('missing', 'default') == 'default', 'get with default')

    $t.ok(Session.hasKey('key1'), 'hasKey true')
    $t.ok(Session.delete('key1') == 'value', 'delete')
    $t.ok(!Session.hasKey('key1'), 'hasKey false')

    Session.deleteAll()
    $t.ok(Session.getAll().keys().length() == 0, 'deleteAll')

    $t.ok(Session.addCounter('num') == 1, 'counter 1')
    $t.ok(Session.addCounter('num') == 2, 'counter 2')

    Session.setFlash('fkey', 'fvalue')
    $t.ok(Session.getFlash('fkey') == 'fvalue', 'flash set/get')

    $t.ok(Session.hasFlash('fkey'), 'hasFlash - true')
    $t.ok(Session.hasFlash('missing') == false, 'hasFlash - false')

    Session.addToList('list', 123)
    $t.ok(Session.get('list')[1] == 123, 'addToList 1')

    Session.addToList('list', 456)
    $t.ok(Session.get('list')[2] == 456, 'addToList 2')

    $t.dies(fn { Session.get('missing') }, 'get bad key', 'Unknown session key')

    return $t
}

fn libCache($t) {

    if isPerfMode(): return $t

    $t.section('Module: Cache')

    Cache.forceFileDriver()

    Cache.delete('test')
    Cache.set('test', 123, 1)

    $t.ok(Cache.has('test'), 'has')
    $t.ok(Cache.get('test') == 123, 'get')

    Cache.delete('not1')
    Cache.delete('not2')
    Cache.delete('not3')
    Cache.delete('not4')

    $t.ok(!Cache.has('not1'), 'has not')
    $t.ok(Cache.get('not1', 'missing') == 'missing', 'get default')

    $v = Cache.get('not2', fn {
        return 'fromSetter'
    })
    $t.ok($v == 'fromSetter', 'get with default function')

    Cache.set('not3', 'fromSetter', 0)
    $t.ok(Cache.get('not3') == 'fromSetter', 'get with default function')

    $t.dies(fn { Cache.get('not4', fn { }) }, 'must return a non-false value',
        'must return a non-false value')



    Cache.set('data', { a: ['x', 'y', 'z'] }, 3)
    $t.ok(Cache.get('data').a.join('|') == 'x|y|z', 'get map + list')

    Cache.delete('data')
    $t.ok(!Cache.has('data'), 'delete')

    $t.ok(Cache.counter('count') == 1, 'counter 1')
    $t.ok(Cache.counter('count') == 2, 'counter 2')
    $t.ok(Cache.counter('count', 2) == 4, 'counter +2')
    $t.ok(Cache.counter('count', -1) == 3, 'counter -1')

    Cache.delete('count')

    Cache.set('short', 'xyz', 1)
    Cache.set('med', 'xyz', 10)
    Cache.set('forever', 'xyz', 0)

    Cache.clearLocalCache()
    System.sleep(2000)

    $t.ok(!Cache.has('short'), '1s expiry')
    $t.ok(Cache.get('short') == '', '1s expiry val')

    $t.ok(Cache.has('med'), '10s expiry')
    $t.ok(Cache.get('med') == 'xyz', 'no expiry val')
    $t.ok(Cache.has('forever'), 'no expiry')
    $t.ok(Cache.get('forever') == 'xyz', 'no expiry val')

    Cache.delete('short')
    Cache.delete('med')
    Cache.delete('forever')

    return $t
}

fn libNet($t) {

    if isPerfMode(): return $t

    $t.section('Module: Net')

    $content = Net.httpGet(url'https://tht.dev')
    $t.ok($content.match(r'programming language'i), 'get content')

   // TODO: create a post-back URL at tht.dev
    // $content = Net.httpPost(
    //     url'https://putsreq.com/TiktDvn26ykgGwi8GQ4M',
    //     { name: 'tht' }
    // )
    // $t.ok('OK|tht', 'Net post')


    // TODO:  more tests

   $t.ok(Net.httpStatus(url'https://tht.dev/install') == 200, 'urlExists - ok')
   $t.ok(Net.httpStatus(url'https://tht-nope.dev')    == 0, 'urlExists - bad hostname')
   $t.ok(Net.httpStatus(url'https://tht.dev/sdfsdf')  == 404, 'urlExists - missing path')

   return $t
}

fn libSystem($t) {

    $t.section('Module: System')

    $t.ok(System.getEnvVar('PATH') != '', 'envVar - PATH')
    $t.ok(System.getEnvVar('DFSDFHJSF') == '', 'envVar - missing')
    $t.ok(System.getEnvVar('DFSDFHJSF', 'def') == 'def', 'envVar - default')
    $t.ok(System.getStartTime() > 10000000, 'startTime')
    $t.ok(System.getMemoryUsage() > 0, 'memoryUsage')
    $t.ok(System.getPeakMemoryUsage() > 0, 'peakMemoryUsage')
    $t.ok(System.getOs().match(r'(mac|windows|linux)'), 'os')

    // Can't be called in webMode
    //$t.ok(System.command(cmd'ls').output[0] == 'thtApp.php', 'command')

    return $t
}

// TODO: This is all hardcoded to my local setup
fn libRequest($t) {

    $t.section('Module: Request')

    $t.ok(Request.getIp(), 'ip')
    $t.ok(Request.getIp(-all).zClassName() == 'List', 'ip list')

    $ua = Request.getUserAgent()
    $t.ok($ua.os == 'mac' || $ua.os == 'windows', 'userAgent - os')
    $t.ok($ua.browser == 'chrome' || $ua.browser == 'firefox', 'userAgent - browser')
    $t.ok($ua.full.contains('Mozilla'), 'userAgent - full')
    $t.ok(Request.getLanguages()[1] == 'en-us', 'languages')

    $t.ok(Request.isHttps() == false, 'isHttps')
    $t.ok(Request.isAjax() == false, 'isAjax')
    $ref = Request.getReferrer()
    $t.ok($ref == '' || $ref.contains('localhost', -ignoreCase), 'referrer')

    $t.ok(Request.getMethod() == 'get', 'method')
    $t.ok(Request.getHeaders().hasKey('accept-encoding'), 'headers')

    return $t
}






// Functions
//-----------------------------------------


fn dynamicFunction($a) {
    return $a ~ '!!!'
}

fn noReturn {

}

fn testDefaultMap($xmap = { a: 123 }) {
    return $xmap
}

fn testDefaultList($xlist = ['a', 'b', 'c']) {

    return $xlist
}

fn testDefaultMaps($m1 = { a: 'aa' }, $m2 = { b: 'bb' }) {
    $m1['m2'] = $m2
    return $m1
}

fn spread(...$args) {
    return $args.join(':')
}





// Templates
//-----------------------------------------


tm whitespaceLineHtml {
    <div>
       <b>a 1</b>
       <b>a 2</b>
    </div>
}

tm whitespaceTagHtml {
    <p> This is a <b>Message </b>! </p>
}

tm templateHtml($users) {

    <b> Hello
    --- foreach $users as $u {
        <li> {{ $u }}
    --- }

}

tm dataJs($d) {
    $d =  {{ $d }}
}

tm regexJs {
    'foo'.match(/\/[\w]+\n/g);
}

tm entHtml {
    <p> 2 &gt; 1
}

tm formatBlockHtml {
    <p>>>
        <foo>
            indented
    </>
}

tm bsHtml {
    a\nb\nc
}

tm jsHtml {
    <script nonce="{{ Web.nonce() }}">
    var a = '&lt;a\nb\nc'
    </>
}

tm expHtml($inner, $outer) {
    <p "{{ $inner }}"> {{ $outer }}
}

tm tagsHtml($exp) {
    {{ $exp }}
}

tm inCss {
    font-weight: bold
}

tm inJs {
    var a = 1
}

tm tagHtml($val) {
    <p> {{ $val }}
}

tm expCss($inp) {
    font-weight: {{ $inp }}
}

// TODO: TEST ME
tm spaceHtml {

    <b>FOO</b> <a href="/"> BAR </>

    <h1> Header

    <!-- comment -->

    <p style="background-color: #eee"> paragraph1

    <div style="border: solid 1px #eee; padding: 30px">
        <div> Item A
        <div> Item <b>Bravo
        <div> Item <b>Charlie</>
        <div>{{ 'dynamic' }}
    </>
}

tm multilineVarText($mlVar) {

    Message:

    {{ $mlVar }}
}

tm tesLm {

    # Heading 1

    ## Heading 2

    Line 1
    Line 2

    Para 2

    This is **bold**

    This is __italic__

    This is **__bold italic__**
    This is __**italic bold**__

    - Item 1
    - Item 2
    - Item 3

    pre-break[br]post-break

    inline [del strike text]
    nested [del [/url | url]]

    [/rel-url]

    [/rel-url | link label]

    [http://abs/url]

    Inline URL: http://abc.com/inline/url.htm?a=1&b=2#xzy.

    More URLs: http://comma.com, (http://paren.com/)

    From JCON: [tag jcon]
    From JCON2: [othertag jcon]

    [http://abs/url | abs label]

    [info | callout with **bold**]

    ```
    code_here
    ```

    ```custom-class
        more_code
    ```

}

tm chunkHtml($num) {
    C{{ $num }}
}

tm listOfChunksHtml($chunks) {
    {{ $chunks }}
}



